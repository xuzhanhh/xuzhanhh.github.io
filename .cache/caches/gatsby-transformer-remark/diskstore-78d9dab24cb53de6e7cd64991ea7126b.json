{"expireTime":9007200799509181000,"key":"transformer-remark-markdown-ast-68d754e187713fdab7c50470da0cb80a-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Promise","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":10,"offset":10},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":10,"offset":10},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"见识了一道面试题，重温一下Promise。","position":{"start":{"line":4,"column":1,"offset":12},"end":{"line":4,"column":22,"offset":33},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":12},"end":{"line":4,"column":22,"offset":33},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"题目","position":{"start":{"line":6,"column":4,"offset":38},"end":{"line":6,"column":6,"offset":40},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":35},"end":{"line":6,"column":6,"offset":40},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">timeout</span> <span class=\"token operator\">=</span> ms <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ajax1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ajax2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ajax3</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">return</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function-variable function\">mergePromise</span> <span class=\"token operator\">=</span> ajaxArray <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//填这里</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">mergePromise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>ajax1<span class=\"token punctuation\">,</span> ajax2<span class=\"token punctuation\">,</span> ajax3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'done'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 分别输出</span>\n<span class=\"token comment\">// 1</span>\n<span class=\"token comment\">// 2</span>\n<span class=\"token comment\">// 3</span>\n<span class=\"token comment\">// done</span>\n<span class=\"token comment\">// [1, 2, 3]</span></code></pre></div>","position":{"start":{"line":8,"column":1,"offset":42},"end":{"line":45,"column":4,"offset":593},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"分析","position":{"start":{"line":47,"column":4,"offset":598},"end":{"line":47,"column":6,"offset":600},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":595},"end":{"line":47,"column":6,"offset":600},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"​\t乍看题目没什么困难，要实现也可以强行用timeout延迟ajax2的调用。但是题目肯定不是做完就好了，就在想mergePromise能否写成能实现fc，而不是仅仅完成这一题。难点就在于如何解决forEach或者使用reduce后还能保持then的状态","position":{"start":{"line":49,"column":1,"offset":602},"end":{"line":49,"column":128,"offset":729},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":602},"end":{"line":49,"column":128,"offset":729},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"我理解的Promise","position":{"start":{"line":53,"column":4,"offset":736},"end":{"line":53,"column":15,"offset":747},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":733},"end":{"line":53,"column":15,"offset":747},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"所谓","position":{"start":{"line":55,"column":3,"offset":751},"end":{"line":55,"column":5,"offset":753},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">Promise</code>","position":{"start":{"line":55,"column":5,"offset":753},"end":{"line":55,"column":14,"offset":762},"indent":[]}},{"type":"text","value":"，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。","position":{"start":{"line":55,"column":14,"offset":762},"end":{"line":55,"column":128,"offset":876},"indent":[]}}],"position":{"start":{"line":55,"column":3,"offset":751},"end":{"line":55,"column":128,"offset":876},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":749},"end":{"line":55,"column":128,"offset":876},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"特点：","position":{"start":{"line":57,"column":3,"offset":880},"end":{"line":57,"column":6,"offset":883},"indent":[]}}],"position":{"start":{"line":57,"column":3,"offset":880},"end":{"line":57,"column":6,"offset":883},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"  一旦状态改变，就不会再变，任何时候都可以得到这个结果。","position":{"start":{"line":59,"column":3,"offset":888},"end":{"line":59,"column":32,"offset":917},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">Promise</code>","position":{"start":{"line":59,"column":32,"offset":917},"end":{"line":59,"column":41,"offset":926},"indent":[]}},{"type":"text","value":"对象的状态改变，只有两种可能：从","position":{"start":{"line":59,"column":41,"offset":926},"end":{"line":59,"column":57,"offset":942},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">pending</code>","position":{"start":{"line":59,"column":57,"offset":942},"end":{"line":59,"column":66,"offset":951},"indent":[]}},{"type":"text","value":"变为","position":{"start":{"line":59,"column":66,"offset":951},"end":{"line":59,"column":68,"offset":953},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">fulfilled</code>","position":{"start":{"line":59,"column":68,"offset":953},"end":{"line":59,"column":79,"offset":964},"indent":[]}},{"type":"text","value":"和从","position":{"start":{"line":59,"column":79,"offset":964},"end":{"line":59,"column":81,"offset":966},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">pending</code>","position":{"start":{"line":59,"column":81,"offset":966},"end":{"line":59,"column":90,"offset":975},"indent":[]}},{"type":"text","value":"变为","position":{"start":{"line":59,"column":90,"offset":975},"end":{"line":59,"column":92,"offset":977},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">rejected</code>","position":{"start":{"line":59,"column":92,"offset":977},"end":{"line":59,"column":102,"offset":987},"indent":[]}},{"type":"text","value":"。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对","position":{"start":{"line":59,"column":102,"offset":987},"end":{"line":59,"column":169,"offset":1054},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">Promise</code>","position":{"start":{"line":59,"column":169,"offset":1054},"end":{"line":59,"column":178,"offset":1063},"indent":[]}},{"type":"text","value":"对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。","position":{"start":{"line":59,"column":178,"offset":1063},"end":{"line":59,"column":242,"offset":1127},"indent":[]}}],"position":{"start":{"line":59,"column":3,"offset":888},"end":{"line":59,"column":242,"offset":1127},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":878},"end":{"line":59,"column":242,"offset":1127},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":" 核心是要理解容器与状态改变后就不会再变的状态。所以根据这个特性可以拓展forEach只能同步执行的弱点，通过forEach将ajaxArray拼在一条Promise链中。","position":{"start":{"line":61,"column":1,"offset":1129},"end":{"line":61,"column":87,"offset":1215},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":1129},"end":{"line":61,"column":87,"offset":1215},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Promise学习","position":{"start":{"line":65,"column":4,"offset":1222},"end":{"line":65,"column":13,"offset":1231},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":1219},"end":{"line":65,"column":13,"offset":1231},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"一个简单的延时器","position":{"start":{"line":67,"column":5,"offset":1237},"end":{"line":67,"column":13,"offset":1245},"indent":[]}}],"position":{"start":{"line":67,"column":1,"offset":1233},"end":{"line":67,"column":13,"offset":1245},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n \t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span>reject<span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> ms<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>   \n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":69,"column":1,"offset":1247},"end":{"line":75,"column":4,"offset":1361},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Promise嵌套","position":{"start":{"line":79,"column":5,"offset":1369},"end":{"line":79,"column":14,"offset":1378},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":1365},"end":{"line":79,"column":14,"offset":1378},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fail'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\np2\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>error <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Error: fail</span></code></pre></div>","position":{"start":{"line":81,"column":1,"offset":1380},"end":{"line":94,"column":4,"offset":1694},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"上面代码中，p1是一个 Promise，3 秒之后变为rejected。p2的状态在 1 秒之后改变，resolve方法返回的是p1。由于p2返回的是另一个 Promise，导致p2自己的状态无效了，由p1的状态决定p2的状态。所以，后面的then语句都变成针对后者（p1）。又过了 2 秒，p1变为rejected，导致触发catch方法指定的回调函数。","position":{"start":{"line":96,"column":1,"offset":1696},"end":{"line":96,"column":179,"offset":1874},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":1696},"end":{"line":96,"column":179,"offset":1874},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Promise.resolve()","position":{"start":{"line":100,"column":5,"offset":1882},"end":{"line":100,"column":22,"offset":1899},"indent":[]}}],"position":{"start":{"line":100,"column":1,"offset":1878},"end":{"line":100,"column":22,"offset":1899},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"有时需要将现有对象转为 Promise 对象，","position":{"start":{"line":102,"column":1,"offset":1901},"end":{"line":102,"column":24,"offset":1924},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">Promise.resolve</code>","position":{"start":{"line":102,"column":24,"offset":1924},"end":{"line":102,"column":41,"offset":1941},"indent":[]}},{"type":"text","value":"方法就起到这个作用。","position":{"start":{"line":102,"column":41,"offset":1941},"end":{"line":102,"column":51,"offset":1951},"indent":[]}}],"position":{"start":{"line":102,"column":1,"offset":1901},"end":{"line":102,"column":51,"offset":1951},"indent":[]}},{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">Promise.resolve</code>","position":{"start":{"line":104,"column":1,"offset":1953},"end":{"line":104,"column":18,"offset":1970},"indent":[]}},{"type":"text","value":"等价于下面的写法。","position":{"start":{"line":104,"column":18,"offset":1970},"end":{"line":104,"column":27,"offset":1979},"indent":[]}}],"position":{"start":{"line":104,"column":1,"offset":1953},"end":{"line":104,"column":27,"offset":1979},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 等价于</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span>resolve <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":106,"column":1,"offset":1981},"end":{"line":110,"column":4,"offset":2067},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"答案","position":{"start":{"line":114,"column":4,"offset":2074},"end":{"line":114,"column":6,"offset":2076},"indent":[]}}],"position":{"start":{"line":114,"column":1,"offset":2071},"end":{"line":114,"column":6,"offset":2076},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"构建顺序执行异步任务的基本块是","position":{"start":{"line":116,"column":1,"offset":2078},"end":{"line":116,"column":16,"offset":2093},"indent":[]}}],"position":{"start":{"line":116,"column":1,"offset":2078},"end":{"line":116,"column":16,"offset":2093},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> sequence <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\narray<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\nsequence <span class=\"token operator\">=</span> sequence<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token comment\">//deal item)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":118,"column":1,"offset":2095},"end":{"line":123,"column":4,"offset":2219},"indent":[1,1,1,1,1]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">mergePromise</span> <span class=\"token operator\">=</span> ajaxArray <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//起始的promise</span>\n    <span class=\"token keyword\">var</span> sequence <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 存放数组中每一个promise的结果</span>\n    <span class=\"token keyword\">let</span> ret <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//为了实现Promise链的延续，这里必须返回一个promise，而且返回值是ret</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>reslove<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> \n        ajaxArray<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        \t<span class=\"token comment\">//这里的forEach是同步执行的</span>\n            sequence <span class=\"token operator\">=</span> sequence<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                ret<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">.</span>length<span class=\"token operator\">===</span>ajaxArray<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">reslove</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'!!!'</span><span class=\"token punctuation\">,</span> sequence<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">mergePromise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>ajax1<span class=\"token punctuation\">,</span> ajax2<span class=\"token punctuation\">,</span> ajax3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'done'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":127,"column":1,"offset":2223},"end":{"line":155,"column":4,"offset":2969},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":161,"column":1,"offset":2975}}}}