{"expireTime":9007200800201753000,"key":"transformer-remark-markdown-ast-992bef36f25fc9c129eb973326bc8f10-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://medium.com/react-in-depth/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react-e1c04700ef6e","children":[{"type":"text","value":"read this","position":{"start":{"line":2,"column":2,"offset":2},"end":{"line":2,"column":11,"offset":11},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":136,"offset":136},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":136,"offset":136},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"createFiberFromTypeAndProps","position":{"start":{"line":4,"column":4,"offset":141},"end":{"line":4,"column":31,"offset":168},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":138},"end":{"line":4,"column":31,"offset":168},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"​\t当一个React元素第一次被转换成fiber node时，React使用createFiberFromTypeAndProps。在随后的更新中React会重用fiber node且只更新从当前React元素获取必须的属性。React还会根据key属性在目录中移动结点位置或删除它如果react元素的render方法没有返回值。","position":{"start":{"line":6,"column":1,"offset":170},"end":{"line":6,"column":166,"offset":335},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":170},"end":{"line":6,"column":166,"offset":335},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"查看","position":{"start":{"line":8,"column":2,"offset":338},"end":{"line":8,"column":4,"offset":340},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactChildFiber.js#L239","children":[{"type":"strong","children":[{"type":"text","value":"ChildReconciler","position":{"start":{"line":8,"column":7,"offset":343},"end":{"line":8,"column":22,"offset":358},"indent":[]}}],"position":{"start":{"line":8,"column":5,"offset":341},"end":{"line":8,"column":24,"offset":360},"indent":[]}}],"position":{"start":{"line":8,"column":4,"offset":340},"end":{"line":8,"column":160,"offset":496},"indent":[]}},{"type":"text","value":"方法得到所有行动和React针对当前的fiber结点类型执行的相应的方法","position":{"start":{"line":8,"column":160,"offset":496},"end":{"line":8,"column":196,"offset":532},"indent":[]}}],"position":{"start":{"line":8,"column":2,"offset":338},"end":{"line":8,"column":196,"offset":532},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":337},"end":{"line":8,"column":196,"offset":532},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"current和workInProgress tree","position":{"start":{"line":10,"column":4,"offset":537},"end":{"line":10,"column":31,"offset":564},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":534},"end":{"line":10,"column":31,"offset":564},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"​\t第一次render结束后，React会生成一个fiber tree映射应用的状态和UI，这个tree一般叫","position":{"start":{"line":12,"column":1,"offset":566},"end":{"line":12,"column":56,"offset":621},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">current</code>","position":{"start":{"line":12,"column":56,"offset":621},"end":{"line":12,"column":65,"offset":630},"indent":[]}},{"type":"text","value":"。当React准备开始更新时会构建一个","position":{"start":{"line":12,"column":65,"offset":630},"end":{"line":12,"column":84,"offset":649},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">workInProgress</code>","position":{"start":{"line":12,"column":84,"offset":649},"end":{"line":12,"column":101,"offset":666},"indent":[]}},{"type":"text","value":"tree，反映将被渲染到屏幕的将来的状态。","position":{"start":{"line":12,"column":101,"offset":666},"end":{"line":12,"column":122,"offset":687},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":566},"end":{"line":12,"column":122,"offset":687},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"​\t所有的fibers上的工作都会在workInProgress tree上执行。当React遍历current tree时，每一个存在的结点都会创建一个alternate node来构成workInProgress tree。当更新完成且所有的相关工作完成时，React准备将alternate tree渲染到屏幕上。一旦workInProgress tree被渲染到屏幕上，他就会变成current tree。","position":{"start":{"line":14,"column":1,"offset":689},"end":{"line":14,"column":208,"offset":896},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":689},"end":{"line":14,"column":208,"offset":896},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"​\t在代码中你会见到很多函数需要current和workInProgress tree：","position":{"start":{"line":16,"column":1,"offset":898},"end":{"line":16,"column":45,"offset":942},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":898},"end":{"line":16,"column":45,"offset":942},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateHostComponent</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> workInProgress<span class=\"token punctuation\">,</span> renderExpirationTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":18,"column":1,"offset":944},"end":{"line":20,"column":4,"offset":1043},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"​\t每一个fiber结点的alternate属性会是它在另外一颗树上的副本的引用。一个current tree上的结点会指向workInprogress tree上的结点，反之亦然。","position":{"start":{"line":22,"column":1,"offset":1045},"end":{"line":22,"column":92,"offset":1136},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1045},"end":{"line":22,"column":92,"offset":1136},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Side-effects && Effects list","position":{"start":{"line":24,"column":4,"offset":1141},"end":{"line":24,"column":32,"offset":1169},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":1138},"end":{"line":24,"column":32,"offset":1169},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"​\t每一个fiber结点可以有与之相关的作用，这些被放在effectTag字段中。所以fiber的effects基本定义了实例在更新完后需要处理的","position":{"start":{"line":26,"column":1,"offset":1171},"end":{"line":26,"column":74,"offset":1244},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/shared/ReactSideEffectTags.js","children":[{"type":"text","value":"工作","position":{"start":{"line":26,"column":75,"offset":1245},"end":{"line":26,"column":77,"offset":1247},"indent":[]}}],"position":{"start":{"line":26,"column":74,"offset":1244},"end":{"line":26,"column":198,"offset":1368},"indent":[]}},{"type":"text","value":"。例如host组件（DOM 元素）会有adding, updating or removing elements。类组件会有更新refs，调用cDM和cDU生命周期。","position":{"start":{"line":26,"column":198,"offset":1368},"end":{"line":26,"column":281,"offset":1451},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1171},"end":{"line":26,"column":281,"offset":1451},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"​\tReact会构建一个有effects的fiber结点的线性列表去快速遍历。遍历线性列表比遍历树快很多，且没必要花费时间在没有副作用的结点上。这个列表是","position":{"start":{"line":28,"column":1,"offset":1453},"end":{"line":28,"column":78,"offset":1530},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">finishedWork</code>","position":{"start":{"line":28,"column":78,"offset":1530},"end":{"line":28,"column":92,"offset":1544},"indent":[]}},{"type":"text","value":"tree的子集且它在current和workInProgress tree中使用nextEffect属性链接而不是child属性。","position":{"start":{"line":28,"column":92,"offset":1544},"end":{"line":28,"column":157,"offset":1609},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1453},"end":{"line":28,"column":157,"offset":1609},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"​\t例如，我们的更新会导致","position":{"start":{"line":30,"column":1,"offset":1611},"end":{"line":30,"column":14,"offset":1624},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">c2</code>","position":{"start":{"line":30,"column":14,"offset":1624},"end":{"line":30,"column":18,"offset":1628},"indent":[]}},{"type":"text","value":"插入到DOM中，","position":{"start":{"line":30,"column":18,"offset":1628},"end":{"line":30,"column":26,"offset":1636},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">d2</code>","position":{"start":{"line":30,"column":26,"offset":1636},"end":{"line":30,"column":30,"offset":1640},"indent":[]}},{"type":"text","value":"和","position":{"start":{"line":30,"column":30,"offset":1640},"end":{"line":30,"column":31,"offset":1641},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">c1</code>","position":{"start":{"line":30,"column":31,"offset":1641},"end":{"line":30,"column":35,"offset":1645},"indent":[]}},{"type":"text","value":"改变DOM属性，","position":{"start":{"line":30,"column":35,"offset":1645},"end":{"line":30,"column":43,"offset":1653},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">b2</code>","position":{"start":{"line":30,"column":43,"offset":1653},"end":{"line":30,"column":47,"offset":1657},"indent":[]}},{"type":"text","value":"触发生命周期。effect list会连接他们所以React可以跳过其他结点。","position":{"start":{"line":30,"column":47,"offset":1657},"end":{"line":30,"column":86,"offset":1696},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1611},"end":{"line":30,"column":86,"offset":1696},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"http://pjpqjxkf6.bkt.clouddn.com/1%2AQ0pCNcK1FfCttek32X_l7A.png","alt":"img","position":{"start":{"line":32,"column":1,"offset":1698},"end":{"line":32,"column":72,"offset":1769},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":1698},"end":{"line":32,"column":72,"offset":1769},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"http://pjpqjxkf6.bkt.clouddn.com/1%2AmbeZ1EsfMsLUk-9hOYyozw.png","alt":"img","position":{"start":{"line":34,"column":1,"offset":1771},"end":{"line":34,"column":72,"offset":1842},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1771},"end":{"line":34,"column":72,"offset":1842},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"可以看得到，React会从children再到parents执行effects。","position":{"start":{"line":36,"column":1,"offset":1844},"end":{"line":36,"column":41,"offset":1884},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1844},"end":{"line":36,"column":41,"offset":1884},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Fiber tree的根节点","position":{"start":{"line":38,"column":4,"offset":1889},"end":{"line":38,"column":18,"offset":1903},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1886},"end":{"line":38,"column":18,"offset":1903},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"React对每一个这些container创建","position":{"start":{"line":40,"column":1,"offset":1905},"end":{"line":40,"column":23,"offset":1927},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/facebook/react/blob/0dc0ddc1ef5f90fe48b58f1a1ba753757961fc74/packages/react-reconciler/src/ReactFiberRoot.js#L31","children":[{"type":"text","value":"fiber root","position":{"start":{"line":40,"column":24,"offset":1928},"end":{"line":40,"column":34,"offset":1938},"indent":[]}}],"position":{"start":{"line":40,"column":23,"offset":1927},"end":{"line":40,"column":168,"offset":2072},"indent":[]}},{"type":"text","value":"，你可以这样找到他们","position":{"start":{"line":40,"column":168,"offset":2072},"end":{"line":40,"column":178,"offset":2082},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":1905},"end":{"line":40,"column":178,"offset":2082},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fiberRoot <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>_reactRootContainer<span class=\"token punctuation\">.</span>_internalRoot</code></pre></div>","position":{"start":{"line":42,"column":1,"offset":2084},"end":{"line":44,"column":4,"offset":2163},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":" fiber root的current属性中是React存放fiber tree的地方。","position":{"start":{"line":46,"column":1,"offset":2165},"end":{"line":46,"column":45,"offset":2209},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":2165},"end":{"line":46,"column":45,"offset":2209},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> hostRootFiberNode <span class=\"token operator\">=</span> fiberRoot<span class=\"token punctuation\">.</span>current</code></pre></div>","position":{"start":{"line":48,"column":1,"offset":2211},"end":{"line":50,"column":4,"offset":2272},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"fiber tree会用","position":{"start":{"line":52,"column":1,"offset":2274},"end":{"line":52,"column":13,"offset":2286},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/facebook/react/blob/cbbc2b6c4d0d8519145560bd8183ecde55168b12/packages/shared/ReactWorkTags.js#L34","children":[{"type":"text","value":"一种特别的类型的fiber结点","position":{"start":{"line":52,"column":14,"offset":2287},"end":{"line":52,"column":29,"offset":2302},"indent":[]}}],"position":{"start":{"line":52,"column":13,"offset":2286},"end":{"line":52,"column":148,"offset":2421},"indent":[]}},{"type":"text","value":"开始：","position":{"start":{"line":52,"column":148,"offset":2421},"end":{"line":52,"column":151,"offset":2424},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">HostRoot</code>","position":{"start":{"line":52,"column":151,"offset":2424},"end":{"line":52,"column":161,"offset":2434},"indent":[]}},{"type":"text","value":"，通过","position":{"start":{"line":52,"column":161,"offset":2434},"end":{"line":52,"column":164,"offset":2437},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">stateNode</code>","position":{"start":{"line":52,"column":164,"offset":2437},"end":{"line":52,"column":175,"offset":2448},"indent":[]}},{"type":"text","value":"可以从","position":{"start":{"line":52,"column":175,"offset":2448},"end":{"line":52,"column":178,"offset":2451},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">HostRoot</code>","position":{"start":{"line":52,"column":178,"offset":2451},"end":{"line":52,"column":188,"offset":2461},"indent":[]}},{"type":"text","value":"fiber结点返回FiberRoot","position":{"start":{"line":52,"column":188,"offset":2461},"end":{"line":52,"column":206,"offset":2479},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":2274},"end":{"line":52,"column":206,"offset":2479},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">fiberRoot<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>stateNode <span class=\"token operator\">===</span> fiberRoot<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>","position":{"start":{"line":54,"column":1,"offset":2481},"end":{"line":56,"column":4,"offset":2549},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Fiber node structure","position":{"start":{"line":58,"column":4,"offset":2554},"end":{"line":58,"column":24,"offset":2574},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":2551},"end":{"line":58,"column":24,"offset":2574},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"stateNode","position":{"start":{"line":60,"column":5,"offset":2580},"end":{"line":60,"column":14,"offset":2589},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":2576},"end":{"line":60,"column":14,"offset":2589},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"保持fiber对本地状态的联系， 保存对组件的类实例，DOM节点或与fiber节点关联的其他React元素类型的引用。","position":{"start":{"line":62,"column":1,"offset":2591},"end":{"line":62,"column":60,"offset":2650},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":2591},"end":{"line":62,"column":60,"offset":2650},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"type","position":{"start":{"line":64,"column":5,"offset":2656},"end":{"line":64,"column":9,"offset":2660},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":2652},"end":{"line":64,"column":9,"offset":2660},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"定义与此fiber节点关联的功能或类，对于class组件，它指向constructor函数，对于DOM元素，它是HTML tag。","position":{"start":{"line":66,"column":1,"offset":2662},"end":{"line":66,"column":66,"offset":2727},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":2662},"end":{"line":66,"column":66,"offset":2727},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"tag","position":{"start":{"line":68,"column":5,"offset":2733},"end":{"line":68,"column":8,"offset":2736},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":2729},"end":{"line":68,"column":8,"offset":2736},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"定义","position":{"start":{"line":70,"column":1,"offset":2738},"end":{"line":70,"column":3,"offset":2740},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/shared/ReactWorkTags.js","children":[{"type":"text","value":"fiber节点的类型","position":{"start":{"line":70,"column":4,"offset":2741},"end":{"line":70,"column":14,"offset":2751},"indent":[]}}],"position":{"start":{"line":70,"column":3,"offset":2740},"end":{"line":70,"column":129,"offset":2866},"indent":[]}},{"type":"text","value":"。被用于决定需要在reconciliation中做什么工作。","position":{"start":{"line":70,"column":129,"offset":2866},"end":{"line":70,"column":159,"offset":2896},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":2738},"end":{"line":70,"column":159,"offset":2896},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"updateQueue","position":{"start":{"line":72,"column":5,"offset":2902},"end":{"line":72,"column":16,"offset":2913},"indent":[]}}],"position":{"start":{"line":72,"column":1,"offset":2898},"end":{"line":72,"column":16,"offset":2913},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"状态更新，回调和DOM更新的队列。","position":{"start":{"line":74,"column":1,"offset":2915},"end":{"line":74,"column":18,"offset":2932},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":2915},"end":{"line":74,"column":18,"offset":2932},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"memoizedState","position":{"start":{"line":76,"column":5,"offset":2938},"end":{"line":76,"column":18,"offset":2951},"indent":[]}}],"position":{"start":{"line":76,"column":1,"offset":2934},"end":{"line":76,"column":18,"offset":2951},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"fiber用于创建输出的state。处理更新时，它会反映当前在屏幕上呈现的状态。","position":{"start":{"line":78,"column":1,"offset":2953},"end":{"line":78,"column":41,"offset":2993},"indent":[]}}],"position":{"start":{"line":78,"column":1,"offset":2953},"end":{"line":78,"column":41,"offset":2993},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"memoizedProps","position":{"start":{"line":80,"column":5,"offset":2999},"end":{"line":80,"column":18,"offset":3012},"indent":[]}}],"position":{"start":{"line":80,"column":1,"offset":2995},"end":{"line":80,"column":18,"offset":3012},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"在上一次render中fiber用于创建输出的props","position":{"start":{"line":82,"column":1,"offset":3014},"end":{"line":82,"column":29,"offset":3042},"indent":[]}}],"position":{"start":{"line":82,"column":1,"offset":3014},"end":{"line":82,"column":29,"offset":3042},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"pendingProps","position":{"start":{"line":84,"column":5,"offset":3048},"end":{"line":84,"column":17,"offset":3060},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":3044},"end":{"line":84,"column":17,"offset":3060},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"已经从react新元素中更新的props并且需要应用于子组件或DOM元素","position":{"start":{"line":86,"column":1,"offset":3062},"end":{"line":86,"column":37,"offset":3098},"indent":[]}}],"position":{"start":{"line":86,"column":1,"offset":3062},"end":{"line":86,"column":37,"offset":3098},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"你可以在","position":{"start":{"line":88,"column":1,"offset":3100},"end":{"line":88,"column":5,"offset":3104},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/facebook/react/blob/6e4f7c788603dac7fccd227a4852c110b072fe16/packages/react-reconciler/src/ReactFiber.js#L78","children":[{"type":"text","value":"这里","position":{"start":{"line":88,"column":6,"offset":3105},"end":{"line":88,"column":8,"offset":3107},"indent":[]}}],"position":{"start":{"line":88,"column":5,"offset":3104},"end":{"line":88,"column":138,"offset":3237},"indent":[]}},{"type":"text","value":"找到完整的fiber结构","position":{"start":{"line":88,"column":138,"offset":3237},"end":{"line":88,"column":150,"offset":3249},"indent":[]}}],"position":{"start":{"line":88,"column":1,"offset":3100},"end":{"line":88,"column":150,"offset":3249},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"主要流程","position":{"start":{"line":90,"column":4,"offset":3254},"end":{"line":90,"column":8,"offset":3258},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":3251},"end":{"line":90,"column":8,"offset":3258},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"render阶段","position":{"start":{"line":92,"column":5,"offset":3264},"end":{"line":92,"column":13,"offset":3272},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":3260},"end":{"line":92,"column":13,"offset":3272},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"reconcile通常从","position":{"start":{"line":94,"column":1,"offset":3274},"end":{"line":94,"column":13,"offset":3286},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">HostRoot</code>","position":{"start":{"line":94,"column":13,"offset":3286},"end":{"line":94,"column":23,"offset":3296},"indent":[]}},{"type":"text","value":"fiber结点，并通过","position":{"start":{"line":94,"column":23,"offset":3296},"end":{"line":94,"column":34,"offset":3307},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L1132","children":[{"type":"text","value":"renderRoot","position":{"start":{"line":94,"column":35,"offset":3308},"end":{"line":94,"column":45,"offset":3318},"indent":[]}}],"position":{"start":{"line":94,"column":34,"offset":3307},"end":{"line":94,"column":186,"offset":3459},"indent":[]}},{"type":"text","value":"方法开始。但是，React会快速跳过已经处理过的fiber节点知道他找到一个未完成工作的结点。 ","position":{"start":{"line":94,"column":186,"offset":3459},"end":{"line":94,"column":234,"offset":3507},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":3274},"end":{"line":94,"column":234,"offset":3507},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"work loop的主要步骤","position":{"start":{"line":96,"column":6,"offset":3514},"end":{"line":96,"column":20,"offset":3528},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":3509},"end":{"line":96,"column":20,"offset":3528},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"​\t所有fiber节点 ","position":{"start":{"line":98,"column":1,"offset":3530},"end":{"line":98,"column":13,"offset":3542},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/facebook/react/blob/f765f022534958bcf49120bf23bc1aa665e8f651/packages/react-reconciler/src/ReactFiberScheduler.js#L1136","children":[{"type":"text","value":"在work loop中","position":{"start":{"line":98,"column":14,"offset":3543},"end":{"line":98,"column":25,"offset":3554},"indent":[]}}],"position":{"start":{"line":98,"column":13,"offset":3542},"end":{"line":98,"column":166,"offset":3695},"indent":[]}},{"type":"text","value":"被处理，这里是同步部分的work loop实现：","position":{"start":{"line":98,"column":166,"offset":3695},"end":{"line":98,"column":190,"offset":3719},"indent":[]}}],"position":{"start":{"line":98,"column":1,"offset":3530},"end":{"line":98,"column":190,"offset":3719},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">workLoop</span><span class=\"token punctuation\">(</span>isYieldy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isYieldy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nextUnitOfWork <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      nextUnitOfWork <span class=\"token operator\">=</span> <span class=\"token function\">performUnitOfWork</span><span class=\"token punctuation\">(</span>nextUnitOfWork<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":100,"column":1,"offset":3721},"end":{"line":108,"column":4,"offset":3906},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">nextUnitOfWork</code>","position":{"start":{"line":110,"column":1,"offset":3908},"end":{"line":110,"column":17,"offset":3924},"indent":[]}},{"type":"text","value":"会保留对","position":{"start":{"line":110,"column":17,"offset":3924},"end":{"line":110,"column":21,"offset":3928},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">workInProgress</code>","position":{"start":{"line":110,"column":21,"offset":3928},"end":{"line":110,"column":37,"offset":3944},"indent":[]}},{"type":"text","value":"tree中需要处理的fiber节点的引用。当React遍历fiber tree时，会用这个变量去知晓这里是否有其他未完成工作的fiber结点。","position":{"start":{"line":110,"column":37,"offset":3944},"end":{"line":110,"column":108,"offset":4015},"indent":[]}}],"position":{"start":{"line":110,"column":1,"offset":3908},"end":{"line":110,"column":108,"offset":4015},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"这里会有四个主要函数用于遍历tree和发起或完成工作：","position":{"start":{"line":112,"column":1,"offset":4017},"end":{"line":112,"column":28,"offset":4044},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":4017},"end":{"line":112,"column":28,"offset":4044},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":false,"children":[{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L1056","children":[{"type":"text","value":"performUnitOfWork","position":{"start":{"line":114,"column":4,"offset":4049},"end":{"line":114,"column":21,"offset":4066},"indent":[]}}],"position":{"start":{"line":114,"column":3,"offset":4048},"end":{"line":114,"column":162,"offset":4207},"indent":[]}}],"position":{"start":{"line":114,"column":3,"offset":4048},"end":{"line":114,"column":162,"offset":4207},"indent":[]}}],"position":{"start":{"line":114,"column":1,"offset":4046},"end":{"line":114,"column":162,"offset":4207},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/facebook/react/blob/cbbc2b6c4d0d8519145560bd8183ecde55168b12/packages/react-reconciler/src/ReactFiberBeginWork.js#L1489","children":[{"type":"text","value":"beginWork","position":{"start":{"line":115,"column":4,"offset":4211},"end":{"line":115,"column":13,"offset":4220},"indent":[]}}],"position":{"start":{"line":115,"column":3,"offset":4210},"end":{"line":115,"column":154,"offset":4361},"indent":[]}}],"position":{"start":{"line":115,"column":3,"offset":4210},"end":{"line":115,"column":154,"offset":4361},"indent":[]}}],"position":{"start":{"line":115,"column":1,"offset":4208},"end":{"line":115,"column":154,"offset":4361},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L879","children":[{"type":"text","value":"completeUnitOfWork","position":{"start":{"line":116,"column":4,"offset":4365},"end":{"line":116,"column":22,"offset":4383},"indent":[]}}],"position":{"start":{"line":116,"column":3,"offset":4364},"end":{"line":116,"column":162,"offset":4523},"indent":[]}}],"position":{"start":{"line":116,"column":3,"offset":4364},"end":{"line":116,"column":162,"offset":4523},"indent":[]}}],"position":{"start":{"line":116,"column":1,"offset":4362},"end":{"line":116,"column":162,"offset":4523},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/facebook/react/blob/cbbc2b6c4d0d8519145560bd8183ecde55168b12/packages/react-reconciler/src/ReactFiberCompleteWork.js#L532","children":[{"type":"text","value":"completeWork","position":{"start":{"line":117,"column":4,"offset":4527},"end":{"line":117,"column":16,"offset":4539},"indent":[]}}],"position":{"start":{"line":117,"column":3,"offset":4526},"end":{"line":117,"column":159,"offset":4682},"indent":[]}}],"position":{"start":{"line":117,"column":3,"offset":4526},"end":{"line":117,"column":159,"offset":4682},"indent":[]}}],"position":{"start":{"line":117,"column":1,"offset":4524},"end":{"line":117,"column":159,"offset":4682},"indent":[]}}],"position":{"start":{"line":114,"column":1,"offset":4046},"end":{"line":117,"column":159,"offset":4682},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"http://pjpqjxkf6.bkt.clouddn.com/1%2AA3-yF-3Xf47nPamFpRm64w.gif","alt":"img","position":{"start":{"line":119,"column":1,"offset":4684},"end":{"line":119,"column":72,"offset":4755},"indent":[]}}],"position":{"start":{"line":119,"column":1,"offset":4684},"end":{"line":119,"column":72,"offset":4755},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://vimeo.com/302222454","children":[{"type":"text","value":"这里是视频","position":{"start":{"line":121,"column":2,"offset":4758},"end":{"line":121,"column":7,"offset":4763},"indent":[]}}],"position":{"start":{"line":121,"column":1,"offset":4757},"end":{"line":121,"column":37,"offset":4793},"indent":[]}}],"position":{"start":{"line":121,"column":1,"offset":4757},"end":{"line":121,"column":37,"offset":4793},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">performUnitOfWork</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> next <span class=\"token operator\">=</span> <span class=\"token function\">beginWork</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        next <span class=\"token operator\">=</span> <span class=\"token function\">completeUnitOfWork</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">beginWork</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'work performed for '</span> <span class=\"token operator\">+</span> workInProgress<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> workInProgress<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":123,"column":1,"offset":4795},"end":{"line":135,"column":4,"offset":5133},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"​\tperformUnitOfWork从workInProgress tree中接收一个fiber节点然后开始调用beginWork工作。beginWork是开始所有需要执行行动的函数，为了示范，我们简单输出fiber的名字去记录工作已经完成。beginWork总是会返回下一个处理循环的孩子或者null，","position":{"start":{"line":137,"column":1,"offset":5135},"end":{"line":137,"column":154,"offset":5288},"indent":[]}}],"position":{"start":{"line":137,"column":1,"offset":5135},"end":{"line":137,"column":154,"offset":5288},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"​\t如果有下一个孩子，他会赋予workLoop中的nextUnitOfWork。如果没有孩子，React知道已经到达分支的结尾所以他可以完成当前节点。一旦节点完成，它需要为兄弟姐妹执行工作并向父母回溯，这部分会在completeUnitOfWork中完成。","position":{"start":{"line":139,"column":1,"offset":5290},"end":{"line":139,"column":129,"offset":5418},"indent":[]}}],"position":{"start":{"line":139,"column":1,"offset":5290},"end":{"line":139,"column":129,"offset":5418},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">completeUnitOfWork</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> returnFiber <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> siblingFiber <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>sibling<span class=\"token punctuation\">;</span>\n\n        nextUnitOfWork <span class=\"token operator\">=</span> <span class=\"token function\">completeWork</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>siblingFiber <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// If there is a sibling, return it</span>\n            <span class=\"token comment\">// to perform work for this sibling</span>\n            <span class=\"token keyword\">return</span> siblingFiber<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>returnFiber <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// If there's no more work in this returnFiber,</span>\n            <span class=\"token comment\">// continue the loop to complete the parent.</span>\n            workInProgress <span class=\"token operator\">=</span> returnFiber<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// We've reached the root.</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">completeWork</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'work completed for '</span> <span class=\"token operator\">+</span> workInProgress<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":141,"column":1,"offset":5420},"end":{"line":169,"column":4,"offset":6270},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"​\t在completeUnitOfWork中，React只完成上一个兄弟节点的工作，他没有完成父亲节点的工作。只有在完成以子节点开始的所有分支后，才能完成父节点和回溯的工作。","position":{"start":{"line":171,"column":1,"offset":6272},"end":{"line":171,"column":88,"offset":6359},"indent":[]}}],"position":{"start":{"line":171,"column":1,"offset":6272},"end":{"line":171,"column":88,"offset":6359},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"​\t从实现中可以看出，performUnitOfWork和completeUnitOfWork主要用于迭代目的，而主要活动则在beginWork和completeWork函数中进行。 在本系列的以下文章中，我们将了解ClickCounter组件和span节点会发生什么，因为React步入beginWork和completeWork函数。","position":{"start":{"line":173,"column":1,"offset":6361},"end":{"line":173,"column":170,"offset":6530},"indent":[]}}],"position":{"start":{"line":173,"column":1,"offset":6361},"end":{"line":173,"column":170,"offset":6530},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"commit 阶段","position":{"start":{"line":175,"column":5,"offset":6536},"end":{"line":175,"column":14,"offset":6545},"indent":[]}}],"position":{"start":{"line":175,"column":1,"offset":6532},"end":{"line":175,"column":14,"offset":6545},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"​\t这个阶段从","position":{"start":{"line":177,"column":1,"offset":6547},"end":{"line":177,"column":8,"offset":6554},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L2306","children":[{"type":"text","value":"completeRoot","position":{"start":{"line":177,"column":9,"offset":6555},"end":{"line":177,"column":21,"offset":6567},"indent":[]}}],"position":{"start":{"line":177,"column":8,"offset":6554},"end":{"line":177,"column":162,"offset":6708},"indent":[]}},{"type":"text","value":"开始， 他是react更新DOM和调用前后生命周期的方法。当react进入commit阶段时，会有两颗树和effects list。第一颗树(current)代表当前的渲染状态。在","position":{"start":{"line":177,"column":162,"offset":6708},"end":{"line":177,"column":252,"offset":6798},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">render</code>","position":{"start":{"line":177,"column":252,"offset":6798},"end":{"line":177,"column":260,"offset":6806},"indent":[]}},{"type":"text","value":"阶段会有一颗alternate tree被称作","position":{"start":{"line":177,"column":260,"offset":6806},"end":{"line":177,"column":283,"offset":6829},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">finishedWork</code>","position":{"start":{"line":177,"column":283,"offset":6829},"end":{"line":177,"column":297,"offset":6843},"indent":[]}},{"type":"text","value":"或","position":{"start":{"line":177,"column":297,"offset":6843},"end":{"line":177,"column":298,"offset":6844},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">workInProgress</code>","position":{"start":{"line":177,"column":298,"offset":6844},"end":{"line":177,"column":314,"offset":6860},"indent":[]}},{"type":"text","value":"表示即将渲染到屏幕上的状态。这个alternate tree通过child和sibling指针相连，与current tree相似。","position":{"start":{"line":177,"column":314,"offset":6860},"end":{"line":177,"column":380,"offset":6926},"indent":[]}}],"position":{"start":{"line":177,"column":1,"offset":6547},"end":{"line":177,"column":380,"offset":6926},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"​\t然后，还有一个effects list—来自","position":{"start":{"line":179,"column":1,"offset":6928},"end":{"line":179,"column":26,"offset":6953},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">finishedWork</code>","position":{"start":{"line":179,"column":26,"offset":6953},"end":{"line":179,"column":40,"offset":6967},"indent":[]}},{"type":"text","value":"树的节点子集并通过nextEffect指针链接。要记住effect list是执行render函数的结果。渲染的重点是确定需要插入、更新或删除那些节点，以及哪些组件需要调用其生命周期方法。这就是effect list作用。他正是commit阶段迭代的节点集。","position":{"start":{"line":179,"column":40,"offset":6967},"end":{"line":179,"column":169,"offset":7096},"indent":[]}}],"position":{"start":{"line":179,"column":1,"offset":6928},"end":{"line":179,"column":169,"offset":7096},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"为了debug，current tree可以通过fiber root的current字段获取。finishedWork tree可以通过current tree中的","position":{"start":{"line":181,"column":3,"offset":7100},"end":{"line":181,"column":85,"offset":7182},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">HostFiber</code>","position":{"start":{"line":181,"column":85,"offset":7182},"end":{"line":181,"column":96,"offset":7193},"indent":[]}},{"type":"text","value":"节点的alternate字段获取","position":{"start":{"line":181,"column":96,"offset":7193},"end":{"line":181,"column":112,"offset":7209},"indent":[]}}],"position":{"start":{"line":181,"column":3,"offset":7100},"end":{"line":181,"column":112,"offset":7209},"indent":[]}}],"position":{"start":{"line":181,"column":1,"offset":7098},"end":{"line":181,"column":112,"offset":7209},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"​\t在commit阶段执行的主要函数是","position":{"start":{"line":183,"column":1,"offset":7211},"end":{"line":183,"column":20,"offset":7230},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L523","children":[{"type":"text","value":"commitRoot","position":{"start":{"line":183,"column":21,"offset":7231},"end":{"line":183,"column":31,"offset":7241},"indent":[]}}],"position":{"start":{"line":183,"column":20,"offset":7230},"end":{"line":183,"column":171,"offset":7381},"indent":[]}},{"type":"text","value":"，他的主要流程如下：","position":{"start":{"line":183,"column":171,"offset":7381},"end":{"line":183,"column":181,"offset":7391},"indent":[]}}],"position":{"start":{"line":183,"column":1,"offset":7211},"end":{"line":183,"column":181,"offset":7391},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":false,"children":[{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"对有","position":{"start":{"line":185,"column":3,"offset":7395},"end":{"line":185,"column":5,"offset":7397},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">Snapshot</code>","position":{"start":{"line":185,"column":5,"offset":7397},"end":{"line":185,"column":15,"offset":7407},"indent":[]}},{"type":"text","value":"effect的节点调用","position":{"start":{"line":185,"column":15,"offset":7407},"end":{"line":185,"column":26,"offset":7418},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">getSnapshotBeforeUpdate</code>","position":{"start":{"line":185,"column":26,"offset":7418},"end":{"line":185,"column":51,"offset":7443},"indent":[]}}],"position":{"start":{"line":185,"column":3,"offset":7395},"end":{"line":185,"column":51,"offset":7443},"indent":[]}}],"position":{"start":{"line":185,"column":1,"offset":7393},"end":{"line":185,"column":51,"offset":7443},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"对有","position":{"start":{"line":186,"column":3,"offset":7446},"end":{"line":186,"column":5,"offset":7448},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">Deletion</code>","position":{"start":{"line":186,"column":5,"offset":7448},"end":{"line":186,"column":15,"offset":7458},"indent":[]}},{"type":"text","value":"effect的节点调用","position":{"start":{"line":186,"column":15,"offset":7458},"end":{"line":186,"column":26,"offset":7469},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">cWU</code>","position":{"start":{"line":186,"column":26,"offset":7469},"end":{"line":186,"column":31,"offset":7474},"indent":[]}}],"position":{"start":{"line":186,"column":3,"offset":7446},"end":{"line":186,"column":31,"offset":7474},"indent":[]}}],"position":{"start":{"line":186,"column":1,"offset":7444},"end":{"line":186,"column":31,"offset":7474},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"执行所有的DOM插入更新和删除","position":{"start":{"line":187,"column":3,"offset":7477},"end":{"line":187,"column":18,"offset":7492},"indent":[]}}],"position":{"start":{"line":187,"column":3,"offset":7477},"end":{"line":187,"column":18,"offset":7492},"indent":[]}}],"position":{"start":{"line":187,"column":1,"offset":7475},"end":{"line":187,"column":18,"offset":7492},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"把finished tree转为current tree","position":{"start":{"line":188,"column":3,"offset":7495},"end":{"line":188,"column":31,"offset":7523},"indent":[]}}],"position":{"start":{"line":188,"column":3,"offset":7495},"end":{"line":188,"column":31,"offset":7523},"indent":[]}}],"position":{"start":{"line":188,"column":1,"offset":7493},"end":{"line":188,"column":31,"offset":7523},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"对有","position":{"start":{"line":189,"column":3,"offset":7526},"end":{"line":189,"column":5,"offset":7528},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">Placement</code>","position":{"start":{"line":189,"column":5,"offset":7528},"end":{"line":189,"column":16,"offset":7539},"indent":[]}},{"type":"text","value":"effect的节点调用","position":{"start":{"line":189,"column":16,"offset":7539},"end":{"line":189,"column":27,"offset":7550},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">cDM</code>","position":{"start":{"line":189,"column":27,"offset":7550},"end":{"line":189,"column":32,"offset":7555},"indent":[]}}],"position":{"start":{"line":189,"column":3,"offset":7526},"end":{"line":189,"column":32,"offset":7555},"indent":[]}}],"position":{"start":{"line":189,"column":1,"offset":7524},"end":{"line":189,"column":32,"offset":7555},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"对有","position":{"start":{"line":190,"column":3,"offset":7558},"end":{"line":190,"column":5,"offset":7560},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">Update</code>","position":{"start":{"line":190,"column":5,"offset":7560},"end":{"line":190,"column":13,"offset":7568},"indent":[]}},{"type":"text","value":"effect的节点调用","position":{"start":{"line":190,"column":13,"offset":7568},"end":{"line":190,"column":24,"offset":7579},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">cDU</code>","position":{"start":{"line":190,"column":24,"offset":7579},"end":{"line":190,"column":29,"offset":7584},"indent":[]}}],"position":{"start":{"line":190,"column":3,"offset":7558},"end":{"line":190,"column":29,"offset":7584},"indent":[]}}],"position":{"start":{"line":190,"column":1,"offset":7556},"end":{"line":190,"column":29,"offset":7584},"indent":[]}}],"position":{"start":{"line":185,"column":1,"offset":7393},"end":{"line":190,"column":29,"offset":7584},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"在调用变动前的","position":{"start":{"line":192,"column":1,"offset":7586},"end":{"line":192,"column":8,"offset":7593},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">getSnapshotBeforeUpdate</code>","position":{"start":{"line":192,"column":8,"offset":7593},"end":{"line":192,"column":33,"offset":7618},"indent":[]}},{"type":"text","value":"方法之后，react会在一棵树中提交所有side-effects。会分成两个阶段，一是执行所有DOM(host)插入，更新，删除和refx","position":{"start":{"line":192,"column":33,"offset":7618},"end":{"line":192,"column":102,"offset":7687},"indent":[]}}],"position":{"start":{"line":192,"column":1,"offset":7586},"end":{"line":192,"column":102,"offset":7687},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":192,"column":102,"offset":7687}}}}