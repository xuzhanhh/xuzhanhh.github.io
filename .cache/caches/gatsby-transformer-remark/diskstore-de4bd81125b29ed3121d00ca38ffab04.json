{"expireTime":9007200800201646000,"key":"transformer-remark-markdown-html-4f944041d7e174b7d21aa7ea7e0c103b-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<p><a href=\"https://medium.com/react-in-depth/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react-e1c04700ef6e\">read this</a></p>\n<h2>createFiberFromTypeAndProps</h2>\n<p>​\t当一个React元素第一次被转换成fiber node时，React使用createFiberFromTypeAndProps。在随后的更新中React会重用fiber node且只更新从当前React元素获取必须的属性。React还会根据key属性在目录中移动结点位置或删除它如果react元素的render方法没有返回值。</p>\n<blockquote>\n<p>查看<a href=\"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactChildFiber.js#L239\"><strong>ChildReconciler</strong></a>方法得到所有行动和React针对当前的fiber结点类型执行的相应的方法</p>\n</blockquote>\n<h2>current和workInProgress tree</h2>\n<p>​\t第一次render结束后，React会生成一个fiber tree映射应用的状态和UI，这个tree一般叫<code class=\"language-text\">current</code>。当React准备开始更新时会构建一个<code class=\"language-text\">workInProgress</code>tree，反映将被渲染到屏幕的将来的状态。</p>\n<p>​\t所有的fibers上的工作都会在workInProgress tree上执行。当React遍历current tree时，每一个存在的结点都会创建一个alternate node来构成workInProgress tree。当更新完成且所有的相关工作完成时，React准备将alternate tree渲染到屏幕上。一旦workInProgress tree被渲染到屏幕上，他就会变成current tree。</p>\n<p>​\t在代码中你会见到很多函数需要current和workInProgress tree：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateHostComponent</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> workInProgress<span class=\"token punctuation\">,</span> renderExpirationTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>​\t每一个fiber结点的alternate属性会是它在另外一颗树上的副本的引用。一个current tree上的结点会指向workInprogress tree上的结点，反之亦然。</p>\n<h2>Side-effects &#x26;&#x26; Effects list</h2>\n<p>​\t每一个fiber结点可以有与之相关的作用，这些被放在effectTag字段中。所以fiber的effects基本定义了实例在更新完后需要处理的<a href=\"https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/shared/ReactSideEffectTags.js\">工作</a>。例如host组件（DOM 元素）会有adding, updating or removing elements。类组件会有更新refs，调用cDM和cDU生命周期。</p>\n<p>​\tReact会构建一个有effects的fiber结点的线性列表去快速遍历。遍历线性列表比遍历树快很多，且没必要花费时间在没有副作用的结点上。这个列表是<code class=\"language-text\">finishedWork</code>tree的子集且它在current和workInProgress tree中使用nextEffect属性链接而不是child属性。</p>\n<p>​\t例如，我们的更新会导致<code class=\"language-text\">c2</code>插入到DOM中，<code class=\"language-text\">d2</code>和<code class=\"language-text\">c1</code>改变DOM属性，<code class=\"language-text\">b2</code>触发生命周期。effect list会连接他们所以React可以跳过其他结点。</p>\n<p><img src=\"http://pjpqjxkf6.bkt.clouddn.com/1%2AQ0pCNcK1FfCttek32X_l7A.png\" alt=\"img\"></p>\n<p><img src=\"http://pjpqjxkf6.bkt.clouddn.com/1%2AmbeZ1EsfMsLUk-9hOYyozw.png\" alt=\"img\"></p>\n<p>可以看得到，React会从children再到parents执行effects。</p>\n<h2>Fiber tree的根节点</h2>\n<p>React对每一个这些container创建<a href=\"https://github.com/facebook/react/blob/0dc0ddc1ef5f90fe48b58f1a1ba753757961fc74/packages/react-reconciler/src/ReactFiberRoot.js#L31\">fiber root</a>，你可以这样找到他们</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fiberRoot <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>_reactRootContainer<span class=\"token punctuation\">.</span>_internalRoot</code></pre></div>\n<p> fiber root的current属性中是React存放fiber tree的地方。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> hostRootFiberNode <span class=\"token operator\">=</span> fiberRoot<span class=\"token punctuation\">.</span>current</code></pre></div>\n<p>fiber tree会用<a href=\"https://github.com/facebook/react/blob/cbbc2b6c4d0d8519145560bd8183ecde55168b12/packages/shared/ReactWorkTags.js#L34\">一种特别的类型的fiber结点</a>开始：<code class=\"language-text\">HostRoot</code>，通过<code class=\"language-text\">stateNode</code>可以从<code class=\"language-text\">HostRoot</code>fiber结点返回FiberRoot</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">fiberRoot<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>stateNode <span class=\"token operator\">===</span> fiberRoot<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<h2>Fiber node structure</h2>\n<h3>stateNode</h3>\n<p>保持fiber对本地状态的联系， 保存对组件的类实例，DOM节点或与fiber节点关联的其他React元素类型的引用。</p>\n<h3>type</h3>\n<p>定义与此fiber节点关联的功能或类，对于class组件，它指向constructor函数，对于DOM元素，它是HTML tag。</p>\n<h3>tag</h3>\n<p>定义<a href=\"https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/shared/ReactWorkTags.js\">fiber节点的类型</a>。被用于决定需要在reconciliation中做什么工作。</p>\n<h3>updateQueue</h3>\n<p>状态更新，回调和DOM更新的队列。</p>\n<h3>memoizedState</h3>\n<p>fiber用于创建输出的state。处理更新时，它会反映当前在屏幕上呈现的状态。</p>\n<h3>memoizedProps</h3>\n<p>在上一次render中fiber用于创建输出的props</p>\n<h3>pendingProps</h3>\n<p>已经从react新元素中更新的props并且需要应用于子组件或DOM元素</p>\n<p>你可以在<a href=\"https://github.com/facebook/react/blob/6e4f7c788603dac7fccd227a4852c110b072fe16/packages/react-reconciler/src/ReactFiber.js#L78\">这里</a>找到完整的fiber结构</p>\n<h2>主要流程</h2>\n<h3>render阶段</h3>\n<p>reconcile通常从<code class=\"language-text\">HostRoot</code>fiber结点，并通过<a href=\"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L1132\">renderRoot</a>方法开始。但是，React会快速跳过已经处理过的fiber节点知道他找到一个未完成工作的结点。 </p>\n<h4>work loop的主要步骤</h4>\n<p>​\t所有fiber节点 <a href=\"https://github.com/facebook/react/blob/f765f022534958bcf49120bf23bc1aa665e8f651/packages/react-reconciler/src/ReactFiberScheduler.js#L1136\">在work loop中</a>被处理，这里是同步部分的work loop实现：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">workLoop</span><span class=\"token punctuation\">(</span>isYieldy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isYieldy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nextUnitOfWork <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      nextUnitOfWork <span class=\"token operator\">=</span> <span class=\"token function\">performUnitOfWork</span><span class=\"token punctuation\">(</span>nextUnitOfWork<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">nextUnitOfWork</code>会保留对<code class=\"language-text\">workInProgress</code>tree中需要处理的fiber节点的引用。当React遍历fiber tree时，会用这个变量去知晓这里是否有其他未完成工作的fiber结点。</p>\n<p>这里会有四个主要函数用于遍历tree和发起或完成工作：</p>\n<ul>\n<li><a href=\"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L1056\">performUnitOfWork</a></li>\n<li><a href=\"https://github.com/facebook/react/blob/cbbc2b6c4d0d8519145560bd8183ecde55168b12/packages/react-reconciler/src/ReactFiberBeginWork.js#L1489\">beginWork</a></li>\n<li><a href=\"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L879\">completeUnitOfWork</a></li>\n<li><a href=\"https://github.com/facebook/react/blob/cbbc2b6c4d0d8519145560bd8183ecde55168b12/packages/react-reconciler/src/ReactFiberCompleteWork.js#L532\">completeWork</a></li>\n</ul>\n<p><img src=\"http://pjpqjxkf6.bkt.clouddn.com/1%2AA3-yF-3Xf47nPamFpRm64w.gif\" alt=\"img\"></p>\n<p><a href=\"https://vimeo.com/302222454\">这里是视频</a></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">performUnitOfWork</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> next <span class=\"token operator\">=</span> <span class=\"token function\">beginWork</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        next <span class=\"token operator\">=</span> <span class=\"token function\">completeUnitOfWork</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">beginWork</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'work performed for '</span> <span class=\"token operator\">+</span> workInProgress<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> workInProgress<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">;</span></code></pre></div>\n<p>​\tperformUnitOfWork从workInProgress tree中接收一个fiber节点然后开始调用beginWork工作。beginWork是开始所有需要执行行动的函数，为了示范，我们简单输出fiber的名字去记录工作已经完成。beginWork总是会返回下一个处理循环的孩子或者null，</p>\n<p>​\t如果有下一个孩子，他会赋予workLoop中的nextUnitOfWork。如果没有孩子，React知道已经到达分支的结尾所以他可以完成当前节点。一旦节点完成，它需要为兄弟姐妹执行工作并向父母回溯，这部分会在completeUnitOfWork中完成。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">completeUnitOfWork</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> returnFiber <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> siblingFiber <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>sibling<span class=\"token punctuation\">;</span>\n\n        nextUnitOfWork <span class=\"token operator\">=</span> <span class=\"token function\">completeWork</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>siblingFiber <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// If there is a sibling, return it</span>\n            <span class=\"token comment\">// to perform work for this sibling</span>\n            <span class=\"token keyword\">return</span> siblingFiber<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>returnFiber <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// If there's no more work in this returnFiber,</span>\n            <span class=\"token comment\">// continue the loop to complete the parent.</span>\n            workInProgress <span class=\"token operator\">=</span> returnFiber<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// We've reached the root.</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">completeWork</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'work completed for '</span> <span class=\"token operator\">+</span> workInProgress<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>​\t在completeUnitOfWork中，React只完成上一个兄弟节点的工作，他没有完成父亲节点的工作。只有在完成以子节点开始的所有分支后，才能完成父节点和回溯的工作。</p>\n<p>​\t从实现中可以看出，performUnitOfWork和completeUnitOfWork主要用于迭代目的，而主要活动则在beginWork和completeWork函数中进行。 在本系列的以下文章中，我们将了解ClickCounter组件和span节点会发生什么，因为React步入beginWork和completeWork函数。</p>\n<h3>commit 阶段</h3>\n<p>​\t这个阶段从<a href=\"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L2306\">completeRoot</a>开始， 他是react更新DOM和调用前后生命周期的方法。当react进入commit阶段时，会有两颗树和effects list。第一颗树(current)代表当前的渲染状态。在<code class=\"language-text\">render</code>阶段会有一颗alternate tree被称作<code class=\"language-text\">finishedWork</code>或<code class=\"language-text\">workInProgress</code>表示即将渲染到屏幕上的状态。这个alternate tree通过child和sibling指针相连，与current tree相似。</p>\n<p>​\t然后，还有一个effects list—来自<code class=\"language-text\">finishedWork</code>树的节点子集并通过nextEffect指针链接。要记住effect list是执行render函数的结果。渲染的重点是确定需要插入、更新或删除那些节点，以及哪些组件需要调用其生命周期方法。这就是effect list作用。他正是commit阶段迭代的节点集。</p>\n<blockquote>\n<p>为了debug，current tree可以通过fiber root的current字段获取。finishedWork tree可以通过current tree中的<code class=\"language-text\">HostFiber</code>节点的alternate字段获取</p>\n</blockquote>\n<p>​\t在commit阶段执行的主要函数是<a href=\"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L523\">commitRoot</a>，他的主要流程如下：</p>\n<ul>\n<li>对有<code class=\"language-text\">Snapshot</code>effect的节点调用<code class=\"language-text\">getSnapshotBeforeUpdate</code></li>\n<li>对有<code class=\"language-text\">Deletion</code>effect的节点调用<code class=\"language-text\">cWU</code></li>\n<li>执行所有的DOM插入更新和删除</li>\n<li>把finished tree转为current tree</li>\n<li>对有<code class=\"language-text\">Placement</code>effect的节点调用<code class=\"language-text\">cDM</code></li>\n<li>对有<code class=\"language-text\">Update</code>effect的节点调用<code class=\"language-text\">cDU</code></li>\n</ul>\n<p>在调用变动前的<code class=\"language-text\">getSnapshotBeforeUpdate</code>方法之后，</p>"}