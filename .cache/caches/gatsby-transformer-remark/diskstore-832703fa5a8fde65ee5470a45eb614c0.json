{"expireTime":9007200799509181000,"key":"transformer-remark-markdown-ast-3356d591f0569f671cf97cbcc13325f9-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"-","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":3,"offset":2},"indent":[]}},{"type":"text","value":"—","position":{"start":{"line":1,"column":3,"offset":2},"end":{"line":1,"column":5,"offset":4},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":5,"offset":4},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"title: Inside Fiber","position":{"start":{"line":3,"column":1,"offset":6},"end":{"line":3,"column":20,"offset":25},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":6},"end":{"line":3,"column":20,"offset":25},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"date: ‘2018-12-13’","position":{"start":{"line":5,"column":1,"offset":27},"end":{"line":5,"column":19,"offset":45},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":27},"end":{"line":5,"column":19,"offset":45},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"spoiler: 当我们在讨论Fiber时，我们在讨论什么。","position":{"start":{"line":7,"column":1,"offset":47},"end":{"line":7,"column":31,"offset":77},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":47},"end":{"line":7,"column":31,"offset":77},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"-","position":{"start":{"line":9,"column":1,"offset":79},"end":{"line":9,"column":3,"offset":81},"indent":[]}},{"type":"text","value":"—","position":{"start":{"line":9,"column":3,"offset":81},"end":{"line":9,"column":5,"offset":83},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":79},"end":{"line":9,"column":5,"offset":83},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://medium.com/react-in-depth/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react-e1c04700ef6e","children":[{"type":"text","value":"read this","position":{"start":{"line":11,"column":2,"offset":86},"end":{"line":11,"column":11,"offset":95},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":85},"end":{"line":11,"column":136,"offset":220},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":85},"end":{"line":11,"column":136,"offset":220},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"createFiberFromTypeAndProps","position":{"start":{"line":13,"column":4,"offset":225},"end":{"line":13,"column":31,"offset":252},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":222},"end":{"line":13,"column":31,"offset":252},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"​\t当一个React元素第一次被转换成fiber node时，React使用createFiberFromTypeAndProps。在随后的更新中React会重用fiber node且只更新从当前React元素获取必须的属性。React还会根据key属性在目录中移动结点位置或删除它如果react元素的render方法没有返回值。","position":{"start":{"line":15,"column":1,"offset":254},"end":{"line":15,"column":166,"offset":419},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":254},"end":{"line":15,"column":166,"offset":419},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"查看","position":{"start":{"line":17,"column":2,"offset":422},"end":{"line":17,"column":4,"offset":424},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactChildFiber.js#L239","children":[{"type":"strong","children":[{"type":"text","value":"ChildReconciler","position":{"start":{"line":17,"column":7,"offset":427},"end":{"line":17,"column":22,"offset":442},"indent":[]}}],"position":{"start":{"line":17,"column":5,"offset":425},"end":{"line":17,"column":24,"offset":444},"indent":[]}}],"position":{"start":{"line":17,"column":4,"offset":424},"end":{"line":17,"column":160,"offset":580},"indent":[]}},{"type":"text","value":"方法得到所有行动和React针对当前的fiber结点类型执行的相应的方法","position":{"start":{"line":17,"column":160,"offset":580},"end":{"line":17,"column":196,"offset":616},"indent":[]}}],"position":{"start":{"line":17,"column":2,"offset":422},"end":{"line":17,"column":196,"offset":616},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":421},"end":{"line":17,"column":196,"offset":616},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"current和workInProgress tree","position":{"start":{"line":19,"column":4,"offset":621},"end":{"line":19,"column":31,"offset":648},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":618},"end":{"line":19,"column":31,"offset":648},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"​\t第一次render结束后，React会生成一个fiber tree映射应用的状态和UI，这个tree一般叫","position":{"start":{"line":21,"column":1,"offset":650},"end":{"line":21,"column":56,"offset":705},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">current</code>","position":{"start":{"line":21,"column":56,"offset":705},"end":{"line":21,"column":65,"offset":714},"indent":[]}},{"type":"text","value":"。当React准备开始更新时会构建一个","position":{"start":{"line":21,"column":65,"offset":714},"end":{"line":21,"column":84,"offset":733},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">workInProgress</code>","position":{"start":{"line":21,"column":84,"offset":733},"end":{"line":21,"column":101,"offset":750},"indent":[]}},{"type":"text","value":"tree，反映将被渲染到屏幕的将来的状态。","position":{"start":{"line":21,"column":101,"offset":750},"end":{"line":21,"column":122,"offset":771},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":650},"end":{"line":21,"column":122,"offset":771},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"​\t所有的fibers上的工作都会在workInProgress tree上执行。当React遍历current tree时，每一个存在的结点都会创建一个alternate node来构成workInProgress tree。当更新完成且所有的相关工作完成时，React准备将alternate tree渲染到屏幕上。一旦workInProgress tree被渲染到屏幕上，他就会变成current tree。","position":{"start":{"line":23,"column":1,"offset":773},"end":{"line":23,"column":208,"offset":980},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":773},"end":{"line":23,"column":208,"offset":980},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"​\t在代码中你会见到很多函数需要current和workInProgress tree：","position":{"start":{"line":25,"column":1,"offset":982},"end":{"line":25,"column":45,"offset":1026},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":982},"end":{"line":25,"column":45,"offset":1026},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateHostComponent</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> workInProgress<span class=\"token punctuation\">,</span> renderExpirationTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":27,"column":1,"offset":1028},"end":{"line":29,"column":4,"offset":1127},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"​\t每一个fiber结点的alternate属性会是它在另外一颗树上的副本的引用。一个current tree上的结点会指向workInprogress tree上的结点，反之亦然。","position":{"start":{"line":31,"column":1,"offset":1129},"end":{"line":31,"column":92,"offset":1220},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1129},"end":{"line":31,"column":92,"offset":1220},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Side-effects && Effects list","position":{"start":{"line":33,"column":4,"offset":1225},"end":{"line":33,"column":32,"offset":1253},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1222},"end":{"line":33,"column":32,"offset":1253},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"​\t每一个fiber结点可以有与之相关的作用，这些被放在effectTag字段中。所以fiber的effects基本定义了实例在更新完后需要处理的","position":{"start":{"line":35,"column":1,"offset":1255},"end":{"line":35,"column":74,"offset":1328},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/shared/ReactSideEffectTags.js","children":[{"type":"text","value":"工作","position":{"start":{"line":35,"column":75,"offset":1329},"end":{"line":35,"column":77,"offset":1331},"indent":[]}}],"position":{"start":{"line":35,"column":74,"offset":1328},"end":{"line":35,"column":198,"offset":1452},"indent":[]}},{"type":"text","value":"。例如host组件（DOM 元素）会有adding, updating or removing elements。类组件会有更新refs，调用cDM和cDU生命周期。","position":{"start":{"line":35,"column":198,"offset":1452},"end":{"line":35,"column":281,"offset":1535},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1255},"end":{"line":35,"column":281,"offset":1535},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"​\tReact会构建一个有effects的fiber结点的线性列表去快速遍历。遍历线性列表比遍历树快很多，且没必要花费时间在没有副作用的结点上。这个列表是","position":{"start":{"line":37,"column":1,"offset":1537},"end":{"line":37,"column":78,"offset":1614},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">finishedWork</code>","position":{"start":{"line":37,"column":78,"offset":1614},"end":{"line":37,"column":92,"offset":1628},"indent":[]}},{"type":"text","value":"tree的子集且它在current和workInProgress tree中使用nextEffect属性链接而不是child属性。","position":{"start":{"line":37,"column":92,"offset":1628},"end":{"line":37,"column":157,"offset":1693},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1537},"end":{"line":37,"column":157,"offset":1693},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"​\t例如，我们的更新会导致","position":{"start":{"line":39,"column":1,"offset":1695},"end":{"line":39,"column":14,"offset":1708},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">c2</code>","position":{"start":{"line":39,"column":14,"offset":1708},"end":{"line":39,"column":18,"offset":1712},"indent":[]}},{"type":"text","value":"插入到DOM中，","position":{"start":{"line":39,"column":18,"offset":1712},"end":{"line":39,"column":26,"offset":1720},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">d2</code>","position":{"start":{"line":39,"column":26,"offset":1720},"end":{"line":39,"column":30,"offset":1724},"indent":[]}},{"type":"text","value":"和","position":{"start":{"line":39,"column":30,"offset":1724},"end":{"line":39,"column":31,"offset":1725},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">c1</code>","position":{"start":{"line":39,"column":31,"offset":1725},"end":{"line":39,"column":35,"offset":1729},"indent":[]}},{"type":"text","value":"改变DOM属性，","position":{"start":{"line":39,"column":35,"offset":1729},"end":{"line":39,"column":43,"offset":1737},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">b2</code>","position":{"start":{"line":39,"column":43,"offset":1737},"end":{"line":39,"column":47,"offset":1741},"indent":[]}},{"type":"text","value":"触发生命周期。effect list会连接他们所以React可以跳过其他结点。","position":{"start":{"line":39,"column":47,"offset":1741},"end":{"line":39,"column":86,"offset":1780},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":1695},"end":{"line":39,"column":86,"offset":1780},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"http://pjpqjxkf6.bkt.clouddn.com/1%2AQ0pCNcK1FfCttek32X_l7A.png","alt":"img","position":{"start":{"line":41,"column":1,"offset":1782},"end":{"line":41,"column":72,"offset":1853},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":1782},"end":{"line":41,"column":72,"offset":1853},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"http://pjpqjxkf6.bkt.clouddn.com/1%2AmbeZ1EsfMsLUk-9hOYyozw.png","alt":"img","position":{"start":{"line":43,"column":1,"offset":1855},"end":{"line":43,"column":72,"offset":1926},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":1855},"end":{"line":43,"column":72,"offset":1926},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"可以看得到，React会从children再到parents执行effects。","position":{"start":{"line":45,"column":1,"offset":1928},"end":{"line":45,"column":41,"offset":1968},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1928},"end":{"line":45,"column":41,"offset":1968},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Fiber tree的根节点","position":{"start":{"line":47,"column":4,"offset":1973},"end":{"line":47,"column":18,"offset":1987},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":1970},"end":{"line":47,"column":18,"offset":1987},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"React对每一个这些container创建","position":{"start":{"line":49,"column":1,"offset":1989},"end":{"line":49,"column":23,"offset":2011},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/facebook/react/blob/0dc0ddc1ef5f90fe48b58f1a1ba753757961fc74/packages/react-reconciler/src/ReactFiberRoot.js#L31","children":[{"type":"text","value":"fiber root","position":{"start":{"line":49,"column":24,"offset":2012},"end":{"line":49,"column":34,"offset":2022},"indent":[]}}],"position":{"start":{"line":49,"column":23,"offset":2011},"end":{"line":49,"column":168,"offset":2156},"indent":[]}},{"type":"text","value":"，你可以这样找到他们","position":{"start":{"line":49,"column":168,"offset":2156},"end":{"line":49,"column":178,"offset":2166},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":1989},"end":{"line":49,"column":178,"offset":2166},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fiberRoot <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>_reactRootContainer<span class=\"token punctuation\">.</span>_internalRoot</code></pre></div>","position":{"start":{"line":51,"column":1,"offset":2168},"end":{"line":53,"column":4,"offset":2247},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":" fiber root的current属性中是React存放fiber tree的地方。","position":{"start":{"line":55,"column":1,"offset":2249},"end":{"line":55,"column":45,"offset":2293},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":2249},"end":{"line":55,"column":45,"offset":2293},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> hostRootFiberNode <span class=\"token operator\">=</span> fiberRoot<span class=\"token punctuation\">.</span>current</code></pre></div>","position":{"start":{"line":57,"column":1,"offset":2295},"end":{"line":59,"column":4,"offset":2356},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"fiber tree会用","position":{"start":{"line":61,"column":1,"offset":2358},"end":{"line":61,"column":13,"offset":2370},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/facebook/react/blob/cbbc2b6c4d0d8519145560bd8183ecde55168b12/packages/shared/ReactWorkTags.js#L34","children":[{"type":"text","value":"一种特别的类型的fiber结点","position":{"start":{"line":61,"column":14,"offset":2371},"end":{"line":61,"column":29,"offset":2386},"indent":[]}}],"position":{"start":{"line":61,"column":13,"offset":2370},"end":{"line":61,"column":148,"offset":2505},"indent":[]}},{"type":"text","value":"开始：","position":{"start":{"line":61,"column":148,"offset":2505},"end":{"line":61,"column":151,"offset":2508},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">HostRoot</code>","position":{"start":{"line":61,"column":151,"offset":2508},"end":{"line":61,"column":161,"offset":2518},"indent":[]}},{"type":"text","value":"，通过","position":{"start":{"line":61,"column":161,"offset":2518},"end":{"line":61,"column":164,"offset":2521},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">stateNode</code>","position":{"start":{"line":61,"column":164,"offset":2521},"end":{"line":61,"column":175,"offset":2532},"indent":[]}},{"type":"text","value":"可以从","position":{"start":{"line":61,"column":175,"offset":2532},"end":{"line":61,"column":178,"offset":2535},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">HostRoot</code>","position":{"start":{"line":61,"column":178,"offset":2535},"end":{"line":61,"column":188,"offset":2545},"indent":[]}},{"type":"text","value":"fiber结点返回FiberRoot","position":{"start":{"line":61,"column":188,"offset":2545},"end":{"line":61,"column":206,"offset":2563},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":2358},"end":{"line":61,"column":206,"offset":2563},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">fiberRoot<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>stateNode <span class=\"token operator\">===</span> fiberRoot<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>","position":{"start":{"line":63,"column":1,"offset":2565},"end":{"line":65,"column":4,"offset":2633},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Fiber node structure","position":{"start":{"line":67,"column":4,"offset":2638},"end":{"line":67,"column":24,"offset":2658},"indent":[]}}],"position":{"start":{"line":67,"column":1,"offset":2635},"end":{"line":67,"column":24,"offset":2658},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"stateNode","position":{"start":{"line":69,"column":5,"offset":2664},"end":{"line":69,"column":14,"offset":2673},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":2660},"end":{"line":69,"column":14,"offset":2673},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"保持fiber对本地状态的联系， 保存对组件的类实例，DOM节点或与fiber节点关联的其他React元素类型的引用。","position":{"start":{"line":71,"column":1,"offset":2675},"end":{"line":71,"column":60,"offset":2734},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":2675},"end":{"line":71,"column":60,"offset":2734},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"type","position":{"start":{"line":73,"column":5,"offset":2740},"end":{"line":73,"column":9,"offset":2744},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":2736},"end":{"line":73,"column":9,"offset":2744},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"定义与此fiber节点关联的功能或类，对于class组件，它指向constructor函数，对于DOM元素，它是HTML tag。","position":{"start":{"line":75,"column":1,"offset":2746},"end":{"line":75,"column":66,"offset":2811},"indent":[]}}],"position":{"start":{"line":75,"column":1,"offset":2746},"end":{"line":75,"column":66,"offset":2811},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"tag","position":{"start":{"line":77,"column":5,"offset":2817},"end":{"line":77,"column":8,"offset":2820},"indent":[]}}],"position":{"start":{"line":77,"column":1,"offset":2813},"end":{"line":77,"column":8,"offset":2820},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"定义","position":{"start":{"line":79,"column":1,"offset":2822},"end":{"line":79,"column":3,"offset":2824},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/shared/ReactWorkTags.js","children":[{"type":"text","value":"fiber节点的类型","position":{"start":{"line":79,"column":4,"offset":2825},"end":{"line":79,"column":14,"offset":2835},"indent":[]}}],"position":{"start":{"line":79,"column":3,"offset":2824},"end":{"line":79,"column":129,"offset":2950},"indent":[]}},{"type":"text","value":"。被用于决定需要在reconciliation中做什么工作。","position":{"start":{"line":79,"column":129,"offset":2950},"end":{"line":79,"column":159,"offset":2980},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":2822},"end":{"line":79,"column":159,"offset":2980},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"updateQueue","position":{"start":{"line":81,"column":5,"offset":2986},"end":{"line":81,"column":16,"offset":2997},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":2982},"end":{"line":81,"column":16,"offset":2997},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"状态更新，回调和DOM更新的队列。","position":{"start":{"line":83,"column":1,"offset":2999},"end":{"line":83,"column":18,"offset":3016},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":2999},"end":{"line":83,"column":18,"offset":3016},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"memoizedState","position":{"start":{"line":85,"column":5,"offset":3022},"end":{"line":85,"column":18,"offset":3035},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":3018},"end":{"line":85,"column":18,"offset":3035},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"fiber用于创建输出的state。处理更新时，它会反映当前在屏幕上呈现的状态。","position":{"start":{"line":87,"column":1,"offset":3037},"end":{"line":87,"column":41,"offset":3077},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":3037},"end":{"line":87,"column":41,"offset":3077},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"memoizedProps","position":{"start":{"line":89,"column":5,"offset":3083},"end":{"line":89,"column":18,"offset":3096},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":3079},"end":{"line":89,"column":18,"offset":3096},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"在上一次render中fiber用于创建输出的props","position":{"start":{"line":91,"column":1,"offset":3098},"end":{"line":91,"column":29,"offset":3126},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":3098},"end":{"line":91,"column":29,"offset":3126},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"pendingProps","position":{"start":{"line":93,"column":5,"offset":3132},"end":{"line":93,"column":17,"offset":3144},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":3128},"end":{"line":93,"column":17,"offset":3144},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"已经从react新元素中更新的props并且需要应用于子组件或DOM元素","position":{"start":{"line":95,"column":1,"offset":3146},"end":{"line":95,"column":37,"offset":3182},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":3146},"end":{"line":95,"column":37,"offset":3182},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"你可以在","position":{"start":{"line":97,"column":1,"offset":3184},"end":{"line":97,"column":5,"offset":3188},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/facebook/react/blob/6e4f7c788603dac7fccd227a4852c110b072fe16/packages/react-reconciler/src/ReactFiber.js#L78","children":[{"type":"text","value":"这里","position":{"start":{"line":97,"column":6,"offset":3189},"end":{"line":97,"column":8,"offset":3191},"indent":[]}}],"position":{"start":{"line":97,"column":5,"offset":3188},"end":{"line":97,"column":138,"offset":3321},"indent":[]}},{"type":"text","value":"找到完整的fiber结构","position":{"start":{"line":97,"column":138,"offset":3321},"end":{"line":97,"column":150,"offset":3333},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":3184},"end":{"line":97,"column":150,"offset":3333},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"主要流程","position":{"start":{"line":99,"column":4,"offset":3338},"end":{"line":99,"column":8,"offset":3342},"indent":[]}}],"position":{"start":{"line":99,"column":1,"offset":3335},"end":{"line":99,"column":8,"offset":3342},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"render阶段","position":{"start":{"line":101,"column":5,"offset":3348},"end":{"line":101,"column":13,"offset":3356},"indent":[]}}],"position":{"start":{"line":101,"column":1,"offset":3344},"end":{"line":101,"column":13,"offset":3356},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"reconcile通常从","position":{"start":{"line":103,"column":1,"offset":3358},"end":{"line":103,"column":13,"offset":3370},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">HostRoot</code>","position":{"start":{"line":103,"column":13,"offset":3370},"end":{"line":103,"column":23,"offset":3380},"indent":[]}},{"type":"text","value":"fiber结点，并通过","position":{"start":{"line":103,"column":23,"offset":3380},"end":{"line":103,"column":34,"offset":3391},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L1132","children":[{"type":"text","value":"renderRoot","position":{"start":{"line":103,"column":35,"offset":3392},"end":{"line":103,"column":45,"offset":3402},"indent":[]}}],"position":{"start":{"line":103,"column":34,"offset":3391},"end":{"line":103,"column":186,"offset":3543},"indent":[]}},{"type":"text","value":"方法开始。但是，React会快速跳过已经处理过的fiber节点知道他找到一个未完成工作的结点。 ","position":{"start":{"line":103,"column":186,"offset":3543},"end":{"line":103,"column":234,"offset":3591},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":3358},"end":{"line":103,"column":234,"offset":3591},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"work loop的主要步骤","position":{"start":{"line":105,"column":6,"offset":3598},"end":{"line":105,"column":20,"offset":3612},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":3593},"end":{"line":105,"column":20,"offset":3612},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"​\t所有fiber节点 ","position":{"start":{"line":107,"column":1,"offset":3614},"end":{"line":107,"column":13,"offset":3626},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/facebook/react/blob/f765f022534958bcf49120bf23bc1aa665e8f651/packages/react-reconciler/src/ReactFiberScheduler.js#L1136","children":[{"type":"text","value":"在work loop中","position":{"start":{"line":107,"column":14,"offset":3627},"end":{"line":107,"column":25,"offset":3638},"indent":[]}}],"position":{"start":{"line":107,"column":13,"offset":3626},"end":{"line":107,"column":166,"offset":3779},"indent":[]}},{"type":"text","value":"被处理，这里是同步部分的work loop实现：","position":{"start":{"line":107,"column":166,"offset":3779},"end":{"line":107,"column":190,"offset":3803},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":3614},"end":{"line":107,"column":190,"offset":3803},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">workLoop</span><span class=\"token punctuation\">(</span>isYieldy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isYieldy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nextUnitOfWork <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      nextUnitOfWork <span class=\"token operator\">=</span> <span class=\"token function\">performUnitOfWork</span><span class=\"token punctuation\">(</span>nextUnitOfWork<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":109,"column":1,"offset":3805},"end":{"line":117,"column":4,"offset":3990},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">nextUnitOfWork</code>","position":{"start":{"line":119,"column":1,"offset":3992},"end":{"line":119,"column":17,"offset":4008},"indent":[]}},{"type":"text","value":"会保留对","position":{"start":{"line":119,"column":17,"offset":4008},"end":{"line":119,"column":21,"offset":4012},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">workInProgress</code>","position":{"start":{"line":119,"column":21,"offset":4012},"end":{"line":119,"column":37,"offset":4028},"indent":[]}},{"type":"text","value":"tree中需要处理的fiber节点的引用。当React遍历fiber tree时，会用这个变量去知晓这里是否有其他未完成工作的fiber结点。","position":{"start":{"line":119,"column":37,"offset":4028},"end":{"line":119,"column":108,"offset":4099},"indent":[]}}],"position":{"start":{"line":119,"column":1,"offset":3992},"end":{"line":119,"column":108,"offset":4099},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"这里会有四个主要函数用于遍历tree和发起或完成工作：","position":{"start":{"line":121,"column":1,"offset":4101},"end":{"line":121,"column":28,"offset":4128},"indent":[]}}],"position":{"start":{"line":121,"column":1,"offset":4101},"end":{"line":121,"column":28,"offset":4128},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":false,"children":[{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L1056","children":[{"type":"text","value":"performUnitOfWork","position":{"start":{"line":123,"column":4,"offset":4133},"end":{"line":123,"column":21,"offset":4150},"indent":[]}}],"position":{"start":{"line":123,"column":3,"offset":4132},"end":{"line":123,"column":162,"offset":4291},"indent":[]}}],"position":{"start":{"line":123,"column":3,"offset":4132},"end":{"line":123,"column":162,"offset":4291},"indent":[]}}],"position":{"start":{"line":123,"column":1,"offset":4130},"end":{"line":123,"column":162,"offset":4291},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/facebook/react/blob/cbbc2b6c4d0d8519145560bd8183ecde55168b12/packages/react-reconciler/src/ReactFiberBeginWork.js#L1489","children":[{"type":"text","value":"beginWork","position":{"start":{"line":124,"column":4,"offset":4295},"end":{"line":124,"column":13,"offset":4304},"indent":[]}}],"position":{"start":{"line":124,"column":3,"offset":4294},"end":{"line":124,"column":154,"offset":4445},"indent":[]}}],"position":{"start":{"line":124,"column":3,"offset":4294},"end":{"line":124,"column":154,"offset":4445},"indent":[]}}],"position":{"start":{"line":124,"column":1,"offset":4292},"end":{"line":124,"column":154,"offset":4445},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L879","children":[{"type":"text","value":"completeUnitOfWork","position":{"start":{"line":125,"column":4,"offset":4449},"end":{"line":125,"column":22,"offset":4467},"indent":[]}}],"position":{"start":{"line":125,"column":3,"offset":4448},"end":{"line":125,"column":162,"offset":4607},"indent":[]}}],"position":{"start":{"line":125,"column":3,"offset":4448},"end":{"line":125,"column":162,"offset":4607},"indent":[]}}],"position":{"start":{"line":125,"column":1,"offset":4446},"end":{"line":125,"column":162,"offset":4607},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/facebook/react/blob/cbbc2b6c4d0d8519145560bd8183ecde55168b12/packages/react-reconciler/src/ReactFiberCompleteWork.js#L532","children":[{"type":"text","value":"completeWork","position":{"start":{"line":126,"column":4,"offset":4611},"end":{"line":126,"column":16,"offset":4623},"indent":[]}}],"position":{"start":{"line":126,"column":3,"offset":4610},"end":{"line":126,"column":159,"offset":4766},"indent":[]}}],"position":{"start":{"line":126,"column":3,"offset":4610},"end":{"line":126,"column":159,"offset":4766},"indent":[]}}],"position":{"start":{"line":126,"column":1,"offset":4608},"end":{"line":126,"column":159,"offset":4766},"indent":[]}}],"position":{"start":{"line":123,"column":1,"offset":4130},"end":{"line":126,"column":159,"offset":4766},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"http://pjpqjxkf6.bkt.clouddn.com/1%2AA3-yF-3Xf47nPamFpRm64w.gif","alt":"img","position":{"start":{"line":128,"column":1,"offset":4768},"end":{"line":128,"column":72,"offset":4839},"indent":[]}}],"position":{"start":{"line":128,"column":1,"offset":4768},"end":{"line":128,"column":72,"offset":4839},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://vimeo.com/302222454","children":[{"type":"text","value":"这里是视频","position":{"start":{"line":130,"column":2,"offset":4842},"end":{"line":130,"column":7,"offset":4847},"indent":[]}}],"position":{"start":{"line":130,"column":1,"offset":4841},"end":{"line":130,"column":37,"offset":4877},"indent":[]}}],"position":{"start":{"line":130,"column":1,"offset":4841},"end":{"line":130,"column":37,"offset":4877},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">performUnitOfWork</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> next <span class=\"token operator\">=</span> <span class=\"token function\">beginWork</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        next <span class=\"token operator\">=</span> <span class=\"token function\">completeUnitOfWork</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">beginWork</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'work performed for '</span> <span class=\"token operator\">+</span> workInProgress<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> workInProgress<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":132,"column":1,"offset":4879},"end":{"line":144,"column":4,"offset":5217},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"​\tperformUnitOfWork从workInProgress tree中接收一个fiber节点然后开始调用beginWork工作。beginWork是开始所有需要执行行动的函数，为了示范，我们简单输出fiber的名字去记录工作已经完成。beginWork总是会返回下一个处理循环的孩子或者null，","position":{"start":{"line":146,"column":1,"offset":5219},"end":{"line":146,"column":154,"offset":5372},"indent":[]}}],"position":{"start":{"line":146,"column":1,"offset":5219},"end":{"line":146,"column":154,"offset":5372},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"​\t如果有下一个孩子，他会赋予workLoop中的nextUnitOfWork。如果没有孩子，React知道已经到达分支的结尾所以他可以完成当前节点。一旦节点完成，它需要为兄弟姐妹执行工作并向父母回溯，这部分会在completeUnitOfWork中完成。","position":{"start":{"line":148,"column":1,"offset":5374},"end":{"line":148,"column":129,"offset":5502},"indent":[]}}],"position":{"start":{"line":148,"column":1,"offset":5374},"end":{"line":148,"column":129,"offset":5502},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">completeUnitOfWork</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> returnFiber <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> siblingFiber <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>sibling<span class=\"token punctuation\">;</span>\n\n        nextUnitOfWork <span class=\"token operator\">=</span> <span class=\"token function\">completeWork</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>siblingFiber <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// If there is a sibling, return it</span>\n            <span class=\"token comment\">// to perform work for this sibling</span>\n            <span class=\"token keyword\">return</span> siblingFiber<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>returnFiber <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// If there's no more work in this returnFiber,</span>\n            <span class=\"token comment\">// continue the loop to complete the parent.</span>\n            workInProgress <span class=\"token operator\">=</span> returnFiber<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// We've reached the root.</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">completeWork</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'work completed for '</span> <span class=\"token operator\">+</span> workInProgress<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":150,"column":1,"offset":5504},"end":{"line":178,"column":4,"offset":6354},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"​\t在completeUnitOfWork中，React只完成上一个兄弟节点的工作，他没有完成父亲节点的工作。只有在完成以子节点开始的所有分支后，才能完成父节点和回溯的工作。","position":{"start":{"line":180,"column":1,"offset":6356},"end":{"line":180,"column":88,"offset":6443},"indent":[]}}],"position":{"start":{"line":180,"column":1,"offset":6356},"end":{"line":180,"column":88,"offset":6443},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"​\t从实现中可以看出，performUnitOfWork和completeUnitOfWork主要用于迭代目的，而主要活动则在beginWork和completeWork函数中进行。 在本系列的以下文章中，我们将了解ClickCounter组件和span节点会发生什么，因为React步入beginWork和completeWork函数。","position":{"start":{"line":182,"column":1,"offset":6445},"end":{"line":182,"column":170,"offset":6614},"indent":[]}}],"position":{"start":{"line":182,"column":1,"offset":6445},"end":{"line":182,"column":170,"offset":6614},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"commit 阶段","position":{"start":{"line":184,"column":5,"offset":6620},"end":{"line":184,"column":14,"offset":6629},"indent":[]}}],"position":{"start":{"line":184,"column":1,"offset":6616},"end":{"line":184,"column":14,"offset":6629},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":186,"column":1,"offset":6631}}}}