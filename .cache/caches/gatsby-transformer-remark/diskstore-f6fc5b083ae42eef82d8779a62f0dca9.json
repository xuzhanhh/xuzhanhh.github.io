{"expireTime":9007200807631266000,"key":"transformer-remark-markdown-html-f89d10cbe472ee5fdb849dea94588677-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<h2>前言</h2>\n<p>​\t简单说下为什么React选择函数式组件，主要是class组件比较冗余、生命周期函数写法不友好，骚写法多，functional组件更符合React编程思想等等等。更具体的可以拜读dan大神的blog:<a href=\"https://overreacted.io/how-are-function-components-different-from-classes/\">传送门</a>。其中<strong>Function components capture the rendered values</strong>这句十分精辟的道出函数式组件的优势。</p>\n<p>​\t但是在16.8之前react的函数式组件十分羸弱，基本只能作用于纯展示组件，主要因为缺少state和生命周期。本人曾经在hooks出来前负责过纯函数式的react项目，所有状态处理都必须在reducer中进行，所有副作用都在saga中执行，可以说是十分艰辛的经历了。在hooks出来后我在公司的一个小中台项目中使用，落地效果不错，代码量显著减少的同时提升了代码的可读性。因为通过custom hooks可以更好地剥离代码结构，不会像以前类组件那样在cDU等生命周期堆了一大堆逻辑，在命令式代码和声明式代码中有一个良性的边界。</p>\n<h2>useState在React中是怎么实现的</h2>\n<blockquote>\n<p>Hooks take some getting used to — and especially at the boundary of imperative and declarative code.</p>\n</blockquote>\n<p>​\t如果对hooks不太了解的可以先看看这篇文章:<a href=\"https://medium.com/@ryardley/react-hooks-not-magic-just-arrays-cd4f1857236e\">前情提要</a>，十分简明的介绍了hooks的核心原理，但是我对useEffect，useRef等钩子的实现比较好奇，所以开始啃起了源码，下面我会结合源码介绍useState的原理。useState具体逻辑分成三部分：mountState，dispatch， updateState</p>\n<h3>hook的结构</h3>\n<p>首先的是hooks的结构，hooks是挂载在组件Fiber结点上memoizedState的，关于Fiber结点可以看看我的另一篇：<a href=\"https://xuzhanhh.com/Inside%20Fiber/\">传送门</a></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//hook的结构</span>\n<span class=\"token keyword\">export</span> type Hook <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  memoizedState<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">,</span> <span class=\"token comment\">//上一次的state</span>\n  baseState<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">,</span>  <span class=\"token comment\">//当前state</span>\n  baseUpdate<span class=\"token punctuation\">:</span> Update<span class=\"token operator\">&lt;</span>any<span class=\"token punctuation\">,</span> any<span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// update func</span>\n  queue<span class=\"token punctuation\">:</span> UpdateQueue<span class=\"token operator\">&lt;</span>any<span class=\"token punctuation\">,</span> any<span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">//用于缓存多次action</span>\n  next<span class=\"token punctuation\">:</span> Hook <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//链表</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>renderWithHooks</h3>\n<p>在reconciler中处理函数式组件的函数是renderWithHooks，其类型是：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">renderWithHooks</span><span class=\"token punctuation\">(</span>\n  current<span class=\"token punctuation\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//当前的fiber结点</span>\n  workInProgress<span class=\"token punctuation\">:</span> Fiber<span class=\"token punctuation\">,</span> \n  Component<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">,</span> <span class=\"token comment\">//jsx中用&lt;>调用的函数</span>\n  props<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">,</span>\n  refOrContext<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">,</span>\n  nextRenderExpirationTime<span class=\"token punctuation\">:</span> ExpirationTime<span class=\"token punctuation\">,</span> <span class=\"token comment\">//需要在什么时候结束</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> any</code></pre></div>\n<p>在renderWithHooks，核心流程如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//从memoizedState中取出hooks</span>\nnextCurrentHook <span class=\"token operator\">=</span> current <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> current<span class=\"token punctuation\">.</span>memoizedState <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">//判断通过有没有hooks判断是mount还是update，两者的函数不同</span>\nReactCurrentDispatcher<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span>\n      nextCurrentHook <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span>\n        <span class=\"token operator\">?</span> HooksDispatcherOnMount\n        <span class=\"token punctuation\">:</span> HooksDispatcherOnUpdate<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//执行传入的type函数</span>\n<span class=\"token keyword\">let</span> children <span class=\"token operator\">=</span> <span class=\"token function\">Component</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">,</span> refOrContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//执行完函数后的dispatcher变成只能调用context的</span>\nReactCurrentDispatcher<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> ContextOnlyDispatcher<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> children<span class=\"token punctuation\">;</span></code></pre></div>\n<h3>useState构建时流程</h3>\n<h4>mountState</h4>\n<p>在HooksDispatcherOnMount中，useState调用的是下面的mountState，作用是创建一个新的hook并使用默认值初始化并绑定其触发器，因为useState底层是useReducer，所以数组第二个值返回的是dispatch。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> BasicStateAction<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token operator\">=></span> <span class=\"token constant\">S</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> mountState<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n  initialState<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">S</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> Dispatch<span class=\"token operator\">&lt;</span>BasicStateAction<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token operator\">>></span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> hook <span class=\"token operator\">=</span> <span class=\"token function\">mountWorkInProgressHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//如果入参是func则会调用，但是不提供参数，带参数的需要包一层</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> initialState <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    initialState <span class=\"token operator\">=</span> <span class=\"token function\">initialState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//上一个state和基本(当前)state都初始化</span>\n  hook<span class=\"token punctuation\">.</span>memoizedState <span class=\"token operator\">=</span> hook<span class=\"token punctuation\">.</span>baseState <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hook<span class=\"token punctuation\">.</span>queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    last<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    dispatch<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    eagerReducer<span class=\"token punctuation\">:</span> basicStateReducer<span class=\"token punctuation\">,</span> <span class=\"token comment\">// useState使用基础reducer</span>\n    eagerState<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//返回触发器</span>\n  <span class=\"token keyword\">const</span> dispatch<span class=\"token punctuation\">:</span> Dispatch<span class=\"token operator\">&lt;</span>\n    <span class=\"token comment\">//useState底层是useReducer，所以type是BasicStateAction</span>\n    BasicStateAction<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>dispatch <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>dispatchAction<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">//绑定当前fiber结点和queue</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>currentlyRenderingFiber<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Fiber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    queue<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>hook<span class=\"token punctuation\">.</span>memoizedState<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>mountWorkInProgressHook</h4>\n<p>这个函数是mountState时调用的构建hook的方法，在初始化完毕后会连接到当前hook.next（如果有的话）</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">mountWorkInProgressHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Hook <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> hook<span class=\"token punctuation\">:</span> Hook <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    memoizedState<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    baseState<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    queue<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    baseUpdate<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    next<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>workInProgressHook <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 列表中的第一个hook</span>\n    firstWorkInProgressHook <span class=\"token operator\">=</span> workInProgressHook <span class=\"token operator\">=</span> hook<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 添加到列表的末尾</span>\n    workInProgressHook <span class=\"token operator\">=</span> workInProgressHook<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> hook<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> workInProgressHook<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>dispatch分发函数</h3>\n<p>​\t在上面我们提到，useState底层是useReducer，所以返回的第二个参数是dispatch函数，其中的设计十分巧妙。</p>\n<p>假设我们有以下代码:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token string\">'first'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token string\">'second'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token string\">'third'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><img src=\"/images/image-20190317151730512.png\" alt=\"image-20190317151730512\"></p>\n<p>在第一次setData后， hooks的结构如上图</p>\n<p><img src=\"/images/image-20190317152006773.png\" alt=\"image-20190317152006773\"></p>\n<p>在第二次setData后， hooks的结构如上图</p>\n<p><img src=\"/images/image-20190317152401946.png\" alt=\"image-20190317152401946\"></p>\n<p>在第三次setData后， hooks的结构如上图</p>\n<p><img src=\"/images/image-20190318114449227.png\" alt=\"image-20190318114449227\"></p>\n<p>在正常情况下，是不会在dispatcher中触发reducer而是将action存入update中在updateState中再执行，但是如果在react没有重渲染需求的前提下是会提前计算state即eagerState。作为性能优化的一环。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> dispatchAction<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n  fiber<span class=\"token punctuation\">:</span> Fiber<span class=\"token punctuation\">,</span>\n  queue<span class=\"token punctuation\">:</span> UpdateQueue<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  action<span class=\"token punctuation\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> alternate <span class=\"token operator\">=</span> fiber<span class=\"token punctuation\">.</span>alternate<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">flushPassiveEffects</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//获取当前时间并计算可用时间</span>\n    <span class=\"token keyword\">const</span> currentTime <span class=\"token operator\">=</span> <span class=\"token function\">requestCurrentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> expirationTime <span class=\"token operator\">=</span> <span class=\"token function\">computeExpirationForFiber</span><span class=\"token punctuation\">(</span>currentTime<span class=\"token punctuation\">,</span> fiber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> update<span class=\"token punctuation\">:</span> Update<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      expirationTime<span class=\"token punctuation\">,</span>\n      action<span class=\"token punctuation\">,</span>\n      eagerReducer<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      eagerState<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      next<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//下面的代码就是为了构建queue.last是最新的更新，然后last.next开始是每一次的action</span>\n    <span class=\"token comment\">// 取出last</span>\n    <span class=\"token keyword\">const</span> last <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>last<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>last <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 自圆</span>\n      update<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> update<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> first <span class=\"token operator\">=</span> last<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>first <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        \n        update<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> first<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      last<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> update<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    queue<span class=\"token punctuation\">.</span>last <span class=\"token operator\">=</span> update<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n      fiber<span class=\"token punctuation\">.</span>expirationTime <span class=\"token operator\">===</span> NoWork <span class=\"token operator\">&amp;&amp;</span>\n      <span class=\"token punctuation\">(</span>alternate <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> alternate<span class=\"token punctuation\">.</span>expirationTime <span class=\"token operator\">===</span> NoWork<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 当前队列为空，我们可以在进入render阶段前提前计算出下一个状态。如果新的状态和当前状态相同，则可以退出重渲染</span>\n      <span class=\"token keyword\">const</span> lastRenderedReducer <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>lastRenderedReducer<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 上次更新完后的reducer</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastRenderedReducer <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> prevDispatcher<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          prevDispatcher <span class=\"token operator\">=</span> ReactCurrentDispatcher<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 暂存dispatcher</span>\n          ReactCurrentDispatcher<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> InvalidNestedHooksDispatcherOnUpdateInDEV<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">const</span> currentState<span class=\"token punctuation\">:</span> <span class=\"token constant\">S</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>lastRenderedState<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\">// 计算下次state</span>\n          <span class=\"token keyword\">const</span> eagerState <span class=\"token operator\">=</span> <span class=\"token function\">lastRenderedReducer</span><span class=\"token punctuation\">(</span>currentState<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\">// 在update对象中存储预计算的完整状态和reducer，如果在进入render阶段前reducer没有变化那么可以服用eagerState而不用重新再次调用reducer</span>\n          update<span class=\"token punctuation\">.</span>eagerReducer <span class=\"token operator\">=</span> lastRenderedReducer<span class=\"token punctuation\">;</span>\n          update<span class=\"token punctuation\">.</span>eagerState <span class=\"token operator\">=</span> eagerState<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span>eagerState<span class=\"token punctuation\">,</span> currentState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 在后续的时间中，如果这个组件因别的原因被重渲染且在那时reducer更变后，仍有可能重建这次更新</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// Suppress the error. It will throw again in the render phase.</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            ReactCurrentDispatcher<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> prevDispatcher<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">scheduleWork</span><span class=\"token punctuation\">(</span>fiber<span class=\"token punctuation\">,</span> expirationTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>useState更新时流程</h3>\n<h4>updateReducer</h4>\n<p>​\t因为useState底层是useReducer，所以在更新时的流程(即重渲染组件后)是调用updateReducer的。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> updateState<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n  initialState<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">S</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> Dispatch<span class=\"token operator\">&lt;</span>BasicStateAction<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token operator\">>></span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">updateReducer</span><span class=\"token punctuation\">(</span>basicStateReducer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>​\t所以其reducer十分简单</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> basicStateReducer<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">:</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">:</span> BasicStateAction<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">S</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> action <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">?</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> action<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>​\t我们先把复杂情况抛开，跑通updateReducer流程</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> updateReducer<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">I</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n  reducer<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">S</span><span class=\"token punctuation\">,</span>\n  initialArg<span class=\"token punctuation\">:</span> <span class=\"token constant\">I</span><span class=\"token punctuation\">,</span>\n  init<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">I</span> <span class=\"token operator\">=></span> <span class=\"token constant\">S</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> Dispatch<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 获取当前hook,queue</span>\n  <span class=\"token keyword\">const</span> hook <span class=\"token operator\">=</span> <span class=\"token function\">updateWorkInProgressHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> queue <span class=\"token operator\">=</span> hook<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">;</span>\n\n  queue<span class=\"token punctuation\">.</span>lastRenderedReducer <span class=\"token operator\">=</span> reducer<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// action队列的最后一个更新</span>\n  <span class=\"token keyword\">const</span> last <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>last<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 最后一个更新是基本状态</span>\n  <span class=\"token keyword\">const</span> baseUpdate <span class=\"token operator\">=</span> hook<span class=\"token punctuation\">.</span>baseUpdate<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> baseState <span class=\"token operator\">=</span> hook<span class=\"token punctuation\">.</span>baseState<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 找到第一个没处理的更新</span>\n  <span class=\"token keyword\">let</span> first<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>baseUpdate <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>last <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 第一次更新时，队列是一个自圆queue.last.next = queue.first。当第一次update提交后，baseUpdate不再为空即可跳出队列</span>\n      last<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    first <span class=\"token operator\">=</span> baseUpdate<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    first <span class=\"token operator\">=</span> last <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> last<span class=\"token punctuation\">.</span>next <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>first <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> newState <span class=\"token operator\">=</span> baseState<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> newBaseState <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> newBaseUpdate <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> prevUpdate <span class=\"token operator\">=</span> baseUpdate<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> update <span class=\"token operator\">=</span> first<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> didSkip <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> updateExpirationTime <span class=\"token operator\">=</span> update<span class=\"token punctuation\">.</span>expirationTime<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>updateExpirationTime <span class=\"token operator\">&lt;</span> renderExpirationTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 优先级不足，跳过这次更新，如果这是第一次跳过更新，上一个update/state是newBaseupdate/state</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>didSkip<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          didSkip <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n          newBaseUpdate <span class=\"token operator\">=</span> prevUpdate<span class=\"token punctuation\">;</span>\n          newBaseState <span class=\"token operator\">=</span> newState<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 更新优先级</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>updateExpirationTime <span class=\"token operator\">></span> remainingExpirationTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          remainingExpirationTime <span class=\"token operator\">=</span> updateExpirationTime<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 处理更新</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>update<span class=\"token punctuation\">.</span>eagerReducer <span class=\"token operator\">===</span> reducer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// 如果更新被提前处理了且reducer跟当前reducer匹配，可以复用eagerState</span>\n          newState <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>update<span class=\"token punctuation\">.</span>eagerState<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// 循环调用reducer</span>\n          <span class=\"token keyword\">const</span> action <span class=\"token operator\">=</span> update<span class=\"token punctuation\">.</span>action<span class=\"token punctuation\">;</span>\n          newState <span class=\"token operator\">=</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      prevUpdate <span class=\"token operator\">=</span> update<span class=\"token punctuation\">;</span>\n      update <span class=\"token operator\">=</span> update<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>update <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> update <span class=\"token operator\">!==</span> first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>didSkip<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      newBaseUpdate <span class=\"token operator\">=</span> prevUpdate<span class=\"token punctuation\">;</span>\n      newBaseState <span class=\"token operator\">=</span> newState<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 只有在前后state变了才会标记</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">,</span> hook<span class=\"token punctuation\">.</span>memoizedState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">markWorkInProgressReceivedUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    hook<span class=\"token punctuation\">.</span>memoizedState <span class=\"token operator\">=</span> newState<span class=\"token punctuation\">;</span>\n    hook<span class=\"token punctuation\">.</span>baseUpdate <span class=\"token operator\">=</span> newBaseUpdate<span class=\"token punctuation\">;</span>\n    hook<span class=\"token punctuation\">.</span>baseState <span class=\"token operator\">=</span> newBaseState<span class=\"token punctuation\">;</span>\n    queue<span class=\"token punctuation\">.</span>lastRenderedState <span class=\"token operator\">=</span> newState<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> dispatch<span class=\"token punctuation\">:</span> Dispatch<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>dispatch<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>hook<span class=\"token punctuation\">.</span>memoizedState<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">markWorkInProgressReceivedUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  didReceiveUpdate <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>后记</h2>\n<p>​\t作为系列的第一篇文章，我选择了最常用的hooks开始，抛开提前计算及与react-reconciler的互动，整个流程是十分清晰易懂的。mount的时候构建钩子，触发dispatch时按序插入update。updateState的时候再按序触发reducer。可以说就是一个简单的redux。但是作为系列的开篇我认为知识量已经达到要求了xd</p>"}