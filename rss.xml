<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[酱香型猫砂盆]]></title><description><![CDATA[Personal blog by Dan Abramov. I explain with words and code.]]></description><link>https://overreacted.io</link><generator>RSS for Node</generator><lastBuildDate>Fri, 14 Dec 2018 11:49:02 GMT</lastBuildDate><item><title><![CDATA[Inside Fiber]]></title><description><![CDATA[read this createFiberFromTypeAndProps ​	当一个React元素第一次被转换成fiber node时，React使用createFiberFromTypeAndProps。在随后的更新中React会重用fiber node…]]></description><link>https://overreacted.io/Inside Fiber/</link><guid isPermaLink="false">https://overreacted.io/Inside Fiber/</guid><pubDate>Thu, 13 Dec 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;https://medium.com/react-in-depth/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react-e1c04700ef6e&quot;&gt;read this&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;createFiberFromTypeAndProps&lt;/h2&gt;
&lt;p&gt;​	当一个React元素第一次被转换成fiber node时，React使用createFiberFromTypeAndProps。在随后的更新中React会重用fiber node且只更新从当前React元素获取必须的属性。React还会根据key属性在目录中移动结点位置或删除它如果react元素的render方法没有返回值。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;查看&lt;a href=&quot;https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactChildFiber.js#L239&quot;&gt;&lt;strong&gt;ChildReconciler&lt;/strong&gt;&lt;/a&gt;方法得到所有行动和React针对当前的fiber结点类型执行的相应的方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;current和workInProgress tree&lt;/h2&gt;
&lt;p&gt;​	第一次render结束后，React会生成一个fiber tree映射应用的状态和UI，这个tree一般叫&lt;code class=&quot;language-text&quot;&gt;current&lt;/code&gt;。当React准备开始更新时会构建一个&lt;code class=&quot;language-text&quot;&gt;workInProgress&lt;/code&gt;tree，反映将被渲染到屏幕的将来的状态。&lt;/p&gt;
&lt;p&gt;​	所有的fibers上的工作都会在workInProgress tree上执行。当React遍历current tree时，每一个存在的结点都会创建一个alternate node来构成workInProgress tree。当更新完成且所有的相关工作完成时，React准备将alternate tree渲染到屏幕上。一旦workInProgress tree被渲染到屏幕上，他就会变成current tree。&lt;/p&gt;
&lt;p&gt;​	在代码中你会见到很多函数需要current和workInProgress tree：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;updateHostComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; workInProgress&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; renderExpirationTime&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;​	每一个fiber结点的alternate属性会是它在另外一颗树上的副本的引用。一个current tree上的结点会指向workInprogress tree上的结点，反之亦然。&lt;/p&gt;
&lt;h2&gt;Side-effects &amp;#x26;&amp;#x26; Effects list&lt;/h2&gt;
&lt;p&gt;​	每一个fiber结点可以有与之相关的作用，这些被放在effectTag字段中。所以fiber的effects基本定义了实例在更新完后需要处理的&lt;a href=&quot;https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/shared/ReactSideEffectTags.js&quot;&gt;工作&lt;/a&gt;。例如host组件（DOM 元素）会有adding, updating or removing elements。类组件会有更新refs，调用cDM和cDU生命周期。&lt;/p&gt;
&lt;p&gt;​	React会构建一个有effects的fiber结点的线性列表去快速遍历。遍历线性列表比遍历树快很多，且没必要花费时间在没有副作用的结点上。这个列表是&lt;code class=&quot;language-text&quot;&gt;finishedWork&lt;/code&gt;tree的子集且它在current和workInProgress tree中使用nextEffect属性链接而不是child属性。&lt;/p&gt;
&lt;p&gt;​	例如，我们的更新会导致&lt;code class=&quot;language-text&quot;&gt;c2&lt;/code&gt;插入到DOM中，&lt;code class=&quot;language-text&quot;&gt;d2&lt;/code&gt;和&lt;code class=&quot;language-text&quot;&gt;c1&lt;/code&gt;改变DOM属性，&lt;code class=&quot;language-text&quot;&gt;b2&lt;/code&gt;触发生命周期。effect list会连接他们所以React可以跳过其他结点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://pjpqjxkf6.bkt.clouddn.com/1%2AQ0pCNcK1FfCttek32X_l7A.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://pjpqjxkf6.bkt.clouddn.com/1%2AmbeZ1EsfMsLUk-9hOYyozw.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以看得到，React会从children再到parents执行effects。&lt;/p&gt;
&lt;h2&gt;Fiber tree的根节点&lt;/h2&gt;
&lt;p&gt;React对每一个这些container创建&lt;a href=&quot;https://github.com/facebook/react/blob/0dc0ddc1ef5f90fe48b58f1a1ba753757961fc74/packages/react-reconciler/src/ReactFiberRoot.js#L31&quot;&gt;fiber root&lt;/a&gt;，你可以这样找到他们&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fiberRoot &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;#app&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_reactRootContainer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_internalRoot&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; fiber root的current属性中是React存放fiber tree的地方。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; hostRootFiberNode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fiberRoot&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;fiber tree会用&lt;a href=&quot;https://github.com/facebook/react/blob/cbbc2b6c4d0d8519145560bd8183ecde55168b12/packages/shared/ReactWorkTags.js#L34&quot;&gt;一种特别的类型的fiber结点&lt;/a&gt;开始：&lt;code class=&quot;language-text&quot;&gt;HostRoot&lt;/code&gt;，通过&lt;code class=&quot;language-text&quot;&gt;stateNode&lt;/code&gt;可以从&lt;code class=&quot;language-text&quot;&gt;HostRoot&lt;/code&gt;fiber结点返回FiberRoot&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;fiberRoot&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stateNode &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; fiberRoot&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Fiber node structure&lt;/h2&gt;
&lt;h3&gt;stateNode&lt;/h3&gt;
&lt;p&gt;保持fiber对本地状态的联系， 保存对组件的类实例，DOM节点或与fiber节点关联的其他React元素类型的引用。&lt;/p&gt;
&lt;h3&gt;type&lt;/h3&gt;
&lt;p&gt;定义与此fiber节点关联的功能或类，对于class组件，它指向constructor函数，对于DOM元素，它是HTML tag。&lt;/p&gt;
&lt;h3&gt;tag&lt;/h3&gt;
&lt;p&gt;定义&lt;a href=&quot;https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/shared/ReactWorkTags.js&quot;&gt;fiber节点的类型&lt;/a&gt;。被用于决定需要在reconciliation中做什么工作。&lt;/p&gt;
&lt;h3&gt;updateQueue&lt;/h3&gt;
&lt;p&gt;状态更新，回调和DOM更新的队列。&lt;/p&gt;
&lt;h3&gt;memoizedState&lt;/h3&gt;
&lt;p&gt;fiber用于创建输出的state。处理更新时，它会反映当前在屏幕上呈现的状态。&lt;/p&gt;
&lt;h3&gt;memoizedProps&lt;/h3&gt;
&lt;p&gt;在上一次render中fiber用于创建输出的props&lt;/p&gt;
&lt;h3&gt;pendingProps&lt;/h3&gt;
&lt;p&gt;已经从react新元素中更新的props并且需要应用于子组件或DOM元素&lt;/p&gt;
&lt;p&gt;你可以在&lt;a href=&quot;https://github.com/facebook/react/blob/6e4f7c788603dac7fccd227a4852c110b072fe16/packages/react-reconciler/src/ReactFiber.js#L78&quot;&gt;这里&lt;/a&gt;找到完整的fiber结构&lt;/p&gt;
&lt;h2&gt;主要流程&lt;/h2&gt;
&lt;h3&gt;render阶段&lt;/h3&gt;
&lt;p&gt;reconcile通常从&lt;code class=&quot;language-text&quot;&gt;HostRoot&lt;/code&gt;fiber结点，并通过&lt;a href=&quot;https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L1132&quot;&gt;renderRoot&lt;/a&gt;方法开始。但是，React会快速跳过已经处理过的fiber节点知道他找到一个未完成工作的结点。 &lt;/p&gt;
&lt;h4&gt;work loop的主要步骤&lt;/h4&gt;
&lt;p&gt;​	所有fiber节点 &lt;a href=&quot;https://github.com/facebook/react/blob/f765f022534958bcf49120bf23bc1aa665e8f651/packages/react-reconciler/src/ReactFiberScheduler.js#L1136&quot;&gt;在work loop中&lt;/a&gt;被处理，这里是同步部分的work loop实现：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;workLoop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;isYieldy&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;isYieldy&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nextUnitOfWork &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      nextUnitOfWork &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;performUnitOfWork&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nextUnitOfWork&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;nextUnitOfWork&lt;/code&gt;会保留对&lt;code class=&quot;language-text&quot;&gt;workInProgress&lt;/code&gt;tree中需要处理的fiber节点的引用。当React遍历fiber tree时，会用这个变量去知晓这里是否有其他未完成工作的fiber结点。&lt;/p&gt;
&lt;p&gt;这里会有四个主要函数用于遍历tree和发起或完成工作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L1056&quot;&gt;performUnitOfWork&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/facebook/react/blob/cbbc2b6c4d0d8519145560bd8183ecde55168b12/packages/react-reconciler/src/ReactFiberBeginWork.js#L1489&quot;&gt;beginWork&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L879&quot;&gt;completeUnitOfWork&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/facebook/react/blob/cbbc2b6c4d0d8519145560bd8183ecde55168b12/packages/react-reconciler/src/ReactFiberCompleteWork.js#L532&quot;&gt;completeWork&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://pjpqjxkf6.bkt.clouddn.com/1%2AA3-yF-3Xf47nPamFpRm64w.gif&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://vimeo.com/302222454&quot;&gt;这里是视频&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;performUnitOfWork&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;workInProgress&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; next &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;beginWork&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;workInProgress&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;next &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        next &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;completeUnitOfWork&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;workInProgress&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; next&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;beginWork&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;workInProgress&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;work performed for &apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; workInProgress&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; workInProgress&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;child&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;​	performUnitOfWork从workInProgress tree中接收一个fiber节点然后开始调用beginWork工作。beginWork是开始所有需要执行行动的函数，为了示范，我们简单输出fiber的名字去记录工作已经完成。beginWork总是会返回下一个处理循环的孩子或者null，&lt;/p&gt;
&lt;p&gt;​	如果有下一个孩子，他会赋予workLoop中的nextUnitOfWork。如果没有孩子，React知道已经到达分支的结尾所以他可以完成当前节点。一旦节点完成，它需要为兄弟姐妹执行工作并向父母回溯，这部分会在completeUnitOfWork中完成。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;completeUnitOfWork&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;workInProgress&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; returnFiber &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; workInProgress&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; siblingFiber &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; workInProgress&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sibling&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        nextUnitOfWork &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;completeWork&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;workInProgress&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;siblingFiber &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;// If there is a sibling, return it&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;// to perform work for this sibling&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; siblingFiber&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;returnFiber &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;// If there&apos;s no more work in this returnFiber,&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;// continue the loop to complete the parent.&lt;/span&gt;
            workInProgress &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; returnFiber&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;// We&apos;ve reached the root.&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;completeWork&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;workInProgress&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;work completed for &apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; workInProgress&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;​	在completeUnitOfWork中，React只完成上一个兄弟节点的工作，他没有完成父亲节点的工作。只有在完成以子节点开始的所有分支后，才能完成父节点和回溯的工作。&lt;/p&gt;
&lt;p&gt;​	从实现中可以看出，performUnitOfWork和completeUnitOfWork主要用于迭代目的，而主要活动则在beginWork和completeWork函数中进行。 在本系列的以下文章中，我们将了解ClickCounter组件和span节点会发生什么，因为React步入beginWork和completeWork函数。&lt;/p&gt;
&lt;h3&gt;commit 阶段&lt;/h3&gt;</content:encoded></item><item><title><![CDATA[react hooks@seb]]></title><description><![CDATA[翻译这个  issue 注入模型 ​	基本上，争论分解为想要交换(swap out)实现钩子的代码(the code that implements the hooks)。这类似于一般依赖注入和控制问题的反转(inversion of control problem)。React…]]></description><link>https://overreacted.io/react hooks@seb/</link><guid isPermaLink="false">https://overreacted.io/react hooks@seb/</guid><pubDate>Tue, 11 Dec 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;翻译这个 &lt;a href=&quot;https://github.com/reactjs/rfcs/pull/68#issuecomment-439314884&quot;&gt;issue&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;注入模型&lt;/h2&gt;
&lt;p&gt;​	基本上，争论分解为想要交换(swap out)实现钩子的代码(the code that implements the hooks)。这类似于一般依赖注入和控制问题的反转(inversion of control problem)。React没有自己的依赖注入系统（不同于Angular）。通常他不需要这个因为大多数入口都是pull而不是push。对于其他代码，模块系统已经提供了良好的依赖注入边界，对于测试，我们倾向于推荐其他技术，例如在模块系统级别进行模拟（例如使用jest）&lt;/p&gt;
&lt;p&gt;​	一些例外是像setState, replaceState, isMounted, findDOMNode, batchedUpdates等API，一个小的事实是React已经使用依赖注入将“updater”插入到Component base class。这是构造函数的第三个参数。该组件实际上不需要做任何事情。这就是让React在React ART或React Test Renderer等相同环境中的不同版本中具有多种不同类型的渲染器实现的原因。 自定义渲染器已经利用了这一点。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; ReactNoopUpdateQueue &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./ReactNoopUpdateQueue&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;/**
 * Base class helpers for the updating state of a component.
 */&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; updater&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;context &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// If a component has string refs, we will assign a different object later.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;refs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; emptyObject&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// We initialize the default updater but the real one gets injected by the&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// renderer.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;updater &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; updater &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; ReactNoopUpdateQueue&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;​	理论上，像React-clones这样的第三方库可以使用updater来注入他们的实现。实践中，大部分倾向于使用module shimming来替换整个react模块，因为他们有权衡或者想要实现其他API（例如， 移除dev模式内容或者将base classes和实现细节合并）&lt;/p&gt;
&lt;p&gt;​	这些选项仍然保留在hooks的程序中。hooks的实现实际上没有在react包中实现，它只是调用当前的“调度程序”（dispatcher）。就如我上面解释的那样，可以暂时覆盖任何给定点的实现。这就是react渲染器（renderers）让多个渲染器共享相同API。例如，你可以让一个钩子测试调度程序（hooks test dispatcher）只是为了单元测试hooks。目前他有一个看起来很可怕的名字不过我们可以很容器的改变这个名词，这不是设计的缺陷（flaw of the design）。现在“调度程序（dispatcher）”可以移动到用户空间中，但是这会增加额外的噪音，这些噪音几乎从来不与单个组件的作者相关（but this adds additional noise for something that almost never is relevant to the author of an individual component），就像大多数人不知道React中的updater一样。&lt;/p&gt;
&lt;p&gt;​	总的来说，我们可能会使用更多的静态函数调用因为他们更适合tree-shaking和更好地优化和内联。&lt;/p&gt;
&lt;p&gt;​	另一个问题是hooks的主入口在react包中而不是第三方包，在未来很有可能其他代码会移除react包所以hooks会是剩下的大部分内容，所以包体积不需要担心。唯一的问题是hooks属于react下的而不是更通用的。例如，Vue曾经考虑过hooks API。但是hooks的关键是其原函数我们已经定义好的。这与Vue有完全不同的原函数。我们已经迭代了我们的函数。其他库可能会提出略有不同的原函数。在这一点上，过早地使这些过于笼统是没有意义的。第一次迭代在react包上的事实只是为了说明这就是我们对原函数的看法。如果存在重叠，那么就没有什么能阻止我们在第三方命名包上与其他库进行整合，并将反应的那些转发到该包。&lt;/p&gt;
&lt;h2&gt;依赖持续调用顺序&lt;/h2&gt;
&lt;p&gt;​	要明确的是，执行顺序的依赖并不是我们真正想要的。 首先放置useState或useEffect或类似的东西并不重要。React有很多依赖于执行顺序的模式，只是因为在渲染中允许变异（这仍然使渲染本身变得纯净）。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; children &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; items&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  count&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Item item&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; key&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; header &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Header&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Number &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; items &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Header&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;​	我不能在我的代码中只改变children和header的顺序。&lt;/p&gt;
&lt;p&gt;​	hooks不关心使用的顺序，它关系是否有持续每次都一样的顺序。这与调用之间隐含的依赖性非常不同。&lt;/p&gt;
&lt;p&gt;​	最好不要依赖持久秩序 - 所有事情都是平等的。 但是，有一些权衡。 例如。 语法噪音或其他令人困惑的事情。&lt;/p&gt;
&lt;p&gt;​	Some think that it is worth the cost for puritism reasons alone. However, some also have practical concerns.&lt;/p&gt;
&lt;h2&gt;API设计&lt;/h2&gt;
&lt;h3&gt;useReducer&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; initialState &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;reducer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; action&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;action&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;reset&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; initialState&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;increment&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;decrement&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// A reducer must always return a valid state.&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// Alternatively you can throw an error if an invalid action is dispatched.&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;initialCount&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; dispatch&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useReducer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;reducer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; initialCount&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      Count&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;reset&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        Reset
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;increment&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;decrement&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个会替换Redux吗？这回加重学习flux的负担吗？一般来说比起很多flux框架，Reducer是一个更狭隘的用例，Reducer非常简单，但是，如果你在学习Vue，Reason，Elm等框架/语言，调度和集中逻辑以在更高级别的状态之间转换的这种一般模式似乎取得了巨大成功。它还解决了React中带有回调的许多怪癖，为复杂的状态转换带来了更多直观的解决方案。特别是在并行（concurrent）的世界中。&lt;/p&gt;
&lt;p&gt;从代码体积上看，他不会增加任何非当前必须的代码，从概念上，我认为这是一个值得学习的概念，因为相同的模式不断以各种形式出现在各处。 最好有一个中央API来管理它。&lt;/p&gt;
&lt;p&gt;所以我认为比起useState，useReducer是更加核心的API。但是useState依然很棒因为对于简单的用例来说它非常简洁而且简易解释，不过大家应该尽早研究useReducer或其他相似的模式。&lt;/p&gt;
&lt;p&gt;也就是说，它也没有做Redux和其他Flux框架所做的很多事情。通常我认为你不会需要它，所以它可能不像现在那样普遍存在，但它仍然存在。&lt;/p&gt;
&lt;h3&gt;Context Provider&lt;/h3&gt;
&lt;h3&gt;useEffect&lt;/h3&gt;
&lt;p&gt;目前最奇怪的Hook是&lt;code class=&quot;language-text&quot;&gt;useEffect&lt;/code&gt;。需要明确的是，预计这是迄今为止最难使用的Hook，因为它正在使用命令式代码（interoping with imperative code）。命令式代码很难管理，这就是为什么我们试图保持声明式代码。但是，从声明式变为命令式很难，因为声明式可以处理更多不同类型的状态和每行代码的转换。 实现效果时，理想情况下也应处理所有这些情况。 这里的部分目标是鼓励处理更多情况。 如果这样做，那么一些怪癖是可以的。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[learning A Cartoon to Fiber]]></title><description><![CDATA[这里我还没写完 stack reconciler的缺点 ​	在我们执行update操作之前我们已经有一个在初始render时已经构造好的fiber树，react也会开始work-in-progress树并添加第一个fiber节点，因为我们不想当我们计算变动时直接修改dom…]]></description><link>https://overreacted.io/learning A Cartoon to Fiber/</link><guid isPermaLink="false">https://overreacted.io/learning A Cartoon to Fiber/</guid><pubDate>Sun, 11 Nov 2018 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;这里我还没写完&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110201732613.png&quot; alt=&quot;image-20181110201732613&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110202214457.png&quot; alt=&quot;image-20181110202214457&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/var/folders/h5/1tnmsg713pldfgpyxh4c41wm0m7_pl/T/abnerworks.Typora/image-20181110203945805.png&quot; alt=&quot;image-20181110203945805&quot;&gt;&lt;/p&gt;
&lt;h2&gt;stack reconciler的缺点&lt;/h2&gt;
&lt;p&gt;​	在我们执行update操作之前我们已经有一个在初始render时已经构造好的fiber树，react也会开始work-in-progress树并添加第一个fiber节点，因为我们不想当我们计算变动时直接修改dom，这个跟stack reconciler不一样，stack reconciler在往下走改变实例时同时改动当前的dom节点。&lt;/p&gt;
&lt;p&gt;​	例如在将实例2变成4时，同时也会改动dom node从2到4在react计算第三个实例应该从3变到9前。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/var/folders/h5/1tnmsg713pldfgpyxh4c41wm0m7_pl/T/abnerworks.Typora/image-20181110204749728.png&quot; alt=&quot;image-20181110204749728&quot;&gt;&lt;/p&gt;
&lt;p&gt;这样子是可行的如果你一次性同步地完成所有事情。如果你需要在两个实例间打断时，浏览器需要时间paint和layout，但是只有2变成4而3没有变成9，这样你的ui就会变得不连续。&lt;/p&gt;
&lt;h2&gt;fiber phases&lt;/h2&gt;
&lt;p&gt;第一个阶段，react只会构建fiber tree和work-in-progress tree和变动列表（可中断）&lt;/p&gt;
&lt;p&gt;第二阶段，将这些变动作用到dom上（不可中断）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/var/folders/h5/1tnmsg713pldfgpyxh4c41wm0m7_pl/T/abnerworks.Typora/image-20181110210012223.png&quot; alt=&quot;image-20181110205919129&quot;&gt;&lt;/p&gt;
&lt;h2&gt;阶段1&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;当我们点击按钮时触发了setState&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110210205135.png&quot; alt=&quot;image-20181110210205135&quot;&gt;&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;
&lt;p&gt;当setState被调用时，react会添加List组件一系列更新添加到更新队列中，然后react会开始调度这些工作&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110210528429.png&quot; alt=&quot;image-20181110210528429&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用request idle callback去延迟完成这些工作 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110210741530.png&quot; alt=&quot;image-20181110210741530&quot;&gt;&lt;/p&gt;
&lt;p&gt;当主线程有空闲时间时会把具体剩余时间给react，具体几毫秒到几十毫秒（当最近的将来没有frame scheduled时）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110211003501.png&quot; alt=&quot;image-20181110211003501&quot;&gt;&lt;/p&gt;
&lt;p&gt;​	这样react可以使用这些剩余时间处理更新并当其他工作需要处理时将时间还给主线程。这样的操作需要跟踪两个时间，next unit of work that it needs to work on 和 主线程给与的剩余时间&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110211302791.png&quot; alt=&quot;image-20181110211302791&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从current复制HostRoot的数据到workInProgress tree 并添加一个指针指向儿子（List）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110211949517.png&quot; alt=&quot;image-20181110211949517&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因为List本身没有更新，所以将List复制到workInProgress tree。并且List有更新队列，所以也会复制update Queue。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110212258539.png&quot; alt=&quot;image-20181110212258539&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所以List fiber is going to be returned as the next unit of work&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110212347964.png&quot; alt=&quot;image-20181110212347964&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;React 会检查deadline是否到来。因为还有剩余的时间，react会继续处理List&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110212645386.png&quot; alt=&quot;image-20181110212645386&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因为List有更新队列，所以react会处理这些更新，他会调用updater函数，且传对象的setState以后的某个版本被移除&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110212849733.png&quot; alt=&quot;image-20181110212849733&quot;&gt;并结束处理更新队列，fiber会标记一个tag表示他会修改dom树&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110213110874.png&quot; alt=&quot;image-20181110213110874&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在继续往下处理前，我们需要知道List的children，所以react会在List实例设置props和state并调用render，我们会得到一个数组的元素。react会遍历这些元素去判断在current tree中是否有可以重用的fiber。如果有，则直接复制&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110213813900.png&quot; alt=&quot;image-20181110213813900&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110213944644.png&quot; alt=&quot;image-20181110213944644&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后会返回List的第一个child button作为下一个unit of work, 然后react会回到work loop并检查deadline。&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110214543420.png&quot; alt=&quot;image-20181110214543420&quot;&gt;&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110214728829.png&quot; alt=&quot;image-20181110214728829&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这个时候用户想搞事情，点击放大字体按钮去改变web字体大小&lt;img src=&quot;/var/folders/h5/1tnmsg713pldfgpyxh4c41wm0m7_pl/T/abnerworks.Typora/image-20181110214856489.png&quot; alt=&quot;image-20181110214856489&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这样会导致给队列中的一些东西添加了一个回调，主线程需要去关心的，但是不是马上因为react仍然有时间继续处理next unit of work — button。button是我们第一个遇到的没有孩子的元素，所以他不会创建新的工作。所以react可以完成这个单位的工作，这意味着比较新旧元素查看是否有变动，如果有变动需要变动dom则会标记。然后因为button没有孩子，所以会返回邻居作为下一个单位的工作&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110215513582.png&quot; alt=&quot;image-20181110215513582&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;react会结束这个单元的工作并回到work loop中检查deadline&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110215657530.png&quot; alt=&quot;image-20181110215657530&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;item中有sCU，并且因为sCU返回false所以item1不需要对dom进行修改，所以不需要打标签。然后邻居作为下一个单元的工作。同样地，react回到work loop检查deadline并回来&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110215823086.png&quot; alt=&quot;image-20181110215823086&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二个item的sCU返回true，所以会被标记为有更变，然后他的div会被复制过来，并且将div返回作为下一个单元的工作
&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110220630861.png&quot; alt=&quot;image-20181110220630861&quot;&gt;&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110220704324.png&quot; alt=&quot;image-20181110220704324&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol start=&quot;16&quot;&gt;
&lt;li&gt;
&lt;p&gt;因为我们还有一丢丢时间所以我们准备处理这个div，因为这个div没有children所以我们可以完成它，我们发现这个div的内容变更了，所以我们给他打上标记
&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110222423364.png&quot; alt=&quot;image-20181110222222665&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因为当前没有邻居也没有children，没有下个单元的工作，所以会调用他父亲的complete，并且这是我们第一次将变动添加到一个列表，因为他有tag且完成了(completed)。
&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110224035848.png&quot; alt=&quot;image-20181110224035848&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这个时候item也完成了(complated)并且他也有一个tag。so it’s going to move itself up to it’s going to start creating this list of changes on its parent. It merge its own list of changes into the parents effect list&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;item会将div的变动放到effect list的第一个，然后将自己放到effect list的末尾
&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110224526544.png&quot; alt=&quot;image-20181110224526544&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二个item complete 并返回邻居作为下一个单元的工作&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110224637609.png&quot; alt=&quot;image-20181110224637609&quot;&gt;&lt;/p&gt;
&lt;p&gt;返回work loop，react发现deadline已经到了。所以react会释放资源并让主线程处理其他任务&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110224810666.png&quot; alt=&quot;image-20181110224810666&quot;&gt;&lt;/p&gt;
&lt;p&gt;react仍然需要继续完成任务，所以使用rIC让主线程完成工作后继续调用react&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110224939741.png&quot; alt=&quot;image-20181110224939741&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后主线程会去处理等待中的callback，在这个例子中是layout&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110225030973.png&quot; alt=&quot;image-20181110225030973&quot;&gt;&lt;/p&gt;
&lt;p&gt;不过注意到nothing in the content of our react app is changed even though react note says going to need to change two to four 在将来的某个时间，而不是现在。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol start=&quot;21&quot;&gt;
&lt;li&gt;
&lt;p&gt;main thread 处理完其他事情会继续调用react，最后两个单元工作和第二个item一样&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110225617532.png&quot; alt=&quot;image-20181110225617532&quot;&gt;
&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110225632116.png&quot; alt=&quot;image-20181110225632116&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;即完成了List下面的所有单元工作，所以List可以调用complete，并将自己和孩子的更变放到effect list中，然后HostRoot也完成了
&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110230128716.png&quot; alt=&quot;image-20181110225715325&quot;&gt;
&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110225807413.png&quot; alt=&quot;image-20181110225807413&quot;&gt;&lt;/p&gt;
&lt;ol start=&quot;22&quot;&gt;
&lt;li&gt;react会将work-in-progress tree设成pending commit，这意味着第一个阶段结束了。我们更新了work-in-progress tree和指出了变动列表&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;阶段2&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;react 会检查deadline判断是否有时间立刻执行commit，如果不够则在rIC后第一时间commit这个pending commit&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110230504330.png&quot; alt=&quot;image-20181110230504330&quot;&gt;&lt;/li&gt;
&lt;li&gt;react会遍历effect list并应该更变到dom上，从第一个fiber开始&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110230821602.png&quot; alt=&quot;image-20181110230821602&quot;&gt;
&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110230855909.png&quot; alt=&quot;image-20181110230855909&quot;&gt;
&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110230913246.png&quot; alt=&quot;image-20181110230913246&quot;&gt;
item没有任何改变，因为我们不使用ref，不过如果我们在item中有ref will be detached now and then it would be reattached later
&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110231153619.png&quot; alt=&quot;image-20181110231153619&quot;&gt;
&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110231121156.png&quot; alt=&quot;image-20181110231121156&quot;&gt;
现在所有变动都在第一阶段计算完毕并commit到dom树。这意味着work-in-progress tree is actually a more up-to-date version of state of the app than the current tree，所以react需要修复current tree。他会切换指针，所以当前指针指向我们刚构建的work-in-pregress tree
&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110231429089.png&quot; alt=&quot;image-20181110231429089&quot;&gt;
&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110231630674.png&quot; alt=&quot;image-20181110231630674&quot;&gt;
这意味着react可以在work-in-progress tree中重用旧对象，只需要在下次构建中work-in-progress tree复制key value。这叫double buffering，可以在内存分配和gc中节省时间，现在react完成了这次的commit，并执行剩下的lifecycle hooks和更新任何refs并处理error boundaries
&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110232043775.png&quot; alt=&quot;image-20181110232043775&quot;&gt;&lt;/p&gt;
&lt;h2&gt;优先级&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;Synchronous&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;same as stack rec&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;Task&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;before next tick&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;Animation&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;before next frame&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;token string&quot;&gt;&quot;rIC&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        	&lt;span class=&quot;token string&quot;&gt;&quot;High&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;pretty soon&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token string&quot;&gt;&quot;Low&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;如数据获取，对100or200ms不敏感&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;token string&quot;&gt;&quot;Offscreen&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;prep for display/scroll&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;高优先级的任务会立刻执行，尽管现在已经开始了低优先级的任务&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110232753533.png&quot; alt=&quot;image-20181110232753533&quot;&gt;&lt;/p&gt;
&lt;p&gt;回到之前我们搞事情的地方，如果我们有一个紧急的font resize button
&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181110233032279.png&quot; alt=&quot;image-20181110233032279&quot;&gt;&lt;/p&gt;
&lt;p&gt;用户点击后会放置一个callback到主线程处理队列中&lt;/p&gt;
&lt;h2&gt;lifecycle hook during the phase&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181111143014786.png&quot; alt=&quot;image-20181111143014786&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181111143107194.png&quot; alt=&quot;image-20181111143107194&quot;&gt;&lt;/p&gt;
&lt;h2&gt;starvation&lt;/h2&gt;
&lt;p&gt;reusing work where it can. So if it had a low priority work that was done and the high priority work didn’t touch that part of the tree then they can reuse that work.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Users/xuzhanhong1/Documents/image-20181111143219524.png&quot; alt=&quot;image-20181111143219524&quot;&gt;&lt;/p&gt;
&lt;h2&gt;相关资料&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/facebook/react/blob/master/packages/shared/ReactSideEffectTags.js&quot;&gt;effectTag&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/facebook/react/blob/0154a79fedef38a824a837c535bc853013dd4588/packages/react-scheduler/src/ReactScheduler.js#L25-L31&quot;&gt;react custom rIC&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Promise]]></title><description><![CDATA[Promise 见识了一道面试题，重温一下Promise。 题目 分析 ​	乍看题目没什么困难，要实现也可以强行用timeout延迟ajax2的调用。但是题目肯定不是做完就好了，就在想mergePromise能否写成能实现fc…]]></description><link>https://overreacted.io/Promise/</link><guid isPermaLink="false">https://overreacted.io/Promise/</guid><pubDate>Wed, 25 Jul 2018 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Promise&lt;/h1&gt;
&lt;p&gt;见识了一道面试题，重温一下Promise。&lt;/p&gt;
&lt;h2&gt;题目&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ms &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reject&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ms&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;ajax1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;1&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;ajax2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;2&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;ajax3&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;3&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function-variable function&quot;&gt;mergePromise&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ajaxArray &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;//填这里&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;mergePromise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;ajax1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ajax2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ajax3&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;done&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 分别输出&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 1&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 2&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 3&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// done&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// [1, 2, 3]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;分析&lt;/h2&gt;
&lt;p&gt;​	乍看题目没什么困难，要实现也可以强行用timeout延迟ajax2的调用。但是题目肯定不是做完就好了，就在想mergePromise能否写成能实现fc，而不是仅仅完成这一题。难点就在于如何解决forEach或者使用reduce后还能保持then的状态&lt;/p&gt;
&lt;h2&gt;我理解的Promise&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;所谓&lt;code class=&quot;language-text&quot;&gt;Promise&lt;/code&gt;，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;p&gt;  一旦状态改变，就不会再变，任何时候都可以得到这个结果。&lt;code class=&quot;language-text&quot;&gt;Promise&lt;/code&gt;对象的状态改变，只有两种可能：从&lt;code class=&quot;language-text&quot;&gt;pending&lt;/code&gt;变为&lt;code class=&quot;language-text&quot;&gt;fulfilled&lt;/code&gt;和从&lt;code class=&quot;language-text&quot;&gt;pending&lt;/code&gt;变为&lt;code class=&quot;language-text&quot;&gt;rejected&lt;/code&gt;。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对&lt;code class=&quot;language-text&quot;&gt;Promise&lt;/code&gt;对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 核心是要理解容器与状态改变后就不会再变的状态。所以根据这个特性可以拓展forEach只能同步执行的弱点，通过forEach将ajaxArray拼在一条Promise链中。&lt;/p&gt;
&lt;h2&gt;Promise学习&lt;/h2&gt;
&lt;h3&gt;一个简单的延时器&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ms&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;reject&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ms&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;   
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Promise嵌套&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; p1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reject&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;fail&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; p2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reject&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

p2
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// Error: fail&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面代码中，p1是一个 Promise，3 秒之后变为rejected。p2的状态在 1 秒之后改变，resolve方法返回的是p1。由于p2返回的是另一个 Promise，导致p2自己的状态无效了，由p1的状态决定p2的状态。所以，后面的then语句都变成针对后者（p1）。又过了 2 秒，p1变为rejected，导致触发catch方法指定的回调函数。&lt;/p&gt;
&lt;h3&gt;Promise.resolve()&lt;/h3&gt;
&lt;p&gt;有时需要将现有对象转为 Promise 对象，&lt;code class=&quot;language-text&quot;&gt;Promise.resolve&lt;/code&gt;方法就起到这个作用。&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Promise.resolve&lt;/code&gt;等价于下面的写法。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;foo&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 等价于&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resolve &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;foo&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;答案&lt;/h2&gt;
&lt;p&gt;构建顺序执行异步任务的基本块是&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; sequence &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
sequence &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sequence&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//deal item)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function-variable function&quot;&gt;mergePromise&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ajaxArray &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//起始的promise&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; sequence &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 存放数组中每一个promise的结果&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; ret &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//为了实现Promise链的延续，这里必须返回一个promise，而且返回值是ret&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;reslove&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reject&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; 
        ajaxArray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;func&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        	&lt;span class=&quot;token comment&quot;&gt;//这里的forEach是同步执行的&lt;/span&gt;
            sequence &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sequence&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                ret&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ret&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt;ajaxArray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;token function&quot;&gt;reslove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ret&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

            console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;!!!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sequence&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;mergePromise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;ajax1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ajax2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ajax3&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;done&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item></channel></rss>