{"data":{"site":{"siteMetadata":{"title":"酱香型猫砂盆","author":"xuzhanhh"}},"markdownRemark":{"id":"351744df-b3d1-5265-a694-9e77f722426e","html":"<p>翻译这个 <a href=\"https://github.com/reactjs/rfcs/pull/68#issuecomment-439314884\">issue</a></p>\n<h2>注入模型</h2>\n<p>​\t基本上，争论分解为想要交换(swap out)实现钩子的代码(the code that implements the hooks)。这类似于一般依赖注入和控制问题的反转(inversion of control problem)。React没有自己的依赖注入系统（不同于Angular）。通常他不需要这个因为大多数入口都是pull而不是push。对于其他代码，模块系统已经提供了良好的依赖注入边界，对于测试，我们倾向于推荐其他技术，例如在模块系统级别进行模拟（例如使用jest）</p>\n<p>​\t一些例外是像setState, replaceState, isMounted, findDOMNode, batchedUpdates等API，一个小的事实是React已经使用依赖注入将“updater”插入到Component base class。这是构造函数的第三个参数。该组件实际上不需要做任何事情。这就是让React在React ART或React Test Renderer等相同环境中的不同版本中具有多种不同类型的渲染器实现的原因。 自定义渲染器已经利用了这一点。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> ReactNoopUpdateQueue <span class=\"token keyword\">from</span> <span class=\"token string\">'./ReactNoopUpdateQueue'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n * Base class helpers for the updating state of a component.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Component</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> updater<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context <span class=\"token operator\">=</span> context<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// If a component has string refs, we will assign a different object later.</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>refs <span class=\"token operator\">=</span> emptyObject<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// We initialize the default updater but the real one gets injected by the</span>\n  <span class=\"token comment\">// renderer.</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>updater <span class=\"token operator\">=</span> updater <span class=\"token operator\">||</span> ReactNoopUpdateQueue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>​\t理论上，像React-clones这样的第三方库可以使用updater来注入他们的实现。实践中，大部分倾向于使用module shimming来替换整个react模块，因为他们有权衡或者想要实现其他API（例如， 移除dev模式内容或者将base classes和实现细节合并）</p>\n<p>​\t这些选项仍然保留在hooks的程序中。hooks的实现实际上没有在react包中实现，它只是调用当前的“调度程序”（dispatcher）。就如我上面解释的那样，可以暂时覆盖任何给定点的实现。这就是react渲染器（renderers）让多个渲染器共享相同API。例如，你可以让一个钩子测试调度程序（hooks test dispatcher）只是为了单元测试hooks。目前他有一个看起来很可怕的名字不过我们可以很容器的改变这个名词，这不是设计的缺陷（flaw of the design）。现在“调度程序（dispatcher）”可以移动到用户空间中，但是这会增加额外的噪音，这些噪音几乎从来不与单个组件的作者相关（but this adds additional noise for something that almost never is relevant to the author of an individual component），就像大多数人不知道React中的updater一样。</p>\n<p>​\t总的来说，我们可能会使用更多的静态函数调用因为他们更适合tree-shaking和更好地优化和内联。</p>\n<p>​\t另一个问题是hooks的主入口在react包中而不是第三方包，在未来很有可能其他代码会移除react包所以hooks会是剩下的大部分内容，所以包体积不需要担心。唯一的问题是hooks属于react下的而不是更通用的。例如，Vue曾经考虑过hooks API。但是hooks的关键是其原函数我们已经定义好的。这与Vue有完全不同的原函数。我们已经迭代了我们的函数。其他库可能会提出略有不同的原函数。在这一点上，过早地使这些过于笼统是没有意义的。第一次迭代在react包上的事实只是为了说明这就是我们对原函数的看法。如果存在重叠，那么就没有什么能阻止我们在第三方命名包上与其他库进行整合，并将反应的那些转发到该包。</p>\n<h2>依赖持续调用顺序</h2>\n<p>​\t要明确的是，执行顺序的依赖并不是我们真正想要的。 首先放置useState或useEffect或类似的东西并不重要。React有很多依赖于执行顺序的模式，只是因为在渲染中允许变异（这仍然使渲染本身变得纯净）。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> children <span class=\"token operator\">=</span> items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Item item<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">}</span> key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> header <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>Header<span class=\"token operator\">></span>Number <span class=\"token keyword\">of</span> items <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Header<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>​\t我不能在我的代码中只改变children和header的顺序。</p>\n<p>​\thooks不关心使用的顺序，它关系是否有持续每次都一样的顺序。这与调用之间隐含的依赖性非常不同。</p>\n<p>​\t最好不要依赖持久秩序 - 所有事情都是平等的。 但是，有一些权衡。 例如。 语法噪音或其他令人困惑的事情。</p>\n<p>​\tSome think that it is worth the cost for puritism reasons alone. However, some also have practical concerns.</p>\n<h2>API设计</h2>\n<h3>useReducer</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'reset'</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> initialState<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'increment'</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'decrement'</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\">// A reducer must always return a valid state.</span>\n      <span class=\"token comment\">// Alternatively you can throw an error if an invalid action is dispatched.</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>initialCount<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">:</span> initialCount<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      Count<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token punctuation\">:</span> <span class=\"token string\">'reset'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        Reset\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token punctuation\">:</span> <span class=\"token string\">'increment'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">+</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token punctuation\">:</span> <span class=\"token string\">'decrement'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">-</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这个会替换Redux吗？这回加重学习flux的负担吗？一般来说比起很多flux框架，Reducer是一个更狭隘的用例，Reducer非常简单，但是，如果你在学习Vue，Reason，Elm等框架/语言，调度和集中逻辑以在更高级别的状态之间转换的这种一般模式似乎取得了巨大成功。它还解决了React中带有回调的许多怪癖，为复杂的状态转换带来了更多直观的解决方案。特别是在并行（concurrent）的世界中。</p>\n<p>从代码体积上看，他不会增加任何非当前必须的代码，从概念上，我认为这是一个值得学习的概念，因为相同的模式不断以各种形式出现在各处。 最好有一个中央API来管理它。</p>\n<p>所以我认为比起useState，useReducer是更加核心的API。但是useState依然很棒因为对于简单的用例来说它非常简洁而且简易解释，不过大家应该尽早研究useReducer或其他相似的模式。</p>\n<p>也就是说，它也没有做Redux和其他Flux框架所做的很多事情。通常我认为你不会需要它，所以它可能不像现在那样普遍存在，但它仍然存在。</p>\n<h3>Context Provider</h3>\n<h3>useEffect</h3>\n<p>目前最奇怪的Hook是<code class=\"language-text\">useEffect</code>。需要明确的是，预计这是迄今为止最难使用的Hook，因为它正在使用命令式代码（interoping with imperative code）。命令式代码很难管理，这就是为什么我们试图保持声明式代码。但是，从声明式变为命令式很难，因为声明式可以处理更多不同类型的状态和每行代码的转换。 实现效果时，理想情况下也应处理所有这些情况。 这里的部分目标是鼓励处理更多情况。 如果这样做，那么一些怪癖是可以的。</p>","timeToRead":2,"frontmatter":{"title":"react hooks@seb","date":"December 11, 2018","spoiler":"随手翻译，我觉得dan会用人话再说一遍的。"},"fields":{"slug":"/react hooks@seb/"}}},"pageContext":{"slug":"/react hooks@seb/","previous":{"fields":{"slug":"/learning A Cartoon to Fiber/"},"frontmatter":{"title":"learning A Cartoon to Fiber"}},"next":{"fields":{"slug":"/Inside Fiber/"},"frontmatter":{"title":"Inside Fiber"}}}}