{"data":{"site":{"siteMetadata":{"title":"酱香型猫砂盆","author":"xuzhanhh"}},"markdownRemark":{"id":"65c8cb28-3f93-585f-af86-f0df0027daca","html":"<h2>交叉类型</h2>\n<p>在 JavaScript 中， <code class=\"language-text\">extend</code> 是一种非常常见的模式，在这种模式中，你可以从两个对象中创建一个新对象，新对象会拥有着两个对象所有的功能。交叉类型可以让你安全的使用此种模式</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> extend<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">:</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span> <span class=\"token operator\">&amp;</span> <span class=\"token constant\">U</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">&amp;</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> id <span class=\"token keyword\">in</span> first<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> first<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> id <span class=\"token keyword\">in</span> second<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> second<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token string\">'hello'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> b<span class=\"token punctuation\">:</span> <span class=\"token number\">42</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 现在 x 拥有了 a 属性与 b 属性</span>\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span></code></pre></div>\n<h2>type和interface的不同点</h2>\n<h3>type可以但是interface不行</h3>\n<ul>\n<li>\n<p>type可以声明基本类型别名，联合类型，元祖等类型</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 基本类型别名</span>\n<span class=\"token keyword\">type</span> Name <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span>\n\n<span class=\"token comment\">// 联合类型</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">wong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Cat</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">miao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Pet <span class=\"token operator\">=</span> Dog <span class=\"token operator\">|</span> Cat\n\n<span class=\"token comment\">// 具体定义数组每个位置的类型</span>\n<span class=\"token keyword\">type</span> PetList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>Dog<span class=\"token punctuation\">,</span> Pet<span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n<li>\n<p>type 语句中还可以使用 typeof 获取实例的 类型进行赋值</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 当你想获取一个变量的类型时，使用 typeof</span>\n<span class=\"token keyword\">let</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">B</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> div</code></pre></div>\n</li>\n<li>\n<p>其他骚操作</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> StringOrNumber <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">type</span> Text <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> text<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">type</span> NameLookup <span class=\"token operator\">=</span> Dictionary<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> Person<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">type</span> Callback<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">type</span> Pair<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">type</span> Coordinates <span class=\"token operator\">=</span> Pair<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">type</span> Tree<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> left<span class=\"token punctuation\">:</span> Tree<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">:</span> Tree<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<h3>interface可以但type不行</h3>\n<ul>\n<li>\n<p>interface能声明合并</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\nname<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\nage<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\nsex<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\nUser 接口为 {\nname: string\nage: number\nsex: string \n}\n*/</span></code></pre></div>\n</li>\n</ul>\n<h2>implements和extends的区别</h2>\n<ul>\n<li><strong>extends</strong> means:</li>\n</ul>\n<p>The <strong>new class is a child</strong>. It gets benefits coming with inheritance. It has all properties, methods as its parent. It can override some of these and implement new, but the parent stuff is already included.</p>\n<ul>\n<li><strong>implements</strong> means:</li>\n</ul>\n<p>The <strong>new class</strong> can be treated as <strong>the same “shape”</strong>, while <strong>it is not a child</strong>. It could be passed to any method where the <code class=\"language-text\">Person</code> is required, regardless of having different parent than <code class=\"language-text\">Person</code></p>","timeToRead":1,"frontmatter":{"title":"TypeScript备忘录","date":"April 10, 2019","spoiler":"学习笔记"},"fields":{"slug":"/TypeScript备忘录/"}}},"pageContext":{"slug":"/TypeScript备忘录/","previous":{"fields":{"slug":"/React中的Scheduler/"},"frontmatter":{"title":"React中的concurrent mode(1)"}},"next":{"fields":{"slug":"/React diff 中的 reconcileChildrenArray/"},"frontmatter":{"title":"React diff 中的 reconcileChildrenArray"}}}}