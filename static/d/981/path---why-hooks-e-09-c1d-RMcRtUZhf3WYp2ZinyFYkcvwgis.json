{"data":{"site":{"siteMetadata":{"title":"酱香型猫砂盆","author":"xuzhanhh"}},"markdownRemark":{"id":"88c71367-7d9a-5a79-abc3-61e385cb8ecb","html":"<h1>why hooks（一）</h1>\n<p>从hooks切入，深入了解React编程模型</p>\n<h2>前言</h2>\n<p>​\t简单说下为什么React选择函数式组件，主要是class组件比较冗余、生命周期函数写法不友好，functional组件更符合React编程思想。更具体的可以拜读dan大神的blog:<a href=\"https://overreacted.io/how-are-function-components-different-from-classes/\">传送门</a>。其中<strong>Function components capture the rendered values</strong>这句十分精辟的道出函数式组件的优势和.</p>\n<h2>useState 在React中是怎么实现的</h2>\n<blockquote>\n<p>Hooks take some getting used to — and especially at the boundary of imperative and declarative code.</p>\n</blockquote>\n<p>如果对hooks不太了解的可以先看看这篇文章:<a href=\"https://medium.com/@ryardley/react-hooks-not-magic-just-arrays-cd4f1857236e\">前情提要</a>，对hooks实现有个具体了解，下面开始分析代码。</p>\n<h3>hook的结构</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//hook的结构</span>\n<span class=\"token keyword\">export</span> type Hook <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  memoizedState<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">,</span> <span class=\"token comment\">//上一次的state</span>\n  baseState<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">,</span>  <span class=\"token comment\">//当前state</span>\n  baseUpdate<span class=\"token punctuation\">:</span> Update<span class=\"token operator\">&lt;</span>any<span class=\"token punctuation\">,</span> any<span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  queue<span class=\"token punctuation\">:</span> UpdateQueue<span class=\"token operator\">&lt;</span>any<span class=\"token punctuation\">,</span> any<span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">//用于缓存多次action</span>\n  next<span class=\"token punctuation\">:</span> Hook <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//链表</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> mountState<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n  initialState<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">S</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> Dispatch<span class=\"token operator\">&lt;</span>BasicStateAction<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token operator\">>></span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> hook <span class=\"token operator\">=</span> <span class=\"token function\">mountWorkInProgressHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//如果入参是func则会调用，但是不提供参数，带参数的需要包一层</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> initialState <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    initialState <span class=\"token operator\">=</span> <span class=\"token function\">initialState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//记忆化state和基本state都初始化</span>\n  hook<span class=\"token punctuation\">.</span>memoizedState <span class=\"token operator\">=</span> hook<span class=\"token punctuation\">.</span>baseState <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hook<span class=\"token punctuation\">.</span>queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    last<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    dispatch<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    eagerReducer<span class=\"token punctuation\">:</span> basicStateReducer<span class=\"token punctuation\">,</span> <span class=\"token comment\">// useState使用基础reducer</span>\n    eagerState<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//返回触发器</span>\n  <span class=\"token keyword\">const</span> dispatch<span class=\"token punctuation\">:</span> Dispatch<span class=\"token operator\">&lt;</span>\n    BasicStateAction<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>dispatch <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>dispatchAction<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// Flow doesn't know this is non-null, but we do.</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>currentlyRenderingFiber<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Fiber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    queue<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>hook<span class=\"token punctuation\">.</span>memoizedState<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">mountWorkInProgressHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Hook <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> hook<span class=\"token punctuation\">:</span> Hook <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    memoizedState<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    baseState<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    queue<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    baseUpdate<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    next<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>workInProgressHook <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 列表中的第一个hook</span>\n    firstWorkInProgressHook <span class=\"token operator\">=</span> workInProgressHook <span class=\"token operator\">=</span> hook<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 添加到列表的末尾</span>\n    workInProgressHook <span class=\"token operator\">=</span> workInProgressHook<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> hook<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> workInProgressHook<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","timeToRead":1,"frontmatter":{"title":"","date":null,"spoiler":null},"fields":{"slug":"/why hooks/"}}},"pageContext":{"slug":"/why hooks/","previous":{"fields":{"slug":"/All about generator/"},"frontmatter":{"title":"All about generator"}},"next":null}}