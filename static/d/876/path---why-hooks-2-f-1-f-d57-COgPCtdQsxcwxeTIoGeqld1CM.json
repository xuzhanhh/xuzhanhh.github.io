{"data":{"site":{"siteMetadata":{"title":"酱香型猫砂盆","author":"xuzhanhh"}},"markdownRemark":{"id":"026f8e13-d279-5222-9b1f-874cf9eb0fd2","html":"<h2>前言</h2>\n<p>​\t\t在<a href=\"https://xuzhanhh.com/why%20hooks/\">上一篇文章</a>中，我们梳理了useState的实现逻辑，得出是如果不考虑额外的优化逻辑，useState与fiber节点唯一的联系就是hooks队列是挂在fiber上的memoizedState，当React执行到当前函数式组件时会将其按序取出并更新。那么这一次我们来到了useEffect，这次的hook是与react-reconciler有很强的联系的，所以我们可以通过这个hooks打开react-reconciler的大门。</p>\n<h2>mountEffect &#x26; mountLayoutEffect</h2>\n<p>同样地，根据触发时间不同useEffect也分为两个func-mountEffect和updateEffect</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">mountEffect</span><span class=\"token punctuation\">(</span>\n  create<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">//副作用func</span>\n  deps<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>mixed<span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">//记忆化 用于什么时候触发</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">mountEffectImpl</span><span class=\"token punctuation\">(</span>\n    UpdateEffect <span class=\"token operator\">|</span> PassiveEffect<span class=\"token punctuation\">,</span> <span class=\"token comment\">// fiberEffectTag</span>\n    UnmountPassive <span class=\"token operator\">|</span> MountPassive<span class=\"token punctuation\">,</span> <span class=\"token comment\">// hookEffectTag</span>\n    create<span class=\"token punctuation\">,</span>\n    deps<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">mountLayoutEffect</span><span class=\"token punctuation\">(</span>\n  create<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>\n  deps<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>mixed<span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">mountEffectImpl</span><span class=\"token punctuation\">(</span>\n    UpdateEffect<span class=\"token punctuation\">,</span>  <span class=\"token comment\">//这里不同哦 不传passiveEffect</span>\n    UnmountMutation <span class=\"token operator\">|</span> MountLayout<span class=\"token punctuation\">,</span>\n    create<span class=\"token punctuation\">,</span>\n    deps<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>​\t\t通过代码可以看到mountEffect与mountLayoutEffect唯一的差别就是传入的fiberEffectTag和hookEffectTag不同，当然，这两个hook具体的差别可以看<a href=\"https://reactjs.org/docs/hooks-reference.html#uselayouteffect\">传送门</a>。</p>\n<p>​\t这边简单介绍下<code class=\"language-text\">useEffect</code>触发的时机是React commit完毕后异步执行，<code class=\"language-text\">useLayoutEffect</code>是React commit完毕后同步执行，如果在useLayoutEffect代码太重的话可能会导致线程阻塞，而useEffect则不会阻塞，因为他会在浏览器idle时间执行。这点我们会在后面的代码体现。</p>\n<p>​\t我们先抛开useLayoutEffect只看useEffect的逻辑：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">mountEffectImpl</span><span class=\"token punctuation\">(</span>fiberEffectTag<span class=\"token punctuation\">,</span> hookEffectTag<span class=\"token punctuation\">,</span> create<span class=\"token punctuation\">,</span> deps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> hook <span class=\"token operator\">=</span> <span class=\"token function\">mountWorkInProgressHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> nextDeps <span class=\"token operator\">=</span> deps <span class=\"token operator\">===</span> undefined <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">:</span> deps<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 在renderWithHooks中 currentlyRenderingFiber.effectTag|= sideEffectTag 付给当前fiber节点</span>\n  sideEffectTag <span class=\"token operator\">|=</span> fiberEffectTag<span class=\"token punctuation\">;</span>   \n  <span class=\"token comment\">// 创建effect</span>\n  hook<span class=\"token punctuation\">.</span>memoizedState <span class=\"token operator\">=</span> <span class=\"token function\">pushEffect</span><span class=\"token punctuation\">(</span>hookEffectTag<span class=\"token punctuation\">,</span> create<span class=\"token punctuation\">,</span> undefined<span class=\"token punctuation\">,</span> nextDeps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> FunctionComponentUpdateQueue <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  lastEffect<span class=\"token punctuation\">:</span> Effect <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">pushEffect</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> create<span class=\"token punctuation\">,</span> destroy<span class=\"token punctuation\">,</span> deps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> effect<span class=\"token punctuation\">:</span> Effect <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    tag<span class=\"token punctuation\">,</span>\n    create<span class=\"token punctuation\">,</span>\n    destroy<span class=\"token punctuation\">,</span>\n    deps<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 似拟 自圆</span>\n    next<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>componentUpdateQueue <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    componentUpdateQueue <span class=\"token operator\">=</span> <span class=\"token function\">createFunctionComponentUpdateQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//这个结构很简单的，看上面的type</span>\n    componentUpdateQueue<span class=\"token punctuation\">.</span>lastEffect <span class=\"token operator\">=</span> effect<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> effect<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如果只有他一个 自圆</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> lastEffect <span class=\"token operator\">=</span> componentUpdateQueue<span class=\"token punctuation\">.</span>lastEffect<span class=\"token punctuation\">;</span> <span class=\"token comment\">//这里的逻辑和useState的相同哦</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastEffect <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      componentUpdateQueue<span class=\"token punctuation\">.</span>lastEffect <span class=\"token operator\">=</span> effect<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> effect<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> firstEffect <span class=\"token operator\">=</span> lastEffect<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n      lastEffect<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> effect<span class=\"token punctuation\">;</span>\n      effect<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> firstEffect<span class=\"token punctuation\">;</span>\n      componentUpdateQueue<span class=\"token punctuation\">.</span>lastEffect <span class=\"token operator\">=</span> effect<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">//在memoizedState中仅作记录数据用</span>\n  <span class=\"token keyword\">return</span> effect<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>updateEffect</h2>\n<p>​\tupdateEffect的大体逻辑与mountEffect相同，主要是添加了pushEffect时从prevEffect取出了destroy函数并传入到pushEffect中，且进行依赖检查，如果相同则在hookEffect选择NoHookEffect，不更新memoizedState和不更新sideEffectTag三点。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 这个func和mountEffect没什么差别</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">updateEffect</span><span class=\"token punctuation\">(</span>\n  create<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>\n  deps<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>mixed<span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">updateEffectImpl</span><span class=\"token punctuation\">(</span>\n    UpdateEffect <span class=\"token operator\">|</span> PassiveEffect<span class=\"token punctuation\">,</span>\n    UnmountPassive <span class=\"token operator\">|</span> MountPassive<span class=\"token punctuation\">,</span>\n    create<span class=\"token punctuation\">,</span>\n    deps<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateEffectImpl</span><span class=\"token punctuation\">(</span>fiberEffectTag<span class=\"token punctuation\">,</span> hookEffectTag<span class=\"token punctuation\">,</span> create<span class=\"token punctuation\">,</span> deps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> hook <span class=\"token operator\">=</span> <span class=\"token function\">updateWorkInProgressHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> nextDeps <span class=\"token operator\">=</span> deps <span class=\"token operator\">===</span> undefined <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">:</span> deps<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> destroy <span class=\"token operator\">=</span> undefined<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 如果当前hook有数据，即更新状态</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentHook <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> prevEffect <span class=\"token operator\">=</span> currentHook<span class=\"token punctuation\">.</span>memoizedState<span class=\"token punctuation\">;</span>\n     <span class=\"token comment\">// 从上一次调用完sideEffect后的返回值取出destroy</span>\n    destroy <span class=\"token operator\">=</span> prevEffect<span class=\"token punctuation\">.</span>destroy<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextDeps <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> prevDeps <span class=\"token operator\">=</span> prevEffect<span class=\"token punctuation\">.</span>deps<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">areHookInputsEqual</span><span class=\"token punctuation\">(</span>nextDeps<span class=\"token punctuation\">,</span> prevDeps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 如果依赖不为空且两次依赖校验相同，则执行上面所说的三点</span>\n        <span class=\"token function\">pushEffect</span><span class=\"token punctuation\">(</span>NoHookEffect<span class=\"token punctuation\">,</span> create<span class=\"token punctuation\">,</span> destroy<span class=\"token punctuation\">,</span> nextDeps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  sideEffectTag <span class=\"token operator\">|=</span> fiberEffectTag<span class=\"token punctuation\">;</span>\n  hook<span class=\"token punctuation\">.</span>memoizedState <span class=\"token operator\">=</span> <span class=\"token function\">pushEffect</span><span class=\"token punctuation\">(</span>hookEffectTag<span class=\"token punctuation\">,</span> create<span class=\"token punctuation\">,</span> destroy<span class=\"token punctuation\">,</span> nextDeps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>跳出hooks</h2>\n<p>至此，useEffect在ReactFiberHooks.js里的逻辑已经没有了，剩下我们将跑入react-reconciler中。观察useEffect剩下的逻辑是怎么执行的。</p>","timeToRead":2,"frontmatter":{"title":"why hooks(2) — useEffect是怎么跑起来的","date":"March 22, 2019","spoiler":"从hooks切入，深入了解React编程模型"},"fields":{"slug":"/why hooks(2)/"}}},"pageContext":{"slug":"/why hooks(2)/","previous":{"fields":{"slug":"/css world(1)/"},"frontmatter":{"title":"神奇的CSS世界(1)"}},"next":null}}