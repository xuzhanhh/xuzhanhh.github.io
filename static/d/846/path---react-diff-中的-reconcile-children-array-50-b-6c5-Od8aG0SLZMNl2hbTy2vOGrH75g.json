{"data":{"site":{"siteMetadata":{"title":"酱香型猫砂盆","author":"xuzhanhh"}},"markdownRemark":{"id":"cade5e4b-de1d-5320-9272-0c33f4974d77","html":"<p>React在比对子fiber时，会根据子fiber类型在<code class=\"language-text\">reconcileChildFibers</code>里有不同的比对方案：<code class=\"language-text\">reconcileSingleElement</code>、<code class=\"language-text\">reconcileSinglePortal</code>、<code class=\"language-text\">reconcileSingleTextNode</code>、<code class=\"language-text\">reconcileChildrenArray</code>、<code class=\"language-text\">reconcileChildrenIterator</code>， 而<code class=\"language-text\">reconcileChildrenArray\u0010</code>是最为复杂的比对场景。</p>\n<h2>源码运行</h2>\n<p>具体的运行时代码就不一一展示了，大概就是下面的代码这种的变种，测试各种条件</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t   </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* {data === 0 ? &lt;span>{data}&lt;/span> : &lt;p>{data}&lt;/p>} */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>data <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onChange<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>input</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>data <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>代码分析：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">function</span> <span class=\"token function\">reconcileChildrenArray</span><span class=\"token punctuation\">(</span>\n    returnFiber<span class=\"token punctuation\">:</span> Fiber<span class=\"token punctuation\">,</span>\n    currentFirstChild<span class=\"token punctuation\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    newChildren<span class=\"token punctuation\">:</span> Array<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    expirationTime<span class=\"token punctuation\">:</span> ExpirationTime<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// 这个算法不能通过两端搜索进行优化因为React的Fibers节点上没有尾指针（backpointers）</span>\n    <span class=\"token comment\">// 我试图看看我们可以用这个模型得到多远。如果它最终不值得权衡，我们可以稍后添加它@Seb</span>\n    \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// dev的情况检查有没有重复key</span>\n      <span class=\"token keyword\">let</span> knownKeys <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> newChildren<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> child <span class=\"token operator\">=</span> newChildren<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        knownKeys <span class=\"token operator\">=</span> <span class=\"token function\">warnOnInvalidKey</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> knownKeys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> resultingFirstChild<span class=\"token punctuation\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> previousNewFiber<span class=\"token punctuation\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> oldFiber <span class=\"token operator\">=</span> currentFirstChild<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> lastPlacedIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> newIdx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> nextOldFiber <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 第一次遍历，快比较</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> oldFiber <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> newIdx <span class=\"token operator\">&lt;</span> newChildren<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> newIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldFiber<span class=\"token punctuation\">.</span>index <span class=\"token operator\">></span> newIdx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        nextOldFiber <span class=\"token operator\">=</span> oldFiber<span class=\"token punctuation\">;</span>\n        oldFiber <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        nextOldFiber <span class=\"token operator\">=</span> oldFiber<span class=\"token punctuation\">.</span>sibling<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">const</span> newFiber <span class=\"token operator\">=</span> <span class=\"token function\">updateSlot</span><span class=\"token punctuation\">(</span>\n        returnFiber<span class=\"token punctuation\">,</span>\n        oldFiber<span class=\"token punctuation\">,</span>\n        newChildren<span class=\"token punctuation\">[</span>newIdx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        expirationTime<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newFiber <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 如果fiber节点为null这种空插槽或同index下fiber类型不同会跳出快比较，这会导致慢比较</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldFiber <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          oldFiber <span class=\"token operator\">=</span> nextOldFiber<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shouldTrackSideEffects<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldFiber <span class=\"token operator\">&amp;&amp;</span> newFiber<span class=\"token punctuation\">.</span>alternate <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t   <span class=\"token comment\">// 如果是更新时候则需要删除旧节点</span>\n          <span class=\"token function\">deleteChild</span><span class=\"token punctuation\">(</span>returnFiber<span class=\"token punctuation\">,</span> oldFiber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      lastPlacedIndex <span class=\"token operator\">=</span> <span class=\"token function\">placeChild</span><span class=\"token punctuation\">(</span>newFiber<span class=\"token punctuation\">,</span> lastPlacedIndex<span class=\"token punctuation\">,</span> newIdx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>previousNewFiber <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// TODO: Move out of the loop. This only happens for the first run.</span>\n        resultingFirstChild <span class=\"token operator\">=</span> newFiber<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// TODO: Defer siblings if we're not at the right index for this slot.</span>\n        <span class=\"token comment\">// I.e. if we had null values before, then we want to defer this</span>\n        <span class=\"token comment\">// for each null value. However, we also don't want to call updateSlot</span>\n        <span class=\"token comment\">// with the previous one.</span>\n        previousNewFiber<span class=\"token punctuation\">.</span>sibling <span class=\"token operator\">=</span> newFiber<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      previousNewFiber <span class=\"token operator\">=</span> newFiber<span class=\"token punctuation\">;</span>\n      oldFiber <span class=\"token operator\">=</span> nextOldFiber<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newIdx <span class=\"token operator\">===</span> newChildren<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 新孩子节点已经遍历完成，可以删除剩下的老节点</span>\n      <span class=\"token function\">deleteRemainingChildren</span><span class=\"token punctuation\">(</span>returnFiber<span class=\"token punctuation\">,</span> oldFiber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> resultingFirstChild<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldFiber <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 如果老孩子节点已经遍历完成，意味着剩下的新节点都会被插入，直接批处理</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> newIdx <span class=\"token operator\">&lt;</span> newChildren<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> newIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> newFiber <span class=\"token operator\">=</span> <span class=\"token function\">createChild</span><span class=\"token punctuation\">(</span>\n          returnFiber<span class=\"token punctuation\">,</span>\n          newChildren<span class=\"token punctuation\">[</span>newIdx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n          expirationTime<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>newFiber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        lastPlacedIndex <span class=\"token operator\">=</span> <span class=\"token function\">placeChild</span><span class=\"token punctuation\">(</span>newFiber<span class=\"token punctuation\">,</span> lastPlacedIndex<span class=\"token punctuation\">,</span> newIdx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>previousNewFiber <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// TODO: Move out of the loop. This only happens for the first run.</span>\n          resultingFirstChild <span class=\"token operator\">=</span> newFiber<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          previousNewFiber<span class=\"token punctuation\">.</span>sibling <span class=\"token operator\">=</span> newFiber<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        previousNewFiber <span class=\"token operator\">=</span> newFiber<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> resultingFirstChild<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 为了快速查找，将所有旧fiber根据key和index存到map中</span>\n    <span class=\"token keyword\">const</span> existingChildren <span class=\"token operator\">=</span> <span class=\"token function\">mapRemainingChildren</span><span class=\"token punctuation\">(</span>returnFiber<span class=\"token punctuation\">,</span> oldFiber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 慢比较</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> newIdx <span class=\"token operator\">&lt;</span> newChildren<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> newIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 如果有旧节点，复用。如果没有则创建新的fiber</span>\n      <span class=\"token keyword\">const</span> newFiber <span class=\"token operator\">=</span> <span class=\"token function\">updateFromMap</span><span class=\"token punctuation\">(</span>\n        existingChildren<span class=\"token punctuation\">,</span>\n        returnFiber<span class=\"token punctuation\">,</span>\n        newIdx<span class=\"token punctuation\">,</span>\n        newChildren<span class=\"token punctuation\">[</span>newIdx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        expirationTime<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newFiber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shouldTrackSideEffects<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newFiber<span class=\"token punctuation\">.</span>alternate <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 如果复用了旧fiber节点，则将其从当前孩子列表中移除，避免稍后的删除</span>\n            existingChildren<span class=\"token punctuation\">.</span><span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span>\n              newFiber<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> newIdx <span class=\"token punctuation\">:</span> newFiber<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        lastPlacedIndex <span class=\"token operator\">=</span> <span class=\"token function\">placeChild</span><span class=\"token punctuation\">(</span>newFiber<span class=\"token punctuation\">,</span> lastPlacedIndex<span class=\"token punctuation\">,</span> newIdx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 拼接fiber节点</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>previousNewFiber <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          resultingFirstChild <span class=\"token operator\">=</span> newFiber<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          previousNewFiber<span class=\"token punctuation\">.</span>sibling <span class=\"token operator\">=</span> newFiber<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        previousNewFiber <span class=\"token operator\">=</span> newFiber<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shouldTrackSideEffects<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 将没有复用的旧fiber节点删除</span>\n      existingChildren<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>child <span class=\"token operator\">=></span> <span class=\"token function\">deleteChild</span><span class=\"token punctuation\">(</span>returnFiber<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> resultingFirstChild<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ps: 居然还有三个三年前就留下的TODO。</p>\n<h2>细节分析</h2>\n<p>快比较循环，先遍历新元素链，找到index相同的元素，主要判断key是否相同，相同的话update老节点生成新节点newFiber。如果遍历到的相同index而元素不相等或为null的情况则结束第一个循环。</p>\n<p>第一次遍历完后：</p>\n<ul>\n<li>新链结束老链没有：把老链中剩余的fiber都删除</li>\n<li>老链结束新链没有：把新链中剩下的都插入</li>\n<li>如果函数到现在还没return，则进入慢比较循环：把老链按key放入map里，遍历新链，从老链中找和新链key相同的fiber，更新成newfiber，供后面赋值给previousNewFiber构成新链中的一环并进行下一轮循环，也是个链表元素移动的过程，再将老链中该元素删除。遍历处理完所有newChildren生成新链后，删除老链中剩下的元素</li>\n</ul>","timeToRead":2,"frontmatter":{"title":"React diff 中的 reconcileChildrenArray","date":"April 20, 2019","spoiler":"剖析O(n)的diff算法是怎么样的"},"fields":{"slug":"/React diff 中的 reconcileChildrenArray/"}}},"pageContext":{"slug":"/React diff 中的 reconcileChildrenArray/","previous":{"fields":{"slug":"/TypeScript备忘录/"},"frontmatter":{"title":"TypeScript备忘录"}},"next":null}}