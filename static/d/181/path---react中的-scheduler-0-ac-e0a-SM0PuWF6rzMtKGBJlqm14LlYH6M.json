{"data":{"site":{"siteMetadata":{"title":"酱香型猫砂盆","author":"xuzhanhh"}},"markdownRemark":{"id":"f85f470b-f6e1-59c9-b0f4-ebfc9aed753c","html":"<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestIdleCallback\">https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestIdleCallback</a></p>\n<p><a href=\"https://medium.com/@paul_irish/requestanimationframe-scheduling-for-nerds-9c57f7438ef4\">https://medium.com/@paul_irish/requestanimationframe-scheduling-for-nerds-9c57f7438ef4</a></p>\n<h2>React中的requestIdleCallback</h2>\n<blockquote>\n<p>剩下的代码是实质上是requestIdleCallback的polyfill，通过调度rAF，存储帧开始的时间，然后在绘制(paint)后安排一个postMessage请求。\n在postMessage处理逻辑中，React会在有限的时间中尽可能的多工作。\n通过将空闲调用(idle call)拆分到多次event tick，我们可以确保布局(layout), 绘制(paint)和其他浏览器工作在有效的时间中能正常的工作，而且帧率是动态调整的。</p>\n</blockquote>\n<h3>初始化处理</h3>\n<blockquote>\n<p>React会先从需要的全局引用中捕获到本地引用，以防在代码执行的后续过程中全局引用受到改动导致不一致。</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> localDate <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> localSetTimeout <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> setTimeout <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">?</span> setTimeout <span class=\"token punctuation\">:</span> undefined<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> localClearTimeout <span class=\"token operator\">=</span>\n  <span class=\"token keyword\">typeof</span> clearTimeout <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">?</span> clearTimeout <span class=\"token punctuation\">:</span> undefined<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> localRequestAnimationFrame <span class=\"token operator\">=</span>\n  <span class=\"token keyword\">typeof</span> requestAnimationFrame <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span>\n    <span class=\"token operator\">?</span> requestAnimationFrame\n    <span class=\"token punctuation\">:</span> undefined<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> localCancelAnimationFrame <span class=\"token operator\">=</span>\n  <span class=\"token keyword\">typeof</span> cancelAnimationFrame <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">?</span> cancelAnimationFrame <span class=\"token punctuation\">:</span> undefined<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> getCurrentTime<span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>当页面不在前台时rAF不会运行。如果页面在后台则需要调度工作继续进行，因为页面需要继续加载。</p>\n<p>因此React会用setTimeout继续调度作为备用。</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token constant\">ANIMATION_FRAME_TIMEOUT</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> rAFID<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> rAFTimeoutID<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">requestAnimationFrameWithTimeout</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 触发一个rAF和setTimeout</span>\n  rAFID <span class=\"token operator\">=</span> <span class=\"token function\">localRequestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>timestamp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 触发了rAF则取消setTimeout</span>\n    <span class=\"token function\">localClearTimeout</span><span class=\"token punctuation\">(</span>rAFTimeoutID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>timestamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  rAFTimeoutID <span class=\"token operator\">=</span> <span class=\"token function\">localSetTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 触发了setTimeout则取消rAF</span>\n    <span class=\"token function\">localCancelAnimationFrame</span><span class=\"token punctuation\">(</span>rAFID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token function\">getCurrentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">ANIMATION_FRAME_TIMEOUT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>​\t在初始化完成后，React会根据是否有window，messageChannel等对象判断当前运行环境，执行不同的流程。这里只看正常的浏览器环境。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">var</span> scheduledHostCallback <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> isMessageEventScheduled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> timeoutTime <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> isAnimationFrameScheduled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> isFlushingHostCallback <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> frameDeadline <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// React假设从30fps开始并通过启发式的跟踪调整速度。如果有更频繁的动画帧则frameTime更少</span>\n  <span class=\"token keyword\">var</span> previousFrameTime <span class=\"token operator\">=</span> <span class=\"token number\">33</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> activeFrameTime <span class=\"token operator\">=</span> <span class=\"token number\">33</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function-variable function\">shouldYieldToHost</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> frameDeadline <span class=\"token operator\">&lt;=</span> <span class=\"token function\">getCurrentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// React使用postMessage手段去延迟空闲工作的时间在重绘(repaint)之后</span>\n  <span class=\"token keyword\">var</span> channel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MessageChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> port <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">.</span>port2<span class=\"token punctuation\">;</span></code></pre></div>\n<p>为了阅读更清晰，下面的代码顺序与React源码中的不太相同。</p>\n<h3>requestHostCallback&#x26;&#x26;cancelHostCallback</h3>\n<p>rIC的polyfill中最外层的代码是<strong>requestHostCallback</strong>和<strong>cancelHostCallback</strong>。requestHostCallback的入参和rIC的相似，传入需要调用的函数和必须执行时间。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token function-variable function\">requestHostCallback</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">,</span> absoluteTimeout<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    scheduledHostCallback <span class=\"token operator\">=</span> callback<span class=\"token punctuation\">;</span>\n    timeoutTime <span class=\"token operator\">=</span> absoluteTimeout<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isFlushingHostCallback <span class=\"token operator\">||</span> absoluteTimeout <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 如果上一个callback正在执行中或者absoluteTimeout&lt;0，不等待下一帧，在一个新postMessage中尽快执行</span>\n      port<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>undefined<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isAnimationFrameScheduled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 如果当前没有调度的rAF,调度一个</span>\n      <span class=\"token comment\">// TODO: 如果因为浏览器节流导致rAF没有被触发，React考虑使用setTimeout触发rIC确保执行工作</span>\n      isAnimationFrameScheduled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">requestAnimationFrameWithTimeout</span><span class=\"token punctuation\">(</span>animationTick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function-variable function\">cancelHostCallback</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 清空数据</span>\n    scheduledHostCallback <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    isMessageEventScheduled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    timeoutTime <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>animationTick</h3>\n<p>animationTick是React传入rAF中的回调函数</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">animationTick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>rafTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>scheduledHostCallback <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Eagerly schedule the next animation callback at the beginning of the</span>\n      <span class=\"token comment\">// frame. If the scheduler queue is not empty at the end of the frame, it</span>\n      <span class=\"token comment\">// will continue flushing inside that callback. If the queue *is* empty,</span>\n      <span class=\"token comment\">// then it will exit immediately. Posting the callback at the start of the</span>\n      <span class=\"token comment\">// frame ensures it's fired within the earliest possible frame. If we</span>\n      <span class=\"token comment\">// waited until the end of the frame to post the callback, we risk the</span>\n      <span class=\"token comment\">// browser skipping a frame and not firing the callback until the frame</span>\n      <span class=\"token comment\">// after that.</span>\n      <span class=\"token function\">requestAnimationFrameWithTimeout</span><span class=\"token punctuation\">(</span>animationTick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// No pending work. Exit.</span>\n      isAnimationFrameScheduled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">var</span> nextFrameTime <span class=\"token operator\">=</span> rafTime <span class=\"token operator\">-</span> frameDeadline <span class=\"token operator\">+</span> activeFrameTime<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n      nextFrameTime <span class=\"token operator\">&lt;</span> activeFrameTime <span class=\"token operator\">&amp;&amp;</span>\n      previousFrameTime <span class=\"token operator\">&lt;</span> activeFrameTime\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextFrameTime <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Defensive coding. We don't support higher frame rates than 120hz.</span>\n        <span class=\"token comment\">// If the calculated frame time gets lower than 8, it is probably a bug.</span>\n        nextFrameTime <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// If one frame goes long, then the next one can be short to catch up.</span>\n      <span class=\"token comment\">// If two frames are short in a row, then that's an indication that we</span>\n      <span class=\"token comment\">// actually have a higher frame rate than what we're currently optimizing.</span>\n      <span class=\"token comment\">// We adjust our heuristic dynamically accordingly. For example, if we're</span>\n      <span class=\"token comment\">// running on 120hz display or 90hz VR display.</span>\n      <span class=\"token comment\">// Take the max of the two in case one of them was an anomaly due to</span>\n      <span class=\"token comment\">// missed frame deadlines.</span>\n      activeFrameTime <span class=\"token operator\">=</span>\n        nextFrameTime <span class=\"token operator\">&lt;</span> previousFrameTime <span class=\"token operator\">?</span> previousFrameTime <span class=\"token punctuation\">:</span> nextFrameTime<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      previousFrameTime <span class=\"token operator\">=</span> nextFrameTime<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    frameDeadline <span class=\"token operator\">=</span> rafTime <span class=\"token operator\">+</span> activeFrameTime<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isMessageEventScheduled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      isMessageEventScheduled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      port<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>undefined<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  channel<span class=\"token punctuation\">.</span>port1<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    isMessageEventScheduled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> prevScheduledCallback <span class=\"token operator\">=</span> scheduledHostCallback<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> prevTimeoutTime <span class=\"token operator\">=</span> timeoutTime<span class=\"token punctuation\">;</span>\n    scheduledHostCallback <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    timeoutTime <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> currentTime <span class=\"token operator\">=</span> <span class=\"token function\">getCurrentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> didTimeout <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>frameDeadline <span class=\"token operator\">-</span> currentTime <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// There's no time left in this idle period. Check if the callback has</span>\n      <span class=\"token comment\">// a timeout and whether it's been exceeded.</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevTimeoutTime <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> prevTimeoutTime <span class=\"token operator\">&lt;=</span> currentTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Exceeded the timeout. Invoke the callback even though there's no</span>\n        <span class=\"token comment\">// time left.</span>\n        didTimeout <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// No timeout.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isAnimationFrameScheduled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// Schedule another animation callback so we retry later.</span>\n          isAnimationFrameScheduled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">requestAnimationFrameWithTimeout</span><span class=\"token punctuation\">(</span>animationTick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// Exit without invoking the callback.</span>\n        scheduledHostCallback <span class=\"token operator\">=</span> prevScheduledCallback<span class=\"token punctuation\">;</span>\n        timeoutTime <span class=\"token operator\">=</span> prevTimeoutTime<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevScheduledCallback <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      isFlushingHostCallback <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">prevScheduledCallback</span><span class=\"token punctuation\">(</span>didTimeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n        isFlushingHostCallback <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","timeToRead":4,"frontmatter":{"title":"React中的Scheduler","date":"April 06, 2019","spoiler":"并行模式没什么难的，我们从Scheduler开始学起。"},"fields":{"slug":"/React中的Scheduler/"}}},"pageContext":{"slug":"/React中的Scheduler/","previous":{"fields":{"slug":"/why hooks(2)/"},"frontmatter":{"title":"why hooks(2) — useEffect是怎么跑起来的"}},"next":null}}