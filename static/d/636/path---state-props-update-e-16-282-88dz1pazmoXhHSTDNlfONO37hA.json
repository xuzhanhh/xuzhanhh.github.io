{"data":{"site":{"siteMetadata":{"title":"酱香型猫砂盆","author":"xuzhanhh"}},"markdownRemark":{"id":"ea8cfa21-a625-585a-a4a0-f7228c379019","html":"<p>Demo:</p>\n<p><a href=\"https://stackblitz.com/edit/react-jwqn64\">https://stackblitz.com/edit/react-jwqn64</a></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ClickCounter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Update counter</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当我们点击button时，我们可以看到<a href=\"https://github.com/facebook/react/blob/cbbc2b6c4d0d8519145560bd8183ecde55168b12/packages/react-reconciler/src/ReactFiberCompleteWork.js#L532\"><strong>completeWork</strong></a>：</p>\n<ul>\n<li>更新<code class=\"language-text\">ClickCounter</code>中的count state</li>\n<li>调用<code class=\"language-text\">render</code>方法去得到children列表并执行比较</li>\n<li>更新<code class=\"language-text\">span</code>元素的props</li>\n</ul>\n<p>在<a href=\"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L523\"><strong>commitRoot</strong></a>：</p>\n<ul>\n<li>更新<code class=\"language-text\">span</code>元素的<code class=\"language-text\">textContent</code>属性</li>\n<li>调用<code class=\"language-text\">cDU</code></li>\n</ul>\n<h2>render阶段</h2>\n<h3>Scheduling updates（安排更新）</h3>\n<p>​\t当我们点击按钮，会触发点击事件然后react解析我们传给按钮props的callback。在这个应用中callback是增加counter并更新state。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ClickCounter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...</span>\n    <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>   </code></pre></div>\n<p>​\t\t每一个React组件都有一个<code class=\"language-text\">updater</code>作为组件和react核心通信的桥梁。他允许<code class=\"language-text\">setState</code>在不同的环境下（ReactDOM，RN， SSR， test）实现不同的效果</p>\n<blockquote>\n<p>注：关于updater，可以关联学习dan大神博客的<a href=\"https://overreacted.io/how-does-setstate-know-what-to-do/\">How Does setState Know What to Do?</a> </p>\n</blockquote>\n<p>​\t在这篇文章中，我们会侧重ReactDom的使用了Fiber reconciler的updater实现，对于<code class=\"language-text\">ClickCounter</code>组件是<a href=\"https://github.com/facebook/react/blob/6938dcaacbffb901df27782b7821836961a5b68d/packages/react-reconciler/src/ReactFiberClassComponent.js#L186\"><strong>classComponentUpdater</strong></a>，他负责检索fiber实例，队列更新和安排工作。</p>\n<p>​\t当更新排队时，他们基本上只是被添加到fiber节点上处理的更新队列中。在我们的实例中，与ClickCounter组件对应的fiber节点有以下的结构</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n    stateNode<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClickCounter</span><span class=\"token punctuation\">,</span>\n    type<span class=\"token punctuation\">:</span> ClickCounter<span class=\"token punctuation\">,</span>\n    updateQueue<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n         baseState<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span>\n         firstUpdate<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n             next<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                 payload<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n             <span class=\"token punctuation\">}</span>\n         <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n         <span class=\"token operator\">...</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n     <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们可以看到，<code class=\"language-text\">updateQueue.firstUpdate.next.payload</code>中的函数是我们传给<code class=\"language-text\">ClickCounter</code>组件中setState的callback。他表示在render阶段需要被处理的第一个更新。</p>\n<h3>处理ClickCounter Fiber结点的更新</h3>\n<p>​\t我们已经有一个ClickCounter实例，所以我们进入<a href=\"https://github.com/facebook/react/blob/6938dcaacbffb901df27782b7821836961a5b68d/packages/react-reconciler/src/ReactFiberClassComponent.js#L976\"><strong>updateClassInstance</strong></a>函数，这里是react对class组件执行最多操作的函数。以下是按执行顺序在函数中执行的最重要的操作：</p>\n<ul>\n<li>调用<strong>UNSAFE_componentWillReceiveProps</strong>钩子（在react v17中弃用）</li>\n<li>执行<strong>updateQueue</strong>中的更新并生成新的state</li>\n<li>用新的state调用<strong>getDerivedStateFromProps</strong>并得到结果</li>\n<li>调用<strong>sCU</strong>确定一个组件是否需要更新，如果<strong>false</strong>，跳过整个渲染过程</li>\n<li>调用<strong>UNSAFE_componentWillUpdate</strong>钩子（在react v17中弃用）</li>\n<li>添加一个effect去触发<strong>componentDidUpdate</strong>钩子</li>\n</ul>\n<blockquote>\n<p><strong>cDU</strong>这个effect在<strong>render</strong>阶段中被添加，但是在<strong>commit</strong>中执行</p>\n</blockquote>\n<ul>\n<li>更新组件实例的<strong>state</strong>和<strong>props</strong></li>\n</ul>\n<p>函数简化后如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateClassInstance</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> workInProgress<span class=\"token punctuation\">,</span> ctor<span class=\"token punctuation\">,</span> newProps<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>stateNode<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> oldProps <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>memoizedProps<span class=\"token punctuation\">;</span>\n    instance<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> oldProps<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldProps <span class=\"token operator\">!==</span> newProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">callComponentWillReceiveProps</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">,</span> newProps<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> updateQueue <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>updateQueue<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>updateQueue <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">processUpdateQueue</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">,</span> updateQueue<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        newState <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>memoizedState<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">applyDerivedStateFromProps</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    newState <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>memoizedState<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> shouldUpdate <span class=\"token operator\">=</span> <span class=\"token function\">checkShouldComponentUpdate</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">,</span> ctor<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shouldUpdate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        instance<span class=\"token punctuation\">.</span><span class=\"token function\">componentWillUpdate</span><span class=\"token punctuation\">(</span>newProps<span class=\"token punctuation\">,</span> newState<span class=\"token punctuation\">,</span> nextContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        workInProgress<span class=\"token punctuation\">.</span>effectTag <span class=\"token operator\">|=</span> Update<span class=\"token punctuation\">;</span>\n        workInProgress<span class=\"token punctuation\">.</span>effectTag <span class=\"token operator\">|=</span> Snapshot<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    instance<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> newProps<span class=\"token punctuation\">;</span>\n    instance<span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> newState<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> shouldUpdate<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面的代码片段移除了一些辅助代码。例如，在调用生命周期方法或添加effect来触发它们时，react会用<strong>typeof</strong>检查一个组件是否实现了这些方法。下面是react在添加effect前检查<strong>cDU</strong>方法</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> instance<span class=\"token punctuation\">.</span>componentDidUpdate <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    workInProgress<span class=\"token punctuation\">.</span>effectTag <span class=\"token operator\">|=</span> Update<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>好的，现在我们知道在render阶段<strong>ClickCounter</strong>会执行什么操作，现在让我们看看这些操作是怎么改变fiber节点的值。当react开始工作前，<strong>ClickCounter</strong>的fiber节点：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n    effectTag<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    elementType<span class=\"token punctuation\">:</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClickCounter</span><span class=\"token punctuation\">,</span>\n    firstEffect<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    memoizedState<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    type<span class=\"token punctuation\">:</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClickCounter</span><span class=\"token punctuation\">,</span>\n    stateNode<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        state<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    updateQueue<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        baseState<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        firstUpdate<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            next<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                payload<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>…<span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在工作完成后，fiber节点是这样的：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n    effectTag<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n    elementType<span class=\"token punctuation\">:</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClickCounter</span><span class=\"token punctuation\">,</span>\n    firstEffect<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    memoizedState<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    type<span class=\"token punctuation\">:</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClickCounter</span><span class=\"token punctuation\">,</span>\n    stateNode<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        state<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    updateQueue<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        baseState<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        firstUpdate<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n        <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在更新被执行后，<strong>count</strong>的值在<strong>memoized</strong>和<strong>updateQueue</strong>中的<strong>baseState</strong>变成了<strong>1</strong>。react也更新了<strong>ClickCounter</strong>组件实例中的state(stateNode)。</p>\n<p>在这个时候，队列中已经没有更新了，所以<strong>firstUpdate</strong>是<strong>null</strong>。而且<strong>effectTag</strong>从0->4，二进制中是100，即第三位设了1，意义是 <a href=\"https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/shared/ReactSideEffectTags.js\">side-effect tag</a>中的<strong>Update</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> Update <span class=\"token operator\">=</span> <span class=\"token number\">0b00000000100</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>总结，当在处理ClickCounter fiber节点时，react调用更新前的生命周期，更新state和定义相应的side-effects。</p>\n<h3>Reconciling children for the ClickCounter Fiber</h3>\n<p>下一步，react开始 <a href=\"https://github.com/facebook/react/blob/340bfd9393e8173adca5380e6587e1ea1a23cefa/packages/react-reconciler/src/ReactFiberBeginWork.js#L355\">finishClassComponent</a>，在这里react会调用react组件实例的<strong>render</strong>方法并在组件返回的的孩子上应用diff算法。更高阶的概述在这个<a href=\"https://reactjs.org/docs/reconciliation.html#the-diffing-algorithm\">文档</a>。</p>\n<blockquote>\n<p>当比较两个相同类型的React DOM元素时，React查看两者的属性，保持相同的底层DOM节点，并仅更新更改的属性。</p>\n</blockquote>\n<p>如果我们深入挖掘，我们会发现实际上是比较react元素的fiber节点，但我现在不会详细介绍，因为这个过程非常精细。我会写一篇单独的文章，特别关注child reconciliation。</p>\n<blockquote>\n<p>如果您急于自己学习细节，查看<a href=\"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactChildFiber.js#L732\">reconcileChildrenArray</a>函数因为我们这个应用的render方法返回了一个react元素的数组。</p>\n</blockquote>\n<p>我们需要理解两个重要的概念：</p>\n<ol>\n<li>\n<p>当react执行child reconciliation时，他创建或更新render方法返回的reac元素的fiber节点。<strong>finishClassComponent</strong>函数返回当前fiber节点第一个孩子的引用。它会分配到<strong>nextUnitOfWork</strong>并在稍后的work loop中处理。</p>\n</li>\n<li>\n<p>react更新children的props作为parent工作的一部分。为此，它使用来自render方法返回的React元素的数据。例如，这是<strong>span</strong>在react reconcile之前的fiber节点</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n   stateNode<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HTMLSpanElement</span><span class=\"token punctuation\">,</span>\n   type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"span\"</span><span class=\"token punctuation\">,</span>\n   key<span class=\"token punctuation\">:</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span>\n   memoizedProps<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   pendingProps<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看到，<strong>memoizedProps</strong>和<strong>pendingProps</strong>中的<strong>children</strong>是<strong>0</strong>，这里是span元素被render后返回的react元素</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n   $$<span class=\"token keyword\">typeof</span><span class=\"token punctuation\">:</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span>react<span class=\"token punctuation\">.</span>element<span class=\"token punctuation\">)</span>\n   key<span class=\"token punctuation\">:</span> <span class=\"token string\">\"2\"</span>\n   props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n   ref<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n   type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"span\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看到，fiber节点中的props和被返回的react元素有不同，在<a href=\"https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/react-reconciler/src/ReactFiber.js#L326\"><strong>createWorkInProgress</strong></a>函数中创建alternate fiber节点，<strong>react会从react元素中有更新的属性中复制到fiber节点</strong>。所以，当react结束<strong>ClickCouter</strong>组件的child reconciliation，<strong>span</strong>的fiber节点会更新<strong>pendingProps</strong>属性。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n   stateNode<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HTMLSpanElement</span><span class=\"token punctuation\">,</span>\n   type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"span\"</span><span class=\"token punctuation\">,</span>\n   key<span class=\"token punctuation\">:</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span>\n   memoizedProps<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   pendingProps<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当react执行span fiber节点工作时，会将pendingProps复制到<strong>memoizedProps</strong>中并添加一个effects去更新DOM。</p>\n</li>\n</ol>\n<p>   这就是render阶段react在<strong>ClickCounter</strong> fiber节点上的工作。因为button是ClickCounter组件的第一个孩子，他会被分配到<strong>nextUnitOfWork</strong>，且他没什么卵事要干，所以react会移动到他的兄弟节点—span。</p>\n<h3>Processing updates for the Span fiber</h3>\n<p>与<strong>ClickCounter</strong>相似，从<a href=\"https://github.com/facebook/react/blob/cbbc2b6c4d0d8519145560bd8183ecde55168b12/packages/react-reconciler/src/ReactFiberBeginWork.js#L1489\">beginWork</a>函数开始。因为<strong>span</strong>节点是<strong>HostComponent</strong>类型，所以：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">beginWork</span><span class=\"token punctuation\">(</span>current$$<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> workInProgress<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> FunctionalComponent<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">case</span> ClassComponent<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">case</span> HostComponent<span class=\"token punctuation\">:</span>\n          <span class=\"token keyword\">return</span> <span class=\"token function\">updateHostComponent</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> workInProgress<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在<a href=\"https://github.com/facebook/react/blob/cbbc2b6c4d0d8519145560bd8183ecde55168b12/packages/react-reconciler/src/ReactFiberBeginWork.js#L686\">updateHostComponent</a>结束。可以与class组件调用的<strong>updateClassComponent</strong>对比。对于函数式组件是<strong>updateFunctionComponent</strong>。你可以在<a href=\"https://github.com/facebook/react/blob/1034e26fe5e42ba07492a736da7bdf5bf2108bc6/packages/react-reconciler/src/ReactFiberBeginWork.js\"><strong>ReactFiberBeginWork.js</strong></a>中找到所有这些函数。</p>\n<h3>Reconciling children for the span fiber</h3>\n<p>在我们的例子中，span节点的<strong>updateHostComponent</strong>中没有特别重要的事情发生。</p>\n<h3>Completing work for the Span Fiber node</h3>\n<p>当<strong>beginWork</strong>结束后，会进入<strong>completeWork</strong>。不过在这之前，react需要更新span fiber节点上的<strong>memoizedProps</strong>，你可能还记得当<strong>ClickCounter</strong>上reconciling children时，react更新了span fiber节点的<strong>pendingProps</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//这是之前的</span>\n<span class=\"token punctuation\">{</span>\n    stateNode<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HTMLSpanElement</span><span class=\"token punctuation\">,</span>\n    type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"span\"</span><span class=\"token punctuation\">,</span>\n    key<span class=\"token punctuation\">:</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span>\n    memoizedProps<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    pendingProps<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当<strong>span</strong>的fiber<strong>beginWork</strong>完成后，react更新pendingProps以匹配memoizedProps</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">performUnitOfWork</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    next <span class=\"token operator\">=</span> <span class=\"token function\">beginWork</span><span class=\"token punctuation\">(</span>current$$<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> workInProgress<span class=\"token punctuation\">,</span> nextRenderExpirationTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    workInProgress<span class=\"token punctuation\">.</span>memoizedProps <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>pendingProps<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后它调用completeWork函数，它基本上是一个类似于我们在beginWork中看到的大转换语句</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">completeWork</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> workInProgress<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> FunctionComponent<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">case</span> ClassComponent<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">case</span> HostComponent<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">...</span>\n            <span class=\"token function\">updateHostComponent</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> workInProgress<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">case</span> <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>由于我们的span Fiber节点是HostComponent，因此它运行<a href=\"https://github.com/facebook/react/blob/cbbc2b6c4d0d8519145560bd8183ecde55168b12/packages/react-reconciler/src/ReactFiberBeginWork.js#L686\"><strong>updateHostComponent</strong></a>函数。在这个函数中，React基本上执行以下操作：</p>\n<ul>\n<li>准备DOM更新</li>\n<li>将这些更新放到span fiber节点的updateQueue</li>\n<li>将这些effect应用到更新DOM上</li>\n</ul>\n<p>在执行这些操作之前，span Fiber节点如下所示：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n    stateNode<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HTMLSpanElement</span><span class=\"token punctuation\">,</span>\n    type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"span\"</span><span class=\"token punctuation\">,</span>\n    effectTag<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n    updateQueue<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当工作完成时，它看起来像这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n    stateNode<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HTMLSpanElement</span><span class=\"token punctuation\">,</span>\n    type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"span\"</span><span class=\"token punctuation\">,</span>\n    effectTag<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n    updateQueue<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"children\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>​\t注意effectTag和updateQueue字段的区别。它不再是0，它的值是4.在二进制中，这是100，这意味着第三位被设置，这是<strong>update</strong> side-effect的标志位。这是react需要在接下来的commit阶段对这个节点仅需的工作。<strong>updateQueue</strong>字段保存将用于更新的有效payload。 </p>\n<p>​\t当react处理完<strong>ClickCounter</strong>和他的孩子，render阶段就结束了。它现在可以将完成的alternate tree分配给FiberRoot上的finishedWork属性。这是需要刷新到屏幕的新树。它可以在渲染阶段后立即处理，也可以在浏览器给出React时间后再处理。</p>\n<h3>Effects list</h3>\n<p>​\t在我们的例子中，因为span节点和ClickCounter组件有side effects，react会将span的fiber节点连接到HostFiber的firstEffect属性。react会在<a href=\"https://github.com/facebook/react/blob/d5e1bf07d086e4fc1998653331adecddcd0f5274/packages/react-reconciler/src/ReactFiberScheduler.js#L999\"><strong>compliteUnitOfWork</strong></a>函数构建effects list，以下是具有更新span节点和ClickCounter上的钩子效果的fiber tree：</p>\n<p><img src=\"http://pjpqjxkf6.bkt.clouddn.com/1_TRmFSeuOuWlY3HXh86cvDA.png\"></p>\n<h2>commit阶段</h2>\n<p>​\tcommit阶段是react更新DOM和调用cDU生命周期。为了实现，react会遍历render阶段构建的effects list并应用他们。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> ClickCounter<span class=\"token punctuation\">,</span> effectTag<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'span'</span><span class=\"token punctuation\">,</span> effectTag<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>​\tClickCouter的effect tag是5（二进制是101），定义了<strong>Update</strong>，对于class组件来说基本上是转换<strong>componentDidUpdate</strong>，二进制的最后一位被设置意味着这个fiber节点在<strong>render</strong>阶段的所有工作已经完成。</p>\n<p>​\tspan的effect tag是4（二进制100），定义了 update，对于host组件来说是DOM更新。在span元素的情况下，react会更新元素的<strong>textContent</strong>。</p>\n<h3>Applying effects</h3>\n<p>​\t让我们看看react是如何应用这些effects的，<a href=\"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L523\"><strong>commitRoot</strong></a>函数，包含了三个子函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">commitRoot</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> finishedWork<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">commitBeforeMutationLifecycles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">commitAllHostEffects</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    root<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> finishedWork<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">commitAllLifeCycles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p> \t每一个子函数都会遍历effecys list并检查effects的类型。当它找到与函数目的相关的效果时，它会应用它。在我们的例子中，commitRoot会调用<strong>ClickCounter</strong>的<strong>cDU</strong>和更新<strong>span</strong>元素的文本。</p>\n<p>​\t第一个函数<a href=\"https://github.com/facebook/react/blob/fefa1269e2a67fa5ef0992d5cc1d6114b7948b7e/packages/react-reconciler/src/ReactFiberCommitWork.js#L183\">commitBeforeMutationLifeCycles</a>会查找<a href=\"https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/shared/ReactSideEffectTags.js#L25\"><strong>Snapshot</strong></a> effect并调用<strong>getSnapshotBeforeUpdate</strong>方法。不过我们的<strong>ClickCouter</strong>组件没有实现这个方法，react不会在<strong>render</strong>阶段中添加这个effect，所以在我们的例子中，这个函数不起作用。</p>\n<h3>DOM updates</h3>\n<p>​\t下一步，react会执行<a href=\"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L376\"><strong>commitAllHostEffects</strong></a>函数，在这个函数中React会将<strong>span</strong>元素的文本从0改变到1，而ClickCounter组件则不受任何影响因为class组件对应的节点没有任何DOM更新。</p>\n<p>​\t该函数的要点是它选择正确的效果类型并应用相应的操作。在我们的例子中，我们需要更新span元素的文本，所以我们在这里采用<strong>Update</strong>分支：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateHostEffects</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>primaryEffectTag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> Placement<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">case</span> PlacementAndUpdate<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">case</span> Update<span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">var</span> current <span class=\"token operator\">=</span> nextEffect<span class=\"token punctuation\">.</span>alternate<span class=\"token punctuation\">;</span>\n          <span class=\"token function\">commitWork</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> nextEffect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">case</span> Deletion<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>​\t继续执行<strong>commitWork</strong>，react会执行<a href=\"https://github.com/facebook/react/blob/8a8d973d3cc5623676a84f87af66ef9259c3937c/packages/react-dom/src/client/ReactDOMComponent.js#L326\"><strong>updateDOMProperties</strong></a>函数，他将在render阶段添加的updateQueue应用到fiber节点上，并更新<strong>span</strong>元素的<strong>textContent</strong>属性。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateDOMProperties</span><span class=\"token punctuation\">(</span>domElement<span class=\"token punctuation\">,</span> updatePayload<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> updatePayload<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> propKey <span class=\"token operator\">=</span> updatePayload<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> propValue <span class=\"token operator\">=</span> updatePayload<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propKey <span class=\"token operator\">===</span> <span class=\"token constant\">STYLE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">}</span> \n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propKey <span class=\"token operator\">===</span> <span class=\"token constant\">DANGEROUSLY_SET_INNER_HTML</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span> \n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propKey <span class=\"token operator\">===</span> <span class=\"token constant\">CHILDREN</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setTextContent</span><span class=\"token punctuation\">(</span>domElement<span class=\"token punctuation\">,</span> propValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>​\t当DOM更新被执行后，react将<strong>finishedWork</strong>树分配到<strong>HostRoot</strong>：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">root<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> finishedWork<span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Calling post mutation lifecycle hooks</h3>\n<p>​\t剩下的最后一个函数是<a href=\"https://github.com/facebook/react/blob/d5e1bf07d086e4fc1998653331adecddcd0f5274/packages/react-reconciler/src/ReactFiberScheduler.js#L479\"><strong>commitAllLifecycles</strong></a>。在这里react会调用更新后的生命周期。在render阶段中，react添加<strong>Update</strong> effect到<strong>ClickCounter</strong>组件中。这是<strong>commitAllLifecycles</strong>查找并调用的其中一个周期。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">commitAllLifeCycles</span><span class=\"token punctuation\">(</span>finishedRoot<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nextEffect <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> effectTag <span class=\"token operator\">=</span> nextEffect<span class=\"token punctuation\">.</span>effectTag<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>effectTag <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>Update <span class=\"token operator\">|</span> Callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> current <span class=\"token operator\">=</span> nextEffect<span class=\"token punctuation\">.</span>alternate<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">commitLifeCycles</span><span class=\"token punctuation\">(</span>finishedRoot<span class=\"token punctuation\">,</span> current<span class=\"token punctuation\">,</span> nextEffect<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>effectTag <span class=\"token operator\">&amp;</span> Ref<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">commitAttachRef</span><span class=\"token punctuation\">(</span>nextEffect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        nextEffect <span class=\"token operator\">=</span> nextEffect<span class=\"token punctuation\">.</span>nextEffect<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>​\t在这个函数中，react也会调用第一次被渲染的组件的<strong>cDM</strong></p>","timeToRead":10,"frontmatter":{"title":"state & props update","date":"January 07, 2018","spoiler":"深入react内部"},"fields":{"slug":"/state & props update/"}}},"pageContext":{"slug":"/state & props update/","previous":null,"next":{"fields":{"slug":"/Promise/"},"frontmatter":{"title":"Promise"}}}}