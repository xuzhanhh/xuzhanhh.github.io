{"data":{"site":{"siteMetadata":{"title":"酱香型猫砂盆","author":"xuzhanhh"}},"markdownRemark":{"id":"de702dba-c91b-5587-ad9f-c0360a224b3f","html":"<p>Demo:</p>\n<p><a href=\"https://stackblitz.com/edit/react-jwqn64\">https://stackblitz.com/edit/react-jwqn64</a></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ClickCounter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Update counter</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当我们点击button时，我们可以看到<a href=\"https://github.com/facebook/react/blob/cbbc2b6c4d0d8519145560bd8183ecde55168b12/packages/react-reconciler/src/ReactFiberCompleteWork.js#L532\"><strong>completeWork</strong></a>：</p>\n<ul>\n<li>更新<code class=\"language-text\">ClickCounter</code>中的count state</li>\n<li>调用<code class=\"language-text\">render</code>方法去得到children列表并执行比较</li>\n<li>更新<code class=\"language-text\">span</code>元素的props</li>\n</ul>\n<p>在<a href=\"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L523\"><strong>commitRoot</strong></a>：</p>\n<ul>\n<li>更新<code class=\"language-text\">span</code>元素的<code class=\"language-text\">textContent</code>属性</li>\n<li>调用<code class=\"language-text\">cDU</code></li>\n</ul>\n<h3>Scheduling updates（安排更新）</h3>\n<p>​\t当我们点击按钮，会触发点击事件然后react解析我们传给按钮props的callback。在这个应用中callback是增加counter并更新state。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ClickCounter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...</span>\n    <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>   </code></pre></div>\n<p>​\t\t每一个React组件都有一个<code class=\"language-text\">updater</code>作为组件和react核心通信的桥梁。他允许<code class=\"language-text\">setState</code>在不同的环境下（ReactDOM，RN， SSR， test）实现不同的效果</p>\n<blockquote>\n<p>注：关于updater，可以关联学习dan大神博客的<a href=\"https://overreacted.io/how-does-setstate-know-what-to-do/\">How Does setState Know What to Do?</a> </p>\n</blockquote>\n<p>​\t在这篇文章中，我们会侧重ReactDom的使用了Fiber reconciler的updater实现，对于<code class=\"language-text\">ClickCounter</code>组件是<a href=\"https://github.com/facebook/react/blob/6938dcaacbffb901df27782b7821836961a5b68d/packages/react-reconciler/src/ReactFiberClassComponent.js#L186\"><strong>classComponentUpdater</strong></a>，他负责检索fiber实例，队列更新和安排工作。</p>\n<p>​\t当更新排队时，他们基本上只是被添加到fiber节点上处理的更新队列中。在我们的实例中，与ClickCounter组件对应的fiber节点有以下的结构</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n    stateNode<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClickCounter</span><span class=\"token punctuation\">,</span>\n    type<span class=\"token punctuation\">:</span> ClickCounter<span class=\"token punctuation\">,</span>\n    updateQueue<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n         baseState<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span>\n         firstUpdate<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n             next<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                 payload<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n             <span class=\"token punctuation\">}</span>\n         <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n         <span class=\"token operator\">...</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n     <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们可以看到，<code class=\"language-text\">updateQueue.firstUpdate.next.payload</code>中的函数是我们传给<code class=\"language-text\">ClickCounter</code>组件中setState的callback。他表示在render阶段需要被处理的第一个更新。</p>\n<h3>处理ClickCounter Fiber结点的更新</h3>\n<p>​\t我们已经有一个ClickCounter实例，所以我们进入<a href=\"https://github.com/facebook/react/blob/6938dcaacbffb901df27782b7821836961a5b68d/packages/react-reconciler/src/ReactFiberClassComponent.js#L976\"><strong>updateClassInstance</strong></a>函数，这里是react对class组件执行最多操作的函数。以下是按执行顺序在函数中执行的最重要的操作：</p>\n<ul>\n<li>调用<strong>UNSAFE_componentWillReceiveProps</strong>钩子（在react v17中弃用）</li>\n<li>执行<strong>updateQueue</strong>中的更新并生成新的state</li>\n<li>用新的state调用<strong>getDerivedStateFromProps</strong>并得到结果</li>\n<li>调用<strong>sCU</strong>确定一个组件是否需要更新，如果<strong>false</strong>，跳过整个渲染过程</li>\n<li>调用<strong>UNSAFE_componentWillUpdate</strong>钩子（在react v17中弃用）</li>\n<li>添加一个effect去触发<strong>componentDidUpdate</strong>钩子</li>\n</ul>\n<blockquote>\n<p><strong>cDU</strong>这个effect在<strong>render</strong>阶段中被添加，但是在<strong>commit</strong>中执行</p>\n</blockquote>\n<ul>\n<li>更新组件实例的<strong>state</strong>和<strong>props</strong></li>\n</ul>\n<p>函数简化后如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateClassInstance</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> workInProgress<span class=\"token punctuation\">,</span> ctor<span class=\"token punctuation\">,</span> newProps<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>stateNode<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> oldProps <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>memoizedProps<span class=\"token punctuation\">;</span>\n    instance<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> oldProps<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldProps <span class=\"token operator\">!==</span> newProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">callComponentWillReceiveProps</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">,</span> newProps<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> updateQueue <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>updateQueue<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>updateQueue <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">processUpdateQueue</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">,</span> updateQueue<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        newState <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>memoizedState<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">applyDerivedStateFromProps</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    newState <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>memoizedState<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> shouldUpdate <span class=\"token operator\">=</span> <span class=\"token function\">checkShouldComponentUpdate</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">,</span> ctor<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shouldUpdate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        instance<span class=\"token punctuation\">.</span><span class=\"token function\">componentWillUpdate</span><span class=\"token punctuation\">(</span>newProps<span class=\"token punctuation\">,</span> newState<span class=\"token punctuation\">,</span> nextContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        workInProgress<span class=\"token punctuation\">.</span>effectTag <span class=\"token operator\">|=</span> Update<span class=\"token punctuation\">;</span>\n        workInProgress<span class=\"token punctuation\">.</span>effectTag <span class=\"token operator\">|=</span> Snapshot<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    instance<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> newProps<span class=\"token punctuation\">;</span>\n    instance<span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> newState<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> shouldUpdate<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面的代码片段移除了一些辅助代码。例如，在调用生命周期方法或添加effect来触发它们时，react会用<strong>typeof</strong>检查一个组件是否实现了这些方法。下面是react在添加effect前检查<strong>cDU</strong>方法</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> instance<span class=\"token punctuation\">.</span>componentDidUpdate <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    workInProgress<span class=\"token punctuation\">.</span>effectTag <span class=\"token operator\">|=</span> Update<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>好的，现在我们知道在render阶段<strong>ClickCounter</strong>会执行什么操作，现在让我们看看这些操作是怎么改变fiber节点的值。当react开始工作前，<strong>ClickCounter</strong>的fiber节点：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n    effectTag<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    elementType<span class=\"token punctuation\">:</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClickCounter</span><span class=\"token punctuation\">,</span>\n    firstEffect<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    memoizedState<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    type<span class=\"token punctuation\">:</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClickCounter</span><span class=\"token punctuation\">,</span>\n    stateNode<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        state<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    updateQueue<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        baseState<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        firstUpdate<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            next<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                payload<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>…<span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在工作完成后，fiber节点是这样的：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n    effectTag<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n    elementType<span class=\"token punctuation\">:</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClickCounter</span><span class=\"token punctuation\">,</span>\n    firstEffect<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    memoizedState<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    type<span class=\"token punctuation\">:</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClickCounter</span><span class=\"token punctuation\">,</span>\n    stateNode<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        state<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    updateQueue<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        baseState<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        firstUpdate<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n        <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在更新被执行后，<strong>count</strong>的值在<strong>memoized</strong>和<strong>updateQueue</strong>中的<strong>baseState</strong>变成了<strong>1</strong>。react也更新了<strong>ClickCounter</strong>组件实例中的state(stateNode)。</p>\n<p>在这个时候，队列中已经没有更新了，所以<strong>firstUpdate</strong>是<strong>null</strong>。而且<strong>effectTag</strong>从0->4，二进制中是100，即第三位设了1，意义是 <a href=\"https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/shared/ReactSideEffectTags.js\">side-effect tag</a>中的<strong>Update</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> Update <span class=\"token operator\">=</span> <span class=\"token number\">0b00000000100</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>总结，当在处理ClickCounter fiber节点时，react调用更新前的生命周期，更新state和定义相应的side-effects。</p>\n<h3>Reconciling children for the ClickCounter Fiber</h3>\n<p>下一步，react开始 <a href=\"https://github.com/facebook/react/blob/340bfd9393e8173adca5380e6587e1ea1a23cefa/packages/react-reconciler/src/ReactFiberBeginWork.js#L355\">finishClassComponent</a>，在这里react会调用react组件实例的<strong>render</strong>方法并在组件返回的的孩子上应用diff算法。更高阶的概述在这个<a href=\"https://reactjs.org/docs/reconciliation.html#the-diffing-algorithm\">文档</a>。</p>\n<blockquote>\n<p>当比较两个相同类型的React DOM元素时，React查看两者的属性，保持相同的底层DOM节点，并仅更新更改的属性。</p>\n</blockquote>\n<p>如果我们深入挖掘，我们会发现实际上是比较react元素的fiber节点，但我现在不会详细介绍，因为这个过程非常精细。我会写一篇单独的文章，特别关注child reconciliation。</p>\n<blockquote>\n<p>如果您急于自己学习细节，查看<a href=\"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactChildFiber.js#L732\">reconcileChildrenArray</a>函数因为我们这个应用的render方法返回了一个react元素的数组。</p>\n</blockquote>","timeToRead":4,"frontmatter":{"title":"state & props update","date":"December 22, 2018","spoiler":"深入react内部"},"fields":{"slug":"/state & props update/"}}},"pageContext":{"slug":"/state & props update/","previous":{"fields":{"slug":"/react 16.7/"},"frontmatter":{"title":"react 16.7"}},"next":{"fields":{"slug":"/Inside Fiber/"},"frontmatter":{"title":"Inside Fiber"}}}}