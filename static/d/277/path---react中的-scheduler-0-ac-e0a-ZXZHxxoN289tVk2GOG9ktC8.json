{"data":{"site":{"siteMetadata":{"title":"酱香型猫砂盆","author":"xuzhanhh"}},"markdownRemark":{"id":"f85f470b-f6e1-59c9-b0f4-ebfc9aed753c","html":"<h2>rAF的调度方式</h2>\n<h3>1. 所有rAF回调始终在相同或下一个帧中运行</h3>\n<p>    在事件处理程序中排队的任何rAF都将在同一帧中执行。 在rAF中排队的任何rAF将在下一帧中执行。</p>\n<h3>2. 每一个你触发的rAF都会运行</h3>\n<p>    尽管执行时间很长，rAF也不会受到限制。例如队列中有五个rAF回调，每个都会占用100ms时间。浏览器依然不会分发他们到每一帧中，而是在同一帧中执行，尽管它会占用500ms时间。这会造成一个严重的阻塞。</p>\n<p>以下两种情况就会触发这个问题：</p>\n<p>    1. 在一个rAF结尾请求一个新的callback\n    2. 你在一个input时间处理器中调用rAF，这样可能在一帧中调用多次。</p>\n<p>    <strong>你可以自己合并rAF</strong>。因此：如果在同一帧内有多个“相同”回调触发，则必须管理调度/合并。也就是说，Chrome等浏览区会尝试解决这个问题。如果rAF正在占用主线程，浏览器将开始限制输入事件，以便希望争用将被清除。</p>\n<h2>一帧里浏览器会做什么</h2>\n<p>主线程：<img src=\"/images/1*ad-k5hYKQnRQJF8tv8BIqg.png\" alt=\"img\"></p>\n<p>多线程：</p>\n<p><img src=\"/images/1*atEwskfs0gtIryRrgnAPkw.png\" alt=\"img\"></p>\n<h2>如何定义requestIdleCallback</h2>\n<p>w3c对requestIdelCallback的非规范定义如下:</p>\n<p>    在输入处理，给定帧的渲染和合成完成之后，用户代理的主线程经常变为空闲，直到下一帧开始;另一个待处理的任务有资格运行;或收到用户输入。此规范提供了一种通过requestIdleCallback API在此空闲时间内调度回调执行的方法。通过requestIdleCallback API发布的回调有资格在用户代理定义的空闲时段内运行。</p>\n<p>    当执行空闲回调时，将给出对应于当前空闲时段结束的截止时间。关于什么构成空闲时段的决定是用户代理定义的，但是期望它们发生在浏览器期望空闲的静止时段中。</p>\n<p>    空闲时段的一个示例是在给定帧提交到屏幕和在活动动画期间开始下一帧处理之间的时间，如图1所示。这些空闲时段将在活动动画和屏幕更新期间频繁发生，但通常会非常短（即，对于具有60Hz vsync周期的设备，小于16ms）。</p>\n<p><img src=\"/images/image01.png\" alt=\"Example of an inter-frame idle period.\"></p>\n<p>    空闲时段的另一个示例是当用户代理空闲而没有发生屏幕更新时。 在这种情况下，用户代理可能没有即将到来的任务，它可以限制空闲时段的结束。</p>\n<p>     为了避免在不可预测的任务中引起用户可察觉的延迟，例如用户输入的处理，这些空闲时段的长度应该被限制为最大值50ms。 一旦空闲时段结束，用户代理可以调度另一个空闲时段，如果它保持空闲，如图2所示，以使后台工作能够在更长的空闲时间段内继续发生。</p>\n<p><img src=\"/images/image00.png\" alt=\"Example of an idle period when there are no pending frame updates.\"></p>\n<h2>React中的requestIdleCallback</h2>\n<blockquote>\n<p>以下的代码是实质上是requestIdleCallback的polyfill，通过调度rAF，存储帧开始的时间，然后在绘制(paint)后安排一个postMessage请求。\n在postMessage处理逻辑中，React会在有限的时间中尽可能的多工作。\n通过将空闲调用(idle call)拆分到多次event tick，我们可以确保布局(layout), 绘制(paint)和其他浏览器工作在有效的时间中能正常的工作，而且帧率是动态调整的。</p>\n</blockquote>\n<h3>初始化处理</h3>\n<blockquote>\n<p>React会先从需要的全局引用中捕获到本地引用，以防在代码执行的后续过程中全局引用受到改动导致不一致。</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> localDate <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> localSetTimeout <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> setTimeout <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">?</span> setTimeout <span class=\"token punctuation\">:</span> undefined<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> localClearTimeout <span class=\"token operator\">=</span>\n  <span class=\"token keyword\">typeof</span> clearTimeout <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">?</span> clearTimeout <span class=\"token punctuation\">:</span> undefined<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> localRequestAnimationFrame <span class=\"token operator\">=</span>\n  <span class=\"token keyword\">typeof</span> requestAnimationFrame <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span>\n    <span class=\"token operator\">?</span> requestAnimationFrame\n    <span class=\"token punctuation\">:</span> undefined<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> localCancelAnimationFrame <span class=\"token operator\">=</span>\n  <span class=\"token keyword\">typeof</span> cancelAnimationFrame <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">?</span> cancelAnimationFrame <span class=\"token punctuation\">:</span> undefined<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> getCurrentTime<span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>当页面不在前台时rAF不会运行。如果页面在后台则需要调度工作继续进行，因为页面需要继续加载。</p>\n<p>因此React会用setTimeout继续调度作为备用。</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token constant\">ANIMATION_FRAME_TIMEOUT</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> rAFID<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> rAFTimeoutID<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">requestAnimationFrameWithTimeout</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 触发一个rAF和setTimeout</span>\n  rAFID <span class=\"token operator\">=</span> <span class=\"token function\">localRequestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>timestamp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 触发了rAF则取消setTimeout</span>\n    <span class=\"token function\">localClearTimeout</span><span class=\"token punctuation\">(</span>rAFTimeoutID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>timestamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  rAFTimeoutID <span class=\"token operator\">=</span> <span class=\"token function\">localSetTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 触发了setTimeout则取消rAF</span>\n    <span class=\"token function\">localCancelAnimationFrame</span><span class=\"token punctuation\">(</span>rAFID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token function\">getCurrentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">ANIMATION_FRAME_TIMEOUT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>    在初始化完成后，React会根据是否有window，messageChannel等对象判断当前运行环境，执行不同的流程。这里只看正常的浏览器环境。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">var</span> scheduledHostCallback <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> isMessageEventScheduled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> timeoutTime <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> isAnimationFrameScheduled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> isFlushingHostCallback <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> frameDeadline <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// React假设从30fps开始并通过启发式的跟踪调整速度。如果有更频繁的动画帧则frameTime更少</span>\n  <span class=\"token keyword\">var</span> previousFrameTime <span class=\"token operator\">=</span> <span class=\"token number\">33</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> activeFrameTime <span class=\"token operator\">=</span> <span class=\"token number\">33</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function-variable function\">shouldYieldToHost</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> frameDeadline <span class=\"token operator\">&lt;=</span> <span class=\"token function\">getCurrentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// React使用postMessage手段去延迟空闲工作的时间在重绘(repaint)之后</span>\n  <span class=\"token keyword\">var</span> channel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MessageChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> port <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">.</span>port2<span class=\"token punctuation\">;</span></code></pre></div>\n<p>    为了阅读更清晰，下面的代码顺序与React源码中的不太相同。</p>\n<h3>requestHostCallback&#x26;&#x26;cancelHostCallback</h3>\n<p>    rIC的polyfill中最外层的代码是<strong>requestHostCallback</strong>和<strong>cancelHostCallback</strong>。requestHostCallback的入参和rIC的相似，传入需要调用的函数和必须执行时间。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token function-variable function\">requestHostCallback</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">,</span> absoluteTimeout<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    scheduledHostCallback <span class=\"token operator\">=</span> callback<span class=\"token punctuation\">;</span>\n    timeoutTime <span class=\"token operator\">=</span> absoluteTimeout<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isFlushingHostCallback <span class=\"token operator\">||</span> absoluteTimeout <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 如果上一个callback正在执行中或者absoluteTimeout&lt;0，不等待下一帧，在一个新postMessage中尽快执行</span>\n      port<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>undefined<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isAnimationFrameScheduled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 如果当前没有调度的rAF,调度一个</span>\n      <span class=\"token comment\">// TODO: 如果因为浏览器节流导致rAF没有被触发，React考虑使用setTimeout触发rIC确保执行工作</span>\n      isAnimationFrameScheduled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">requestAnimationFrameWithTimeout</span><span class=\"token punctuation\">(</span>animationTick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function-variable function\">cancelHostCallback</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 清空数据</span>\n    scheduledHostCallback <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    isMessageEventScheduled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    timeoutTime <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>animationTick</h3>\n<p>    animationTick是React传入rAF中的回调函数</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">animationTick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>rafTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>scheduledHostCallback <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">//在帧的开头安排下一个动画回调。 如果调度程序队列在帧的末尾不为空，它将继续在该回调内刷新。 如果队列为空，则它将立即退出。</span>\n      <span class=\"token comment\">// 如果队列为空，会立刻退出。在帧的开头调用rAF回调可确保在最早的帧内触发</span>\n      <span class=\"token comment\">// 如果在帧结束时发布回调就有可能被浏览器跳过帧且不触发回调直到下一帧执行</span>\n      <span class=\"token function\">requestAnimationFrameWithTimeout</span><span class=\"token punctuation\">(</span>animationTick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 当前没有东西要处理了，结束rAF回调</span>\n      isAnimationFrameScheduled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">// 下一帧可用的时间等于当前时间-上一帧结束时间+帧可用时间</span>\n    <span class=\"token keyword\">var</span> nextFrameTime <span class=\"token operator\">=</span> rafTime <span class=\"token operator\">-</span> frameDeadline <span class=\"token operator\">+</span> activeFrameTime<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n      nextFrameTime <span class=\"token operator\">&lt;</span> activeFrameTime <span class=\"token operator\">&amp;&amp;</span>\n      previousFrameTime <span class=\"token operator\">&lt;</span> activeFrameTime\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextFrameTime <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//React不支持帧率高于120hz的浏览设备</span>\n        nextFrameTime <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// 如果一帧长，那么下一帧可能很短。 </span>\n      <span class=\"token comment\">// 如果两个帧连续短，那么这表明我们实际上具有比我们当前优化的帧速率更高的帧速率。 </span>\n      <span class=\"token comment\">// 我们相应地动态调整启发式。 例如，如果我们在120hz显示器或90hz VR显示器上运行。 取两个中的最大值，以防其中一个由于错过帧截止日期而异常。</span>\n      activeFrameTime <span class=\"token operator\">=</span>\n        nextFrameTime <span class=\"token operator\">&lt;</span> previousFrameTime <span class=\"token operator\">?</span> previousFrameTime <span class=\"token punctuation\">:</span> nextFrameTime<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      previousFrameTime <span class=\"token operator\">=</span> nextFrameTime<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 当前帧结束时间等于当前时间+帧可用时间</span>\n    frameDeadline <span class=\"token operator\">=</span> rafTime <span class=\"token operator\">+</span> activeFrameTime<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 如果当前没有postMessage触发</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isMessageEventScheduled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n      isMessageEventScheduled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      port<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>undefined<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>onmessage(rIC的callback)</h3>\n<p>    主要流程为检查当前帧还是否够时间触发callback，够就调用，不够就调用rAF等待下一帧</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  channel<span class=\"token punctuation\">.</span>port1<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    isMessageEventScheduled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> prevScheduledCallback <span class=\"token operator\">=</span> scheduledHostCallback<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> prevTimeoutTime <span class=\"token operator\">=</span> timeoutTime<span class=\"token punctuation\">;</span>\n    scheduledHostCallback <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    timeoutTime <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> currentTime <span class=\"token operator\">=</span> <span class=\"token function\">getCurrentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> didTimeout <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>frameDeadline <span class=\"token operator\">-</span> currentTime <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 空闲阶段没有时间了，检查callback是否有超时时间和到时间了没</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevTimeoutTime <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> prevTimeoutTime <span class=\"token operator\">&lt;=</span> currentTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 到超时时间了，即时当前帧没时间了也要触发</span>\n        didTimeout <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 还没到超时时间</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isAnimationFrameScheduled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// 触发一个rAF重试</span>\n          isAnimationFrameScheduled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">requestAnimationFrameWithTimeout</span><span class=\"token punctuation\">(</span>animationTick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 不触发回调，把数据放回去并结束</span>\n        scheduledHostCallback <span class=\"token operator\">=</span> prevScheduledCallback<span class=\"token punctuation\">;</span>\n        timeoutTime <span class=\"token operator\">=</span> prevTimeoutTime<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 够时间，触发callback，标记正在触发callback</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevScheduledCallback <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      isFlushingHostCallback <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">prevScheduledCallback</span><span class=\"token punctuation\">(</span>didTimeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n        isFlushingHostCallback <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>结尾语</h2>\n<p>    本文到这里就先结束了，在这篇blog中，我们学习rAF的调度方式、一帧里浏览器会做什么、如何定义rIC以及React是怎么实现rIC的，主要是通过rAF+postmessage实现的。但是我们还没接触到React的并行模式是怎么调用rIC的，这个请期待本系列的下一篇blog。</p>\n<h2>参考文献</h2>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestIdleCallback\">https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestIdleCallback</a></p>\n<p><a href=\"https://medium.com/@paul_irish/requestanimationframe-scheduling-for-nerds-9c57f7438ef4\">https://medium.com/@paul_irish/requestanimationframe-scheduling-for-nerds-9c57f7438ef4</a></p>\n<p><a href=\"https://w3c.github.io/requestidlecallback/#idle-periods\">https://w3c.github.io/requestidlecallback/#idle-periods</a></p>","timeToRead":3,"frontmatter":{"title":"React中的concurrent mode(1)","date":"April 06, 2019","spoiler":"并行模式没什么难的，我们从Scheduler开始学起。"},"fields":{"slug":"/React中的Scheduler/"}}},"pageContext":{"slug":"/React中的Scheduler/","previous":{"fields":{"slug":"/why hooks(2)/"},"frontmatter":{"title":"why hooks(2) — useEffect是怎么跑起来的"}},"next":{"fields":{"slug":"/TypeScript备忘录/"},"frontmatter":{"title":"TypeScript备忘录"}}}}