{"data":{"site":{"siteMetadata":{"title":"酱香型猫砂盆","author":"xuzhanhh"}},"markdownRemark":{"id":"026f8e13-d279-5222-9b1f-874cf9eb0fd2","html":"<blockquote>\n<p>TODO： 添加实际运行时的结构等</p>\n</blockquote>\n<h2>前言</h2>\n<p>​\t\t在<a href=\"https://xuzhanhh.com/why%20hooks/\">上一篇文章</a>中，我们梳理了useState的实现逻辑，得出是如果不考虑额外的优化逻辑，useState与fiber节点唯一的联系就是hooks队列是挂在fiber上的memoizedState，当React执行到当前函数式组件时会将其按序取出并更新。那么这一次我们来到了useEffect，这次的hook是与react-reconciler有很强的联系的，所以我们可以通过这个hooks打开react-reconciler的大门。</p>\n<p>这次我们要观察的组件是👇介个，流程是当点击事件触发后(React触发组件更新)，控制台log之前React到底干了什么。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    React<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'trigger effect'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>div onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>mountEffect &#x26; mountLayoutEffect</h2>\n<p>同样地，根据触发时间不同useEffect也分为两个func-mountEffect和updateEffect</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">mountEffect</span><span class=\"token punctuation\">(</span>\n  create<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">//副作用func</span>\n  deps<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>mixed<span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">//记忆化 用于什么时候触发</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">mountEffectImpl</span><span class=\"token punctuation\">(</span>\n    UpdateEffect <span class=\"token operator\">|</span> PassiveEffect<span class=\"token punctuation\">,</span> <span class=\"token comment\">// fiberEffectTag</span>\n    UnmountPassive <span class=\"token operator\">|</span> MountPassive<span class=\"token punctuation\">,</span> <span class=\"token comment\">// hookEffectTag</span>\n    create<span class=\"token punctuation\">,</span>\n    deps<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">mountLayoutEffect</span><span class=\"token punctuation\">(</span>\n  create<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>\n  deps<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>mixed<span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">mountEffectImpl</span><span class=\"token punctuation\">(</span>\n    UpdateEffect<span class=\"token punctuation\">,</span>  <span class=\"token comment\">//这里不同哦 不传passiveEffect</span>\n    UnmountMutation <span class=\"token operator\">|</span> MountLayout<span class=\"token punctuation\">,</span>\n    create<span class=\"token punctuation\">,</span>\n    deps<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>​\t\t通过代码可以看到mountEffect与mountLayoutEffect唯一的差别就是传入的fiberEffectTag和hookEffectTag不同，当然，这两个hook具体的差别可以看<a href=\"https://reactjs.org/docs/hooks-reference.html#uselayouteffect\">传送门</a>。</p>\n<p>​\t这边简单介绍下<code class=\"language-text\">useEffect</code>触发的时机是React commit完毕后异步执行，<code class=\"language-text\">useLayoutEffect</code>是React commit完毕后同步执行，如果在useLayoutEffect代码太重的话可能会导致线程阻塞，而useEffect则不会阻塞，因为他会在浏览器idle时间执行。这点我们会在后面的代码体现。</p>\n<p>​\t我们先抛开useLayoutEffect只看useEffect的逻辑：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">mountEffectImpl</span><span class=\"token punctuation\">(</span>fiberEffectTag<span class=\"token punctuation\">,</span> hookEffectTag<span class=\"token punctuation\">,</span> create<span class=\"token punctuation\">,</span> deps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> hook <span class=\"token operator\">=</span> <span class=\"token function\">mountWorkInProgressHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> nextDeps <span class=\"token operator\">=</span> deps <span class=\"token operator\">===</span> undefined <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">:</span> deps<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 在renderWithHooks中 currentlyRenderingFiber.effectTag|= sideEffectTag 付给当前fiber节点</span>\n  sideEffectTag <span class=\"token operator\">|=</span> fiberEffectTag<span class=\"token punctuation\">;</span>   \n  <span class=\"token comment\">// 创建effect</span>\n  hook<span class=\"token punctuation\">.</span>memoizedState <span class=\"token operator\">=</span> <span class=\"token function\">pushEffect</span><span class=\"token punctuation\">(</span>hookEffectTag<span class=\"token punctuation\">,</span> create<span class=\"token punctuation\">,</span> undefined<span class=\"token punctuation\">,</span> nextDeps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> FunctionComponentUpdateQueue <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  lastEffect<span class=\"token punctuation\">:</span> Effect <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">pushEffect</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> create<span class=\"token punctuation\">,</span> destroy<span class=\"token punctuation\">,</span> deps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> effect<span class=\"token punctuation\">:</span> Effect <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    tag<span class=\"token punctuation\">,</span>\n    create<span class=\"token punctuation\">,</span>\n    destroy<span class=\"token punctuation\">,</span>\n    deps<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 似拟 自圆</span>\n    next<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>componentUpdateQueue <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    componentUpdateQueue <span class=\"token operator\">=</span> <span class=\"token function\">createFunctionComponentUpdateQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//这个结构很简单的，看上面的type</span>\n    componentUpdateQueue<span class=\"token punctuation\">.</span>lastEffect <span class=\"token operator\">=</span> effect<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> effect<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如果只有他一个 自圆</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> lastEffect <span class=\"token operator\">=</span> componentUpdateQueue<span class=\"token punctuation\">.</span>lastEffect<span class=\"token punctuation\">;</span> <span class=\"token comment\">//这里的逻辑和useState的相同哦</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastEffect <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      componentUpdateQueue<span class=\"token punctuation\">.</span>lastEffect <span class=\"token operator\">=</span> effect<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> effect<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> firstEffect <span class=\"token operator\">=</span> lastEffect<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n      lastEffect<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> effect<span class=\"token punctuation\">;</span>\n      effect<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> firstEffect<span class=\"token punctuation\">;</span>\n      componentUpdateQueue<span class=\"token punctuation\">.</span>lastEffect <span class=\"token operator\">=</span> effect<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">//在memoizedState中仅作记录数据用</span>\n  <span class=\"token keyword\">return</span> effect<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>updateEffect</h2>\n<p>​\tupdateEffect的大体逻辑与mountEffect相同，主要是添加了pushEffect时从prevEffect取出了destroy函数并传入到pushEffect中，且进行依赖检查，如果相同则在hookEffect选择NoHookEffect，不更新memoizedState和不更新sideEffectTag三点。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 这个func和mountEffect没什么差别</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">updateEffect</span><span class=\"token punctuation\">(</span>\n  create<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>\n  deps<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>mixed<span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">updateEffectImpl</span><span class=\"token punctuation\">(</span>\n    UpdateEffect <span class=\"token operator\">|</span> PassiveEffect<span class=\"token punctuation\">,</span>\n    UnmountPassive <span class=\"token operator\">|</span> MountPassive<span class=\"token punctuation\">,</span>\n    create<span class=\"token punctuation\">,</span>\n    deps<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateEffectImpl</span><span class=\"token punctuation\">(</span>fiberEffectTag<span class=\"token punctuation\">,</span> hookEffectTag<span class=\"token punctuation\">,</span> create<span class=\"token punctuation\">,</span> deps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> hook <span class=\"token operator\">=</span> <span class=\"token function\">updateWorkInProgressHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> nextDeps <span class=\"token operator\">=</span> deps <span class=\"token operator\">===</span> undefined <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">:</span> deps<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> destroy <span class=\"token operator\">=</span> undefined<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 如果当前hook有数据，即更新状态</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentHook <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> prevEffect <span class=\"token operator\">=</span> currentHook<span class=\"token punctuation\">.</span>memoizedState<span class=\"token punctuation\">;</span>\n     <span class=\"token comment\">// 从上一次调用完sideEffect后的返回值取出destroy</span>\n    destroy <span class=\"token operator\">=</span> prevEffect<span class=\"token punctuation\">.</span>destroy<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextDeps <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> prevDeps <span class=\"token operator\">=</span> prevEffect<span class=\"token punctuation\">.</span>deps<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">areHookInputsEqual</span><span class=\"token punctuation\">(</span>nextDeps<span class=\"token punctuation\">,</span> prevDeps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 如果依赖不为空且两次依赖校验相同，则执行上面所说的三点</span>\n        <span class=\"token function\">pushEffect</span><span class=\"token punctuation\">(</span>NoHookEffect<span class=\"token punctuation\">,</span> create<span class=\"token punctuation\">,</span> destroy<span class=\"token punctuation\">,</span> nextDeps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  sideEffectTag <span class=\"token operator\">|=</span> fiberEffectTag<span class=\"token punctuation\">;</span>\n  hook<span class=\"token punctuation\">.</span>memoizedState <span class=\"token operator\">=</span> <span class=\"token function\">pushEffect</span><span class=\"token punctuation\">(</span>hookEffectTag<span class=\"token punctuation\">,</span> create<span class=\"token punctuation\">,</span> destroy<span class=\"token punctuation\">,</span> nextDeps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>至此，useEffect在ReactFiberHooks.js里的逻辑已经没有了，剩下我们将跑入react-reconciler中。观察useEffect剩下的逻辑是怎么执行的。</p>\n<h2>render阶段</h2>\n<p>class组件的具体流程可以看我这篇<a href=\"https://xuzhanhh.com/Inside%20Fiber/\">blog</a>，下面开始分析functional组件，我会将设计一个分界点在updateFunctionComponent，这样我认为流程看起来会更加清晰</p>\n<h3>在updateFunctionComponent之前</h3>\n<h4>renderRoot &#x26; workloop</h4>\n<p>reconcile通常从<code class=\"language-text\">HostRoot</code>fiber结点，并通过<a href=\"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L1132\">renderRoot</a>方法开始。但是，React会快速跳过已经处理过的fiber节点知道他找到一个未完成工作的结点。举个🌰，如果你在组件树的深层调用<code class=\"language-text\">setState</code>，React仍然会从Root节点开始reconcile不过会快速跳过节点直到遇到调用setState的组件。在renderRoot中，所有的fiber节点都会在<a href=\"https://github.com/facebook/react/blob/f765f022534958bcf49120bf23bc1aa665e8f651/packages/react-reconciler/src/ReactFiberScheduler.js#L1136\">workloop</a>中被处理。在本篇blog中，我们默认使用同步模式。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">workLoop</span><span class=\"token punctuation\">(</span>isYieldy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isYieldy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Flush work without yielding</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nextUnitOfWork <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      nextUnitOfWork <span class=\"token operator\">=</span> <span class=\"token function\">performUnitOfWork</span><span class=\"token punctuation\">(</span>nextUnitOfWork<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">nextUnitOfWork</code>会保留对<code class=\"language-text\">workInProgress</code>tree中需要处理的fiber节点的引用。当React遍历fiber tree时，会用这个变量去知晓这里是否有其他未完成工作的fiber结点。</p>\n<p>这里会有四个主要函数用于遍历fiber树及发起、完成工作：</p>\n<ul>\n<li><a href=\"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L1056\">performUnitOfWork</a></li>\n<li><a href=\"https://github.com/facebook/react/blob/cbbc2b6c4d0d8519145560bd8183ecde55168b12/packages/react-reconciler/src/ReactFiberBeginWork.js#L1489\">beginWork</a></li>\n<li><a href=\"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L879\">completeUnitOfWork</a></li>\n<li><a href=\"https://github.com/facebook/react/blob/cbbc2b6c4d0d8519145560bd8183ecde55168b12/packages/react-reconciler/src/ReactFiberCompleteWork.js#L532\">completeWork</a></li>\n</ul>\n<p>让我们通过下面这个简化了的gif演示他们是怎么运行的，每一个函数需要一个fiber节点作为入参。当React遍历fiber树时可以清楚地看到当前fiber节点的变动，在处理父亲节点前会先会完成孩子节点。这个图动的很快，建议仔细一步步看。</p>\n<blockquote>\n<p>同一列是兄弟节点，向右的是孩子节点</p>\n</blockquote>\n<p><img src=\"/images/1*A3-yF-3Xf47nPamFpRm64w.png\" alt=\"img\"></p>\n<h4>performUnitOfWork</h4>\n<p><strong>performUnitOfWork</strong>接收一个从<strong>workInProgress tree</strong>中的fiber节点，然后调用<strong>beginWork</strong>，beginWork是触发fiber节点更新的地方。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">performUnitOfWork</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> next <span class=\"token operator\">=</span> <span class=\"token function\">beginWork</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        next <span class=\"token operator\">=</span> <span class=\"token function\">completeUnitOfWork</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>beginWork</h4>\n<p>在beginWork中，主要逻辑分为判断该fiber的props和context有否发生变化，如果发生变化则标记didReceiveUpdate为true，且判断是否需要更新，如果没有更新则return。没有return则进入更新组件阶段。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 这里分析函数式组件的beginWork, current->当前渲染使用的fiber，workInProgress->这次更新用的fiber</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">beginWork</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> workInProgress<span class=\"token punctuation\">,</span> renderExpirationTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> updateExpirationTime <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>expirationTime<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 还剩多少时间</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> oldProps <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>memoizedProps<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> newProps <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>pendingProps<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldProps <span class=\"token operator\">!==</span> newProps <span class=\"token operator\">||</span> <span class=\"token function\">hasLegacyContextChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">//如果props或者context变化，则标记该fiber节点在之前已经更新过</span>\n      <span class=\"token comment\">//在memo的且memorize相同的情况下不设置</span>\n      didReceiveUpdate <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>updateExpirationTime <span class=\"token operator\">&lt;</span> renderExpirationTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      didReceiveUpdate <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 这个fiber节点没活干，所以直接跳出即可，但是在跳出前还有一些优化逻辑要处理，e.g.往栈上放必须的数据</span>\n      <span class=\"token comment\">// ...这里我们暂时不关心</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">bailoutOnAlreadyFinishedWork</span><span class=\"token punctuation\">(</span>\n        current<span class=\"token punctuation\">,</span>\n        workInProgress<span class=\"token punctuation\">,</span>\n        renderExpirationTime<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//如果上一个状态没有fiber节点</span>\n    didReceiveUpdate <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">//清空呼气时间</span>\n  workInProgress<span class=\"token punctuation\">.</span>expirationTime <span class=\"token operator\">=</span> NoWork<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> FunctionComponent<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> Component <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> unresolvedProps <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>pendingProps<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> resolvedProps <span class=\"token operator\">=</span>\n        workInProgress<span class=\"token punctuation\">.</span>elementType <span class=\"token operator\">===</span> Component\n          <span class=\"token operator\">?</span> unresolvedProps\n          <span class=\"token punctuation\">:</span> <span class=\"token function\">resolveDefaultProps</span><span class=\"token punctuation\">(</span>Component<span class=\"token punctuation\">,</span> unresolvedProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">updateFunctionComponent</span><span class=\"token punctuation\">(</span>\n        current<span class=\"token punctuation\">,</span>\n        workInProgress<span class=\"token punctuation\">,</span>\n        Component<span class=\"token punctuation\">,</span>\n        resolvedProps<span class=\"token punctuation\">,</span>\n        renderExpirationTime<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> workInProgress<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>updateFunctionComponent</h4>\n<p>​\t在这个函数中，React会调用renderWithHooks得到当前fiber节点的结果并返回该组件的子组件。并根据didReceiveUpdate判断该组件树(该组件及其子组件)是否需要更新。如果不需要更新则在完成还原等操作后跳出(bail out)，否则进入子组件的reconcile流程(reconcileChildren)。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateFunctionComponent</span><span class=\"token punctuation\">(</span>\n  current<span class=\"token punctuation\">,</span>\n  workInProgress<span class=\"token punctuation\">,</span>\n  Component<span class=\"token punctuation\">,</span>\n  nextProps<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span>\n  renderExpirationTime<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">const</span> unmaskedContext <span class=\"token operator\">=</span> <span class=\"token function\">getUnmaskedContext</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">,</span> Component<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token function\">getMaskedContext</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">,</span> unmaskedContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> nextChildren<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">prepareToReadContext</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">,</span> renderExpirationTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  nextChildren <span class=\"token operator\">=</span> <span class=\"token function\">renderWithHooks</span><span class=\"token punctuation\">(</span>\n    current<span class=\"token punctuation\">,</span>\n    workInProgress<span class=\"token punctuation\">,</span>\n    Component<span class=\"token punctuation\">,</span>\n    nextProps<span class=\"token punctuation\">,</span>\n    context<span class=\"token punctuation\">,</span>\n    renderExpirationTime<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 如果上一个状态有fiber节点且没有接受到更新 如果调用了setState则会在updateReducer中</span>\n<span class=\"token comment\">// 调用markWorkInProgressReceivedUpdate将didReceiveUpdate置为true</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>didReceiveUpdate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 因为要跳出这个组件的render阶段，所以清空hooks，重置workInProgress中的数据</span>\n    <span class=\"token function\">bailoutHooks</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> workInProgress<span class=\"token punctuation\">,</span> renderExpirationTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">bailoutOnAlreadyFinishedWork</span><span class=\"token punctuation\">(</span>\n      current<span class=\"token punctuation\">,</span>\n      workInProgress<span class=\"token punctuation\">,</span>\n      renderExpirationTime<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">reconcileChildren</span><span class=\"token punctuation\">(</span>\n    current<span class=\"token punctuation\">,</span>\n    workInProgress<span class=\"token punctuation\">,</span>\n    nextChildren<span class=\"token punctuation\">,</span>\n    renderExpirationTime<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> workInProgress<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>在updateFunctionComponent之后</h3>\n<h4>该组件不需要更新(修改&#x26;新增)</h4>\n<p>如果该组件不需要更新，那么就会执行以下操作后跳出：</p>\n<ol>\n<li>清空已经入队的更新</li>\n<li>移除PassiveEffect和UpdateEffect</li>\n<li>移除呼气时间</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bailoutHooks</span><span class=\"token punctuation\">(</span>\n  current<span class=\"token punctuation\">:</span> Fiber<span class=\"token punctuation\">,</span>\n  workInProgress<span class=\"token punctuation\">:</span> Fiber<span class=\"token punctuation\">,</span>\n  expirationTime<span class=\"token punctuation\">:</span> ExpirationTime<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 复用updateQueue   </span>\n  workInProgress<span class=\"token punctuation\">.</span>updateQueue <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>updateQueue<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 移除两个tag</span>\n  workInProgress<span class=\"token punctuation\">.</span>effectTag <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>PassiveEffect <span class=\"token operator\">|</span> UpdateEffect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>expirationTime <span class=\"token operator\">&lt;=</span> expirationTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//移除呼气时间</span>\n    current<span class=\"token punctuation\">.</span>expirationTime <span class=\"token operator\">=</span> NoWork<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"4\">\n<li>复用上次context</li>\n<li>检查子组件是否有更新，如果子组件没有更新，则可以对该组件执行completeUnitOfWork操作了</li>\n<li>子组件有更新，通过current.child重新创建workInProgress.child并作为下一个要处理的fiber节点传出</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">bailoutOnAlreadyFinishedWork</span><span class=\"token punctuation\">(</span>\n  current<span class=\"token punctuation\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  workInProgress<span class=\"token punctuation\">:</span> Fiber<span class=\"token punctuation\">,</span>\n  renderExpirationTime<span class=\"token punctuation\">:</span> ExpirationTime<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">cancelWorkTimer</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 复用上次context</span>\n    workInProgress<span class=\"token punctuation\">.</span>contextDependencies <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>contextDependencies<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 检查子组件是否有更新</span>\n  <span class=\"token keyword\">const</span> childExpirationTime <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>childExpirationTime<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>childExpirationTime <span class=\"token operator\">&lt;</span> renderExpirationTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 如果return null，表示子组件都没更新 则可以对该组件执行completeUnitOfWork操作了</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 这个组件没有更新，不过他的子组件有，通过current.child重新创建workInProgress.child</span>\n    <span class=\"token function\">cloneChildFibers</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> workInProgress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> workInProgress<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>该组件需要更新(修改&#x26;新增)</h4>\n<p>​\t如果该组件需要更新，那么也要先更新完他的子组件才能complete自己呀，详情看上面👆的gif图。子组件更新的逻辑分两种，根据current=== null与否判断，具体逻辑看代码注释</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">reconcileChildren</span><span class=\"token punctuation\">(</span>\n  current<span class=\"token punctuation\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  workInProgress<span class=\"token punctuation\">:</span> Fiber<span class=\"token punctuation\">,</span>\n  nextChildren<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span>\n  renderExpirationTime<span class=\"token punctuation\">:</span> ExpirationTime<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 如果这个是个之前没渲染过的船新组件，React不会通过应用最小副作用去更新他的子组件，而是在父组件渲染前将子组件添加到父组件上。这样React可以通过不跟踪副作用优化协调(reconciliation)过程。</span>\n    workInProgress<span class=\"token punctuation\">.</span>child <span class=\"token operator\">=</span> <span class=\"token function\">mountChildFibers</span><span class=\"token punctuation\">(</span>\n      workInProgress<span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      nextChildren<span class=\"token punctuation\">,</span>\n      renderExpirationTime<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 如果当前(child)子组件跟正在处理(workInProgress)子组件相同，这意味着React还没开始处理子组件，因此React会复用之前的逻辑去复制一份所有当前(current)子组件的实例。如果在这个地方已经用处理过的update是非法的，丢掉这些updat</span>\n    workInProgress<span class=\"token punctuation\">.</span>child <span class=\"token operator\">=</span> <span class=\"token function\">reconcileChildFibers</span><span class=\"token punctuation\">(</span>\n      workInProgress<span class=\"token punctuation\">,</span>\n      current<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">,</span>\n      nextChildren<span class=\"token punctuation\">,</span>\n      renderExpirationTime<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>completeUnitOfWork</h4>\n<p>​\t<strong>由于篇幅限制，这里暂时不介绍React更新子组件的逻辑，这点我们放到后面仔细聊，我们这次关注于这个组件的工作流程。</strong> 那么我们假定没有子组件了，React知道已经到达分支的结尾所以他可以完成当前节点了且完成节点后React会开始其兄弟节点的工作或向父节点回溯，这部分逻辑是completeUnitOfWork中执行。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">completeUnitOfWork</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> returnFiber <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> siblingFiber <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>sibling<span class=\"token punctuation\">;</span>\n\n        nextUnitOfWork <span class=\"token operator\">=</span> <span class=\"token function\">completeWork</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>siblingFiber <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 如果有兄弟节点， 返回兄弟节点</span>\n            <span class=\"token keyword\">return</span> siblingFiber<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>returnFiber <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 父节点下已经没有需要工作的节点了，返回父节点</span>\n            workInProgress <span class=\"token operator\">=</span> returnFiber<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 到达根节点</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>scheduler</h2>\n<h2>commit阶段</h2>","timeToRead":6,"frontmatter":{"title":"why hooks(2) — useEffect是怎么跑起来的","date":"March 22, 2019","spoiler":"从hooks切入，深入了解React编程模型"},"fields":{"slug":"/why hooks(2)/"}}},"pageContext":{"slug":"/why hooks(2)/","previous":{"fields":{"slug":"/css world(1)/"},"frontmatter":{"title":"神奇的CSS世界(1)"}},"next":{"fields":{"slug":"/React中的Scheduler/"},"frontmatter":{"title":"React中的concurrent mode(1)"}}}}